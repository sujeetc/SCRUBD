{"error": null, "issues": [{"address": 11, "code": "contract GasToken2 {\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // RLP.sol\r\n    // Due to some unexplained bug, we get a slightly different bytecode if \r\n    // we use an import, and are then unable to verify the code in Etherscan\r\n    //////////////////////////////////////////////////////////////////////////\r\n    \r\n    uint256 constant ADDRESS_BYTES = 20;\r\n    uint256 constant MAX_SINGLE_BYTE = 128;\r\n    uint256 constant MAX_NONCE = 256**9 - 1;\r\n\r\n    // count number of bytes required to represent an unsigned integer\r\n    function count_bytes(uint256 n) constant internal returns (uint256 c) {\r\n        uint i = 0;\r\n        uint mask = 1;\r\n        while (n >= mask) {\r\n            i += 1;\r\n            mask *= 256;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    function mk_contract_address(address a, uint256 n) constant internal returns (address rlp) {\r\n        /*\r\n         * make sure the RLP encoding fits in one word:\r\n         * total_length      1 byte\r\n         * address_length    1 byte\r\n         * address          20 bytes\r\n         * nonce_length      1 byte (or 0)\r\n         * nonce           1-9 bytes\r\n         *                ==========\r\n         *                24-32 bytes\r\n         */\r\n        require(n <= MAX_NONCE);\r\n\r\n        // number of bytes required to write down the nonce\r\n        uint256 nonce_bytes;\r\n        // length in bytes of the RLP encoding of the nonce\r\n        uint256 nonce_rlp_len;\r\n\r\n        if (0 < n && n < MAX_SINGLE_BYTE) {\r\n            // nonce fits in a single byte\r\n            // RLP(nonce) = nonce\r\n            nonce_bytes = 1;\r\n            nonce_rlp_len = 1;\r\n        } else {\r\n            // RLP(nonce) = [num_bytes_in_nonce nonce]\r\n            nonce_bytes = count_bytes(n);\r\n            nonce_rlp_len = nonce_bytes + 1;\r\n        }\r\n\r\n        // [address_length(1) address(20) nonce_length(0 or 1) nonce(1-9)]\r\n        uint256 tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len;\r\n\r\n        // concatenate all parts of the RLP encoding in the leading bytes of\r\n        // one 32-byte word\r\n        uint256 word = ((192 + tot_bytes) * 256**31) +\r\n                       ((128 + ADDRESS_BYTES) * 256**30) +\r\n                       (uint256(a) * 256**10);\r\n\r\n        if (0 < n && n < MAX_SINGLE_BYTE) {\r\n            word += n * 256**9;\r\n        } else {\r\n            word += (128 + nonce_bytes) * 256**9;\r\n            word += n * 256**(9 - nonce_bytes);\r\n        }\r\n\r\n        uint256 hash;\r\n\r\n        assembly {\r\n            let mem_start := mload(0x40)        // get a pointer to free memory\r\n            mstore(0x40, add(mem_start, 0x20))  // update the pointer\r\n\r\n            mstore(mem_start, word)             // store the rlp encoding\r\n            hash := sha3(mem_start,\r\n                         add(tot_bytes, 1))     // hash the rlp encoding\r\n        }\r\n\r\n        // interpret hash as address (20 least significant bytes)\r\n        return address(hash);\r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Generic ERC20\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    // owner -> amount\r\n    mapping(address => uint256) s_balances;\r\n    // owner -> spender -> max amount\r\n    mapping(address => mapping(address => uint256)) s_allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Spec: Get the account balance of another account with address `owner`\r\n    function balanceOf(address owner) public constant returns (uint256 balance) {\r\n        return s_balances[owner];\r\n    }\r\n\r\n    function internalTransfer(address from, address to, uint256 value) internal returns (bool success) {\r\n        if (value <= s_balances[from]) {\r\n            s_balances[from] -= value;\r\n            s_balances[to] += value;\r\n            Transfer(from, to, value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens to address `to`\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        address from = msg.sender;\r\n        return internalTransfer(from, to, value);\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens from address `from` to address `to`\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        if(value <= s_allowances[from][spender] && internalTransfer(from, to, value)) {\r\n            s_allowances[from][spender] -= value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Allow `spender` to withdraw from your account, multiple times, up\r\n    // to the `value` amount. If this function is called again it overwrites the\r\n    // current allowance with `value`.\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        address owner = msg.sender;\r\n        if (value != 0 && s_allowances[owner][spender] != 0) {\r\n            return false;\r\n        }\r\n        s_allowances[owner][spender] = value;\r\n        Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Spec: Returns the `amount` which `spender` is still allowed to withdraw\r\n    // from `owner`.\r\n    // What if the allowance is higher than the balance of the `owner`?\r\n    // Callers should be careful to use min(allowance, balanceOf) to make sure\r\n    // that the allowance is actually present in the account!\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\r\n        return s_allowances[owner][spender];\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // GasToken specifics\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    uint8 constant public decimals = 2;\r\n    string constant public name = \"Gastoken.io\";\r\n    string constant public symbol = \"GST2\";\r\n\r\n    // We build a queue of nonces at which child contracts are stored. s_head is\r\n    // the nonce at the head of the queue, s_tail is the nonce behind the tail\r\n    // of the queue. The queue grows at the head and shrinks from the tail.\r\n    // Note that when and only when a contract CREATEs another contract, the\r\n    // creating contract's nonce is incremented.\r\n    // The first child contract is created with nonce == 1, the second child\r\n    // contract is created with nonce == 2, and so on...\r\n    // For example, if there are child contracts at nonces [2,3,4],\r\n    // then s_head == 4 and s_tail == 1. If there are no child contracts,\r\n    // s_head == s_tail.\r\n    uint256 s_head;\r\n    uint256 s_tail;\r\n\r\n    // totalSupply gives  the number of tokens currently in existence\r\n    // Each token corresponds to one child contract that can be SELFDESTRUCTed\r\n    // for a gas refund.\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return s_head - s_tail;\r\n    }\r\n\r\n    // Creates a child contract that can only be destroyed by this contract.\r\n    function makeChild() internal returns (address addr) {\r\n        assembly {\r\n            // EVM assembler of runtime portion of child contract:\r\n            //     ;; Pseudocode: if (msg.sender != 0x0000000000b3f879cb30fe243b4dfee438691c04) { throw; }\r\n            //     ;;             suicide(msg.sender)\r\n            //     PUSH15 0xb3f879cb30fe243b4dfee438691c04 ;; hardcoded address of this contract\r\n            //     CALLER\r\n            //     XOR\r\n            //     PC\r\n            //     JUMPI\r\n            //     CALLER\r\n            //     SELFDESTRUCT\r\n            // Or in binary: 6eb3f879cb30fe243b4dfee438691c043318585733ff\r\n            // Since the binary is so short (22 bytes), we can get away\r\n            // with a very simple initcode:\r\n            //     PUSH22 0x6eb3f879cb30fe243b4dfee438691c043318585733ff\r\n            //     PUSH1 0\r\n            //     MSTORE ;; at this point, memory locations mem[10] through\r\n            //            ;; mem[31] contain the runtime portion of the child\r\n            //            ;; contract. all that's left to do is to RETURN this\r\n            //            ;; chunk of memory.\r\n            //     PUSH1 22 ;; length\r\n            //     PUSH1 10 ;; offset\r\n            //     RETURN\r\n            // Or in binary: 756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3\r\n            // Almost done! All we have to do is put this short (31 bytes) blob into\r\n            // memory and call CREATE with the appropriate offsets.\r\n            let solidity_free_mem_ptr := mload(0x40)\r\n            mstore(solidity_free_mem_ptr, 0x00756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3)\r\n            addr := create(0, add(solidity_free_mem_ptr, 1), 31)\r\n        }\r\n    }\r\n\r\n    // Mints `value` new sub-tokens (e.g. cents, pennies, ...) by creating `value`\r\n    // new child contracts. The minted tokens are owned by the caller of this\r\n    // function.\r\n    function mint(uint256 value) public {\r\n        for (uint256 i = 0; i < value; i++) {\r\n            makeChild();\r\n        }\r\n        s_head += value;\r\n        s_balances[msg.sender] += value;\r\n    }\r\n\r\n    // Destroys `value` child contracts and updates s_tail.\r\n    //\r\n    // This function is affected by an issue in solc: https://github.com/ethereum/solidity/issues/2999\r\n    // The `mk_contract_address(this, i).call();` doesn't forward all available gas, but only GAS - 25710.\r\n    // As a result, when this line is executed with e.g. 30000 gas, the callee will have less than 5000 gas\r\n    // available and its SELFDESTRUCT operation will fail leading to no gas refund occurring.\r\n    // The remaining ~29000 gas left after the call is enough to update s_tail and the caller's balance.\r\n    // Hence tokens will have been destroyed without a commensurate gas refund.\r\n    // Fortunately, there is a simple workaround:\r\n    // Whenever you call free, freeUpTo, freeFrom, or freeUpToFrom, ensure that you pass at least\r\n    // 25710 + `value` * (1148 + 5722 + 150) gas. (It won't all be used)\r\n    function destroyChildren(uint256 value) internal {\r\n        uint256 tail = s_tail;\r\n        // tail points to slot behind the last contract in the queue\r\n        for (uint256 i = tail + 1; i <= tail + value; i++) {\r\n            mk_contract_address(this, i).call();\r\n        }\r\n\r\n        s_tail = tail + value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens (e.g. cents, pennies, ...) belonging to the\r\n    // caller of this function by destroying `value` child contracts, which\r\n    // will trigger a partial gas refund.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function free(uint256 value) public returns (bool success) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens. Returns how many tokens were freed.\r\n    // Otherwise, identical to free.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeUpTo(uint256 value) public returns (uint256 freed) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens owned by address `from`. Requires that `msg.sender`\r\n    // has been approved by `from`.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeFrom(address from, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            return false;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens owned by address `from`. Returns how many tokens were freed.\r\n    // Otherwise, identical to `freeFrom`.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            value = spender_allowance;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return value;\r\n    }\r\n}", "contract": "GasToken2", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "constructor", "lineno": 3, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "28:13827:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 207, "code": "contract GasToken2 {\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // RLP.sol\r\n    // Due to some unexplained bug, we get a slightly different bytecode if \r\n    // we use an import, and are then unable to verify the code in Etherscan\r\n    //////////////////////////////////////////////////////////////////////////\r\n    \r\n    uint256 constant ADDRESS_BYTES = 20;\r\n    uint256 constant MAX_SINGLE_BYTE = 128;\r\n    uint256 constant MAX_NONCE = 256**9 - 1;\r\n\r\n    // count number of bytes required to represent an unsigned integer\r\n    function count_bytes(uint256 n) constant internal returns (uint256 c) {\r\n        uint i = 0;\r\n        uint mask = 1;\r\n        while (n >= mask) {\r\n            i += 1;\r\n            mask *= 256;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    function mk_contract_address(address a, uint256 n) constant internal returns (address rlp) {\r\n        /*\r\n         * make sure the RLP encoding fits in one word:\r\n         * total_length      1 byte\r\n         * address_length    1 byte\r\n         * address          20 bytes\r\n         * nonce_length      1 byte (or 0)\r\n         * nonce           1-9 bytes\r\n         *                ==========\r\n         *                24-32 bytes\r\n         */\r\n        require(n <= MAX_NONCE);\r\n\r\n        // number of bytes required to write down the nonce\r\n        uint256 nonce_bytes;\r\n        // length in bytes of the RLP encoding of the nonce\r\n        uint256 nonce_rlp_len;\r\n\r\n        if (0 < n && n < MAX_SINGLE_BYTE) {\r\n            // nonce fits in a single byte\r\n            // RLP(nonce) = nonce\r\n            nonce_bytes = 1;\r\n            nonce_rlp_len = 1;\r\n        } else {\r\n            // RLP(nonce) = [num_bytes_in_nonce nonce]\r\n            nonce_bytes = count_bytes(n);\r\n            nonce_rlp_len = nonce_bytes + 1;\r\n        }\r\n\r\n        // [address_length(1) address(20) nonce_length(0 or 1) nonce(1-9)]\r\n        uint256 tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len;\r\n\r\n        // concatenate all parts of the RLP encoding in the leading bytes of\r\n        // one 32-byte word\r\n        uint256 word = ((192 + tot_bytes) * 256**31) +\r\n                       ((128 + ADDRESS_BYTES) * 256**30) +\r\n                       (uint256(a) * 256**10);\r\n\r\n        if (0 < n && n < MAX_SINGLE_BYTE) {\r\n            word += n * 256**9;\r\n        } else {\r\n            word += (128 + nonce_bytes) * 256**9;\r\n            word += n * 256**(9 - nonce_bytes);\r\n        }\r\n\r\n        uint256 hash;\r\n\r\n        assembly {\r\n            let mem_start := mload(0x40)        // get a pointer to free memory\r\n            mstore(0x40, add(mem_start, 0x20))  // update the pointer\r\n\r\n            mstore(mem_start, word)             // store the rlp encoding\r\n            hash := sha3(mem_start,\r\n                         add(tot_bytes, 1))     // hash the rlp encoding\r\n        }\r\n\r\n        // interpret hash as address (20 least significant bytes)\r\n        return address(hash);\r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Generic ERC20\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    // owner -> amount\r\n    mapping(address => uint256) s_balances;\r\n    // owner -> spender -> max amount\r\n    mapping(address => mapping(address => uint256)) s_allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Spec: Get the account balance of another account with address `owner`\r\n    function balanceOf(address owner) public constant returns (uint256 balance) {\r\n        return s_balances[owner];\r\n    }\r\n\r\n    function internalTransfer(address from, address to, uint256 value) internal returns (bool success) {\r\n        if (value <= s_balances[from]) {\r\n            s_balances[from] -= value;\r\n            s_balances[to] += value;\r\n            Transfer(from, to, value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens to address `to`\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        address from = msg.sender;\r\n        return internalTransfer(from, to, value);\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens from address `from` to address `to`\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        if(value <= s_allowances[from][spender] && internalTransfer(from, to, value)) {\r\n            s_allowances[from][spender] -= value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Allow `spender` to withdraw from your account, multiple times, up\r\n    // to the `value` amount. If this function is called again it overwrites the\r\n    // current allowance with `value`.\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        address owner = msg.sender;\r\n        if (value != 0 && s_allowances[owner][spender] != 0) {\r\n            return false;\r\n        }\r\n        s_allowances[owner][spender] = value;\r\n        Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Spec: Returns the `amount` which `spender` is still allowed to withdraw\r\n    // from `owner`.\r\n    // What if the allowance is higher than the balance of the `owner`?\r\n    // Callers should be careful to use min(allowance, balanceOf) to make sure\r\n    // that the allowance is actually present in the account!\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\r\n        return s_allowances[owner][spender];\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // GasToken specifics\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    uint8 constant public decimals = 2;\r\n    string constant public name = \"Gastoken.io\";\r\n    string constant public symbol = \"GST2\";\r\n\r\n    // We build a queue of nonces at which child contracts are stored. s_head is\r\n    // the nonce at the head of the queue, s_tail is the nonce behind the tail\r\n    // of the queue. The queue grows at the head and shrinks from the tail.\r\n    // Note that when and only when a contract CREATEs another contract, the\r\n    // creating contract's nonce is incremented.\r\n    // The first child contract is created with nonce == 1, the second child\r\n    // contract is created with nonce == 2, and so on...\r\n    // For example, if there are child contracts at nonces [2,3,4],\r\n    // then s_head == 4 and s_tail == 1. If there are no child contracts,\r\n    // s_head == s_tail.\r\n    uint256 s_head;\r\n    uint256 s_tail;\r\n\r\n    // totalSupply gives  the number of tokens currently in existence\r\n    // Each token corresponds to one child contract that can be SELFDESTRUCTed\r\n    // for a gas refund.\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return s_head - s_tail;\r\n    }\r\n\r\n    // Creates a child contract that can only be destroyed by this contract.\r\n    function makeChild() internal returns (address addr) {\r\n        assembly {\r\n            // EVM assembler of runtime portion of child contract:\r\n            //     ;; Pseudocode: if (msg.sender != 0x0000000000b3f879cb30fe243b4dfee438691c04) { throw; }\r\n            //     ;;             suicide(msg.sender)\r\n            //     PUSH15 0xb3f879cb30fe243b4dfee438691c04 ;; hardcoded address of this contract\r\n            //     CALLER\r\n            //     XOR\r\n            //     PC\r\n            //     JUMPI\r\n            //     CALLER\r\n            //     SELFDESTRUCT\r\n            // Or in binary: 6eb3f879cb30fe243b4dfee438691c043318585733ff\r\n            // Since the binary is so short (22 bytes), we can get away\r\n            // with a very simple initcode:\r\n            //     PUSH22 0x6eb3f879cb30fe243b4dfee438691c043318585733ff\r\n            //     PUSH1 0\r\n            //     MSTORE ;; at this point, memory locations mem[10] through\r\n            //            ;; mem[31] contain the runtime portion of the child\r\n            //            ;; contract. all that's left to do is to RETURN this\r\n            //            ;; chunk of memory.\r\n            //     PUSH1 22 ;; length\r\n            //     PUSH1 10 ;; offset\r\n            //     RETURN\r\n            // Or in binary: 756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3\r\n            // Almost done! All we have to do is put this short (31 bytes) blob into\r\n            // memory and call CREATE with the appropriate offsets.\r\n            let solidity_free_mem_ptr := mload(0x40)\r\n            mstore(solidity_free_mem_ptr, 0x00756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3)\r\n            addr := create(0, add(solidity_free_mem_ptr, 1), 31)\r\n        }\r\n    }\r\n\r\n    // Mints `value` new sub-tokens (e.g. cents, pennies, ...) by creating `value`\r\n    // new child contracts. The minted tokens are owned by the caller of this\r\n    // function.\r\n    function mint(uint256 value) public {\r\n        for (uint256 i = 0; i < value; i++) {\r\n            makeChild();\r\n        }\r\n        s_head += value;\r\n        s_balances[msg.sender] += value;\r\n    }\r\n\r\n    // Destroys `value` child contracts and updates s_tail.\r\n    //\r\n    // This function is affected by an issue in solc: https://github.com/ethereum/solidity/issues/2999\r\n    // The `mk_contract_address(this, i).call();` doesn't forward all available gas, but only GAS - 25710.\r\n    // As a result, when this line is executed with e.g. 30000 gas, the callee will have less than 5000 gas\r\n    // available and its SELFDESTRUCT operation will fail leading to no gas refund occurring.\r\n    // The remaining ~29000 gas left after the call is enough to update s_tail and the caller's balance.\r\n    // Hence tokens will have been destroyed without a commensurate gas refund.\r\n    // Fortunately, there is a simple workaround:\r\n    // Whenever you call free, freeUpTo, freeFrom, or freeUpToFrom, ensure that you pass at least\r\n    // 25710 + `value` * (1148 + 5722 + 150) gas. (It won't all be used)\r\n    function destroyChildren(uint256 value) internal {\r\n        uint256 tail = s_tail;\r\n        // tail points to slot behind the last contract in the queue\r\n        for (uint256 i = tail + 1; i <= tail + value; i++) {\r\n            mk_contract_address(this, i).call();\r\n        }\r\n\r\n        s_tail = tail + value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens (e.g. cents, pennies, ...) belonging to the\r\n    // caller of this function by destroying `value` child contracts, which\r\n    // will trigger a partial gas refund.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function free(uint256 value) public returns (bool success) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens. Returns how many tokens were freed.\r\n    // Otherwise, identical to free.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeUpTo(uint256 value) public returns (uint256 freed) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens owned by address `from`. Requires that `msg.sender`\r\n    // has been approved by `from`.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeFrom(address from, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            return false;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens owned by address `from`. Returns how many tokens were freed.\r\n    // Otherwise, identical to `freeFrom`.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            value = spender_allowance;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return value;\r\n    }\r\n}", "contract": "GasToken2", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "fallback", "lineno": 3, "max_gas_used": 132, "min_gas_used": 37, "severity": "Medium", "sourceMap": "28:13827:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x1", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "value": "0x0"}]}}, {"address": 3145, "code": "s_balances[msg.sender] = from_balance - value", "contract": "GasToken2", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "freeUpTo(uint256)", "lineno": 278, "max_gas_used": 88855, "min_gas_used": 13630, "severity": "Low", "sourceMap": ":45", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa0712d680000000000000000000000000000000000000000000000000000000000000001", "input": "0xa0712d680000000000000000000000000000000000000000000000000000000000000001", "name": "mint(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [1], "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x6366b93601", "input": "0x6366b93601", "name": "freeUpTo(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [452312848583266388373324160190187140051835877600158453279131187530910662656], "value": "0x0"}]}}, {"address": 3617, "code": "s_balances[msg.sender] = from_balance - value", "contract": "GasToken2", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "free(uint256)", "lineno": 261, "max_gas_used": 88969, "min_gas_used": 13744, "severity": "Low", "sourceMap": ":45", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa0712d680000000000000000000000000000000000000000000000000000000000000002", "input": "0xa0712d680000000000000000000000000000000000000000000000000000000000000002", "name": "mint(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [2], "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xd8ccd0f30000000000000000000000000000000000000000000000000000000000000001", "input": "0xd8ccd0f30000000000000000000000000000000000000000000000000000000000000001", "name": "free(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [1], "value": "0x0"}]}}, {"address": 3848, "code": "mk_contract_address(this, i).call()", "contract": "GasToken2", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "freeUpTo(uint256)", "lineno": 242, "max_gas_used": 88855, "min_gas_used": 13630, "severity": "Medium", "sourceMap": ":35", "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa0712d680000000000000000000000000000000000000000000000000000000000000001", "input": "0xa0712d680000000000000000000000000000000000000000000000000000000000000001", "name": "mint(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [1], "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x6366b93601", "input": "0x6366b93601", "name": "freeUpTo(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [452312848583266388373324160190187140051835877600158453279131187530910662656], "value": "0x0"}]}}, {"address": 3848, "code": "mk_contract_address(this, i).call()", "contract": "GasToken2", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "free(uint256)", "lineno": 242, "max_gas_used": 88969, "min_gas_used": 13744, "severity": "Medium", "sourceMap": ":35", "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa0712d680000000000000000000000000000000000000000000000000000000000000002", "input": "0xa0712d680000000000000000000000000000000000000000000000000000000000000002", "name": "mint(uint256)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": [2], "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xd8ccd0f30000000000000000000000000000000000000000000000000000000000000001", "input": "0xd8ccd0f30000000000000000000000000000000000000000000000000000000000000001", "name": "free(uint256)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": [1], "value": "0x0"}]}}, {"address": 3874, "code": "s_tail = tail + value", "contract": "GasToken2", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "freeUpTo(uint256)", "lineno": 245, "max_gas_used": 88855, "min_gas_used": 13630, "severity": "Low", "sourceMap": ":21", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa0712d680000000000000000000000000000000000000000000000000000000000000001", "input": "0xa0712d680000000000000000000000000000000000000000000000000000000000000001", "name": "mint(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [1], "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x6366b93601", "input": "0x6366b93601", "name": "freeUpTo(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [452312848583266388373324160190187140051835877600158453279131187530910662656], "value": "0x0"}]}}, {"address": 3874, "code": "s_tail = tail + value", "contract": "GasToken2", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "0x0000000000b3f879cb30fe243b4dfee438691c04.sol", "function": "free(uint256)", "lineno": 245, "max_gas_used": 88969, "min_gas_used": 13744, "severity": "Low", "sourceMap": ":21", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b61126d8061001c6000396000f300606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d0578063079d229f14610169578063095ea7b3146101bc57806318160ddd1461021357806323b872dd14610239578063313ce567146102af5780635f2e2b45146102db5780636366b9361461033257806370a082311461036657806395d89b41146103b0578063a0712d6814610449578063a9059cbb14610469578063d8ccd0f3146104c0578063dd62ed3e146104f8575bfe5b34156100d857fe5b6100e0610561565b604051808060200182810382528381815181526020019150805190602001908083836000831461012f575b80518252602083111561012f5760208201915060208101905060208303925061010b565b505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157fe5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061059b565b6040518082815260200191505060405180910390f35b34156101c457fe5b6101f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610726565b604051808215151515815260200191505060405180910390f35b341561021b57fe5b6102236108bb565b6040518082815260200191505060405180910390f35b341561024157fe5b610295600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ca565b604051808215151515815260200191505060405180910390f35b34156102b757fe5b6102bf610a0e565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e357fe5b610318600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a13565b604051808215151515815260200191505060405180910390f35b341561033a57fe5b6103506004808035906020019091905050610ba9565b6040518082815260200191505060405180910390f35b341561036e57fe5b61039a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c54565b6040518082815260200191505060405180910390f35b34156103b857fe5b6103c0610c9e565b604051808060200182810382528381815181526020019150805190602001908083836000831461040f575b80518252602083111561040f576020820191506020810190506020830392506103eb565b505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157fe5b6104676004808035906020019091905050610cd8565b005b341561047157fe5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d60565b604051808215151515815260200191505060405180910390f35b34156104c857fe5b6104de6004808035906020019091905050610d7c565b604051808215151515815260200191505060405180910390f35b341561050057fe5b61054b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e2d565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f476173746f6b656e2e696f00000000000000000000000000000000000000000081525081565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250828611156105f6578295505b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610684578095505b61068d86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508594505b5050505092915050565b60006000339050600083141580156107bb57506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156107c957600091506108b4565b82600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5092915050565b60006003546002540390505b90565b60006000339050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111580156109645750610963858585610f29565b5b156109fc5782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060019150610a06565b60009150610a06565b5b509392505050565b600281565b60006000600060006000339350600060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925082861115610a735760009450610b9f565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080861115610b065760009450610b9f565b610b0f86610eb5565b858303600060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581038260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600194505b5050505092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610bfb578092505b610c0483610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508291505b50919050565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600481526020017f475354320000000000000000000000000000000000000000000000000000000081525081565b6000600090505b81811015610cfe57610cef61108c565b505b8080600101915050610cdf565b8160026000828254019250508190555081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5050565b60006000339050610d72818585610f29565b91505b5092915050565b60006000600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dd35760009150610e27565b610ddc83610eb5565b828103600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b50919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600060035491506001820190505b82820181111515610f1a57610eda30826110c3565b73ffffffffffffffffffffffffffffffffffffffff1660405180905060006040518083038160008661646e5a03f1915050505b8080600101915050610ec5565b8282016003819055505b505050565b6000600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151561107b5781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611085565b60009050611085565b5b9392505050565b60006040517e756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af38152601f600182016000f09150505b90565b60006000600060006000600068ffffffffffffffffff87111515156110e85760006000fd5b8660001080156110f85750608087105b1561110a57600194506001935061111c565b6111138761120c565b94506001850193505b8360146001010192506a01000000000000000000008873ffffffffffffffffffffffffffffffffffffffff16027e010000000000000000000000000000000000000000000000000000000000006014608001027f01000000000000000000000000000000000000000000000000000000000000008560c00102010191508660001080156111a95750608087105b156111c45769010000000000000000008702820191506111e7565b6901000000000000000000856080010282019150846009036101000a8702820191505b604051602081016040528281526001840181209150508095505b505050505092915050565b60006000600060009150600190505b8084101515611236576001820191506101008102905061121b565b8192505b50509190505600a165627a7a723058202b4d4eb52e656625d7dd39be89f3e4056ff41c5a8ac54fd45c639a77f3db2b3c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa0712d680000000000000000000000000000000000000000000000000000000000000002", "input": "0xa0712d680000000000000000000000000000000000000000000000000000000000000002", "name": "mint(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [2], "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xd8ccd0f30000000000000000000000000000000000000000000000000000000000000001", "input": "0xd8ccd0f30000000000000000000000000000000000000000000000000000000000000001", "name": "free(uint256)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": [1], "value": "0x0"}]}}], "success": true}
