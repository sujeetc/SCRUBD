{"error": null, "issues": [{"address": 11, "code": "function AgentContract(address tar_main,address tar1,address tar2,uint256 stake1,uint256 stake2) public {\r\n        __owner = msg.sender;\r\n        agent_to_piece_of_10000[tar1] = stake1;\r\n        agents.push(tar1);\r\n        agent_to_piece_of_10000[tar2] = stake2;\r\n        agents.push(tar2);\r\n        target = tar_main;\r\n    }", "contract": "AgentContract", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "constructor", "lineno": 11, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "238:325", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 115, "code": "assert(summa >= 10000)", "contract": "AgentContract", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "fallback", "lineno": 35, "max_gas_used": 189, "min_gas_used": 94, "severity": "Medium", "sourceMap": "1109:22", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "value": "0x0"}]}}, {"address": 1554, "code": "function returnBalanseToTarget() public payable {\r\n        assert (msg.sender == __owner);\r\n        if (!target.send(this.balance)){\r\n            __owner.send(this.balance);\r\n        }\r\n    }", "contract": "AgentContract", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "returnBalanseToTarget()", "lineno": 27, "max_gas_used": 1397, "min_gas_used": 972, "severity": "Medium", "sourceMap": "839:191", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x770b80b6", "input": "0x770b80b6", "name": "returnBalanseToTarget()", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": null, "value": "0x0"}]}}, {"address": 1782, "code": "__owner.send(this.balance)", "contract": "AgentContract", "description": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "returnBalanseToTarget()", "lineno": 30, "max_gas_used": 75118, "min_gas_used": 5661, "severity": "Low", "sourceMap": "985:26", "swc-id": "113", "title": "Multiple Calls in a Single Transaction", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x770b80b6", "input": "0x770b80b6", "name": "returnBalanseToTarget()", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 1782, "code": "__owner.send(this.balance)", "contract": "AgentContract", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "returnBalanseToTarget()", "lineno": 30, "max_gas_used": 75118, "min_gas_used": 5661, "severity": "Medium", "sourceMap": "985:26", "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x4008430800000000", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x770b80b6", "input": "0x770b80b6", "name": "returnBalanseToTarget()", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x770b80b6", "input": "0x770b80b6", "name": "returnBalanseToTarget()", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 1888, "code": "contract AgentContract {\r\n\r\n    address __owner;\r\n    address target;\r\n    mapping(address => uint256) agent_to_piece_of_10000;\r\n    address [] agents;\r\n    event SendEther(address addr, uint256 amount);\r\n\r\n    function AgentContract(address tar_main,address tar1,address tar2,uint256 stake1,uint256 stake2) public {\r\n        __owner = msg.sender;\r\n        agent_to_piece_of_10000[tar1] = stake1;\r\n        agents.push(tar1);\r\n        agent_to_piece_of_10000[tar2] = stake2;\r\n        agents.push(tar2);\r\n        target = tar_main;\r\n    }\r\n    function getTarget() public constant returns (address){\r\n        assert (msg.sender == __owner);\r\n        return target;\r\n    }\r\n    function listAgents() public constant returns (address []){\r\n        assert (msg.sender == __owner);\r\n        return agents;\r\n    }\r\n    function returnBalanseToTarget() public payable {\r\n        assert (msg.sender == __owner);\r\n        if (!target.send(this.balance)){\r\n            __owner.send(this.balance);\r\n        }\r\n    }\r\n    function() payable public {\r\n        uint256 summa = msg.value;\r\n        assert(summa >= 10000);\r\n        uint256 summa_rest = msg.value;\r\n        for (uint i=0; i<agents.length; i++){\r\n            uint256 piece_to_send = agent_to_piece_of_10000[agents[i]];\r\n            uint256 value_to_send = (summa * piece_to_send) / 10000;\r\n            summa_rest = summa_rest - value_to_send;\r\n            if (!agents[i].send(value_to_send)){\r\n                summa_rest = summa_rest + value_to_send;\r\n            }\r\n            else{\r\n              SendEther(agents[i], value_to_send);\r\n            }\r\n        }\r\n        if (!target.send(summa_rest)){\r\n            if (!msg.sender.send(summa_rest)){\r\n                __owner.send(summa_rest);\r\n                SendEther(__owner, summa_rest);\r\n            }\r\n            else{\r\n              SendEther(msg.sender, summa_rest);\r\n            }\r\n        }\r\n        else{\r\n          SendEther(target, summa_rest);\r\n        }\r\n    }\r\n}", "contract": "AgentContract", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "listAgents()", "lineno": 3, "max_gas_used": 1789, "min_gas_used": 1081, "severity": "Medium", "sourceMap": ":::o", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xd6cd4a02", "input": "0xd6cd4a02", "name": "listAgents()", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": null, "value": "0x0"}]}}, {"address": 2120, "code": "function getTarget() public constant returns (address){\r\n        assert (msg.sender == __owner);\r\n        return target;\r\n    }", "contract": "AgentContract", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x82a9187ad010f85678b6f96b3d6f3a579ab640fb.sol", "function": "getTarget()", "lineno": 19, "max_gas_used": 1463, "min_gas_used": 1038, "severity": "Medium", "sourceMap": "569:127:0", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b60405160a080610b3c833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600380548060010182816100e6919061022a565b916000526020600020900160005b86909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003805480600101828161018e919061022a565b916000526020600020900160005b85909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505061027b565b815481835581811511610251578183600052602060002091820191016102509190610256565b5b505050565b61027891905b8082111561027457600081600090555060010161025c565b5090565b90565b6108b28061028a6000396000f30060606040523615610055576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063770b80b6146104e9578063d6cd4a02146104f3578063f00e6a2a14610568575b6104e75b60006000600060006000349450612710851015151561007457fe5b349350600092505b600380549050831015610255576002600060038581548110151561009c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061271082860281151561011557fe5b049050808403935060038381548110151561012c57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f1935050505015156101a0578084019350610247565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec6003848154811015156101d057fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b828060010193505061007c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f193505050501515610451573373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f1935050505015156103e057600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051809050600060405180830381858888f19350505050507f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161044c565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b6104df565b7f5cf9c3dc0403b88750b3ce5ea792cdca787ff26128f6d508b99b2d3853ae13ec600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b5050505050565b005b6104f16105ba565b005b34156104fb57fe5b610503610700565b6040518080602001828103825283818151815260200191508051906020019060200280838360008314610555575b80518252602083111561055557602082019150602081019050602083039250610531565b5050509050019250505060405180910390f35b341561057057fe5b6105786107ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561061357fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f1935050505015156106fd57600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051809050600060405180830381858888f19350505050505b5b565b610708610872565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076157fe5b60038054806020026020016040519081016040528092919081815260200182805480156107e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610799575b505050505090505b90565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561084957fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b6020604051908101604052806000815250905600a165627a7a72305820391a53ef19d858bf952c4ceac4e4a99b193d58c924800fb65fc24250f27f58320029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xf00e6a2a", "input": "0xf00e6a2a", "name": "getTarget()", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": null, "value": "0x0"}]}}], "success": true}
