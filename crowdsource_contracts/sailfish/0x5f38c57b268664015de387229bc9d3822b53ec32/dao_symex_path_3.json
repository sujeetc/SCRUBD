{
    "file": "0x5f38c57b268664015de387229bc9d3822b53ec32.sol",
    "global_structs": [
        {
            "name": "Purchase",
            "fields": {
                "current": [
                    "integer"
                ],
                "count": [
                    "integer"
                ],
                "user": [
                    "integer"
                ],
                "randomness": [
                    "integer"
                ],
                "commit": [
                    "integer"
                ]
            }
        },
        {
            "name": "Batch",
            "fields": {
                "userID": [
                    "integer"
                ],
                "size": [
                    "integer"
                ]
            }
        },
        {
            "name": "StackDepthLimit",
            "fields": {
                "oldProtos": [
                    "array",
                    "integer"
                ],
                "purities": [
                    "array",
                    "integer"
                ],
                "qualities": [
                    "array",
                    "integer"
                ],
                "protos": [
                    "array",
                    "integer"
                ]
            }
        },
        {
            "name": "struct_block",
            "fields": {
                "coinbase": [
                    "integer"
                ],
                "difficulty": [
                    "integer"
                ],
                "gaslimit": [
                    "integer"
                ],
                "number": [
                    "integer"
                ],
                "timestamp": [
                    "integer"
                ]
            }
        },
        {
            "name": "struct_msg",
            "fields": {
                "data": [
                    "integer"
                ],
                "sender": [
                    "integer"
                ],
                "sig": [
                    "integer"
                ],
                "value": [
                    "integer"
                ]
            }
        },
        {
            "name": "struct_tx",
            "fields": {
                "gasprice": [
                    "integer"
                ],
                "origin": [
                    "integer"
                ]
            }
        },
        {
            "name": "struct_this",
            "fields": {
                "balance": [
                    "integer"
                ],
                "address": [
                    "integer"
                ]
            }
        }
    ],
    "global_variables": [
        {
            "name": "block",
            "type": [
                "struct_block"
            ],
            "init": []
        },
        {
            "name": "msg",
            "type": [
                "struct_msg"
            ],
            "init": [
                "0x195"
            ]
        },
        {
            "name": "now",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "tx",
            "type": [
                "struct_tx"
            ],
            "init": []
        },
        {
            "name": "this",
            "type": [
                "struct_this"
            ],
            "init": [
                "0x196"
            ]
        },
        {
            "name": "msg_sender",
            "type": [
                "integer"
            ],
            "init": [
                "0x197"
            ]
        },
        {
            "name": "addmod",
            "type": [
                "function3"
            ],
            "init": []
        },
        {
            "name": "mulmod",
            "type": [
                "function3"
            ],
            "init": []
        },
        {
            "name": "keccak",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "sha256",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "sha3",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "ripemd160",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "ecrecover",
            "type": [
                "function4"
            ],
            "init": []
        },
        {
            "name": "blockhash",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "canMigrate",
            "type": [
                "array",
                "integer",
                "boolean"
            ],
            "init": []
        },
        {
            "name": "v1Migrated",
            "type": [
                "array",
                "integer",
                [
                    "array",
                    "integer",
                    "boolean"
                ]
            ],
            "init": []
        },
        {
            "name": "migration",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "ebs",
            "type": [
                "array",
                "integer"
            ],
            "init": [
                "0x7"
            ]
        },
        {
            "name": "limit",
            "type": [
                "integer"
            ],
            "init": [
                "0x6"
            ]
        },
        {
            "name": "cards",
            "type": [
                "integer"
            ],
            "init": [
                "0x5"
            ]
        },
        {
            "name": "IPackFour",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "BaseMigration",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "IERC165",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "IERC721",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "ICards",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "v1Migration",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "CanBeV1Migrated",
            "type": [
                "integer"
            ],
            "init": []
        }
    ],
    "global_blocks": [
        {
            "scope": "__GLOBAL__",
            "addr": "0x4",
            "instructions": [
                "CLR_0 = canMigrate[U]",
                "REF_33 = CLR_0",
                "canMigrate[0] = true",
                "canMigrate[1] = true",
                "canMigrate[2] = true",
                "canMigrate[3] = true",
                "canMigrate[4] = true",
                "canMigrate[5] = true",
                "canMigrate[6] = true",
                "canMigrate[7] = true",
                "canMigrate[8] = true",
                "canMigrate[9] = true"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x5",
            "instructions": [
                "cards = U"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x6",
            "instructions": [
                "limit = U"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x7",
            "instructions": [
                "ebs = 400",
                "ebs = 413",
                "ebs = 414",
                "ebs = 421",
                "ebs = 427",
                "ebs = 428",
                "ebs = 389",
                "ebs = 415",
                "ebs = 416",
                "ebs = 422",
                "ebs = 424",
                "ebs = 425",
                "ebs = 426",
                "ebs = 382",
                "ebs = 420",
                "ebs = 417"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0xf",
            "instructions": [
                "msg.sender = 0x6"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x10",
            "instructions": [
                "this.address = 0x5"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x11",
            "instructions": [
                "msg_sender = 0x4"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0xd2",
            "instructions": [
                "msg.sender = 0x6"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0xd3",
            "instructions": [
                "this.address = 0x5"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0xd4",
            "instructions": [
                "msg_sender = 0x4"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x195",
            "instructions": [
                "msg.sender = 0x6"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x196",
            "instructions": [
                "this.address = 0x5"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0x197",
            "instructions": [
                "msg_sender = 0x4"
            ]
        }
    ],
    "range_variables": [
        {
            "name": "v1Migrated",
            "addrs": [
                "0x2",
                "0xa",
                "0xd"
            ]
        }
    ],
    "range_blocks": [
        {
            "scope": "__RANGE__",
            "addr": "0x1",
            "instructions": [
                "NOP"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x2",
            "instructions": [
                "NOP"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0xa",
            "instructions": [
                "CLR_1 = canMigrate[U]",
                "REF_36 = CLR_1",
                "RTMP_86 = REF_36 == true",
                "CONDITION RTMP_86 0xb 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0xb",
            "instructions": [
                "CLR_2 = v1Migrated[U]",
                "REF_37 = CLR_2",
                "CLR_3 = REF_37[U]",
                "REF_38 = CLR_3",
                "RTMP_87 = ! REF_38",
                "CONDITION RTMP_87 0x9 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x9",
            "instructions": [
                "CLR_4 = v1Migrated[U]",
                "REF_34 = CLR_4",
                "CLR_5 = REF_34[U]",
                "REF_35 = CLR_5",
                "REF_34[0] = true",
                "REF_34[1] = true",
                "REF_34[2] = true",
                "REF_34[3] = true",
                "REF_34[4] = true",
                "REF_34[5] = true",
                "REF_34[6] = true",
                "REF_34[7] = true",
                "REF_34[8] = true",
                "REF_34[9] = true"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0xd",
            "instructions": [
                "CLR_6 = canMigrate[U]",
                "REF_36 = CLR_6",
                "RTMP_86 = REF_36 == true",
                "CONDITION RTMP_86 0xe 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0xe",
            "instructions": [
                "CLR_7 = v1Migrated[U]",
                "REF_37 = CLR_7",
                "CLR_8 = REF_37[U]",
                "REF_38 = CLR_8",
                "RTMP_87 = ! REF_38",
                "CONDITION RTMP_87 0xc 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0xc",
            "instructions": [
                "CLR_9 = v1Migrated[U]",
                "REF_34 = CLR_9",
                "CLR_10 = REF_34[U]",
                "REF_35 = CLR_10",
                "REF_34[0] = true",
                "REF_34[1] = true",
                "REF_34[2] = true",
                "REF_34[3] = true",
                "REF_34[4] = true",
                "REF_34[5] = true",
                "REF_34[6] = true",
                "REF_34[7] = true",
                "REF_34[8] = true",
                "REF_34[9] = true"
            ]
        }
    ],
    "root_addr": "0x198",
    "dest_addrs": [
        "0x1e2"
    ],
    "normal_blocks": [
        {
            "scope": "migrate_v1",
            "addr": "0x198",
            "instructions": [
                "NOP",
                "loopStart = NEW_VAL integer",
                "remaining = NEW_VAL integer",
                "x = NEW_VAL integer",
                "i = NEW_VAL integer",
                "proto = NEW_VAL integer",
                "proto = NEW_VAL integer",
                "purity = NEW_VAL integer",
                "pack = NEW_VAL integer",
                "i = NEW_VAL integer",
                "sdl = NEW_VAL StackDepthLimit",
                "startID = NEW_VAL integer",
                "id = NEW_VAL integer",
                "loopEnd = NEW_VAL integer",
                "JUMP 0x199"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x19a",
            "instructions": [
                "NOP",
                "NOP",
                "NOP",
                "NOP",
                "ATTACK",
                "TUPLE_2 = NEW_COL unknown",
                "JUMP 0x19b"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x199",
            "instructions": [
                "TMP_43 = NEW_VAL unknown",
                "CLR_11 = canMigrate[TMP_43]",
                "REF_9 = CLR_11",
                "CONDITION REF_9 0x199_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x199_r0",
            "instructions": [
                "JUMP 0x19c"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x19c",
            "instructions": [
                "TMP_45 = NEW_VAL unknown",
                "CLR_12 = v1Migrated[TMP_45]",
                "REF_10 = CLR_12",
                "CLR_13 = REF_10[id]",
                "REF_11 = CLR_13",
                "TMP_46 = ! REF_11",
                "CONDITION TMP_46 0x19c_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x19c_r0",
            "instructions": [
                "JUMP 0x19a"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x19b",
            "instructions": [
                "NOP",
                "loopStart = NEW_VAL integer",
                "remaining = NEW_VAL integer",
                "x = NEW_VAL integer",
                "i = NEW_VAL integer",
                "proto = NEW_VAL integer",
                "proto = NEW_VAL integer",
                "purity = NEW_VAL integer",
                "pack = NEW_VAL integer",
                "i = NEW_VAL integer",
                "sdl = NEW_VAL StackDepthLimit",
                "startID = NEW_VAL integer",
                "id = NEW_VAL integer",
                "loopEnd = NEW_VAL integer",
                "JUMP 0x19d"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x19d",
            "instructions": [
                "TMP_43 = NEW_VAL unknown",
                "CLR_14 = canMigrate[TMP_43]",
                "REF_9 = CLR_14",
                "CONDITION REF_9 0x19d_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x19d_r0",
            "instructions": [
                "JUMP 0x19e"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x19e",
            "instructions": [
                "TMP_45 = NEW_VAL unknown",
                "CLR_15 = v1Migrated[TMP_45]",
                "REF_10 = CLR_15",
                "CLR_16 = REF_10[id]",
                "REF_11 = CLR_16",
                "TMP_46 = ! REF_11",
                "CONDITION TMP_46 0x19e_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x19e_r0",
            "instructions": [
                "JUMP 0x19f"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x19f",
            "instructions": [
                "NOP",
                "NOP",
                "NOP",
                "NOP",
                "TUPLE_2 = NEW_COL unknown",
                "JUMP 0x1a0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a0",
            "instructions": [
                "current = NEW_VAL unknown",
                "count = NEW_VAL unknown",
                "user = NEW_VAL unknown",
                "randomness = NEW_VAL unknown",
                "TMP_48 = randomness != 0",
                "CONDITION TMP_48 0x1a0_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a0_r0",
            "instructions": [
                "JUMP 0x1a1"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a1",
            "instructions": [
                "TMP_50 = count - current",
                "TMP_51 = TMP_50 * 5",
                "remaining = TMP_51",
                "TMP_52 = remaining > 0",
                "CONDITION TMP_52 0x1a1_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a1_r0",
            "instructions": [
                "JUMP 0x1a2"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a2",
            "instructions": [
                "TMP_54 = limit >= remaining",
                "CONDITION TMP_54 0x1a2_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a2_r0",
            "instructions": [
                "JUMP 0x1a3"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a3",
            "instructions": [
                "NOP",
                "CLR_17 = sdl.protos",
                "REF_13 = CLR_17",
                "TMP_57 = NEW_COL integer",
                "sdl.protos = TMP_57",
                "CLR_18 = sdl.qualities",
                "REF_14 = CLR_18",
                "TMP_59 = NEW_COL integer",
                "sdl.qualities = TMP_59",
                "CLR_19 = sdl.oldProtos",
                "REF_15 = CLR_19",
                "CLR_20 = sdl.purities",
                "REF_16 = CLR_20",
                "TUPLE_3 = NEW_COL unknown",
                "JUMP 0x1a4"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a4",
            "instructions": [
                "NCV_0 = NEW_VAL unknown",
                "sdl.oldProtos = NCV_0",
                "NCV_1 = NEW_VAL unknown",
                "sdl.purities = NCV_1",
                "TMP_60 = current * 5",
                "loopStart = TMP_60",
                "i = 0",
                "JUMP 0x1a5"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a5",
            "instructions": [
                "NOP",
                "TMP_61 = i < remaining",
                "CONDITION TMP_61 0x1a7 0x1a6"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a6",
            "instructions": [
                "NOP",
                "JUMP 0x1a8"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a8",
            "instructions": [
                "CLR_21 = sdl.protos",
                "REF_27 = CLR_21",
                "CLR_22 = sdl.qualities",
                "REF_28 = CLR_22",
                "TMP_66 = NEW_VAL integer",
                "JUMP 0x1a9"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a9",
            "instructions": [
                "startID = TMP_66",
                "TMP_67 = NEW_VAL unknown",
                "CLR_23 = v1Migrated[TMP_67]",
                "REF_29 = CLR_23",
                "CLR_24 = REF_29[id]",
                "REF_30 = CLR_24",
                "REF_29[id] = true",
                "TMP_68 = loopStart + remaining",
                "loopEnd = TMP_68",
                "TMP_69 = NEW_VAL unknown",
                "NOP",
                "JUMP 0x1aa"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ab",
            "instructions": [
                "REF_22[i] = TMP_64",
                "TMP_65 = i",
                "i = i + 1",
                "JUMP 0x1a5"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ac",
            "instructions": [
                "NOP",
                "JUMP 0x1ad"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ad",
            "instructions": [
                "TMP_22 = proto >= 1",
                "TMP_23 = proto <= 377",
                "TMP_24 = TMP_22 && TMP_23",
                "CONDITION TMP_24 0x1ae 0x1af"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ae",
            "instructions": [
                "TMP_78 = proto",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1af",
            "instructions": [
                "NOP",
                "JUMP 0x1b1"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b1",
            "instructions": [
                "TMP_25 = proto == 380",
                "CONDITION TMP_25 0x1b2 0x1b3"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b2",
            "instructions": [
                "TMP_78 = 400",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b3",
            "instructions": [
                "NOP",
                "JUMP 0x1b4"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b4",
            "instructions": [
                "TMP_26 = proto == 381",
                "CONDITION TMP_26 0x1b5 0x1b6"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b5",
            "instructions": [
                "TMP_78 = 401",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b6",
            "instructions": [
                "NOP",
                "JUMP 0x1b7"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b7",
            "instructions": [
                "TMP_27 = proto == 394",
                "CONDITION TMP_27 0x1b8 0x1b9"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b8",
            "instructions": [
                "TMP_78 = 402",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b9",
            "instructions": [
                "NOP",
                "JUMP 0x1ba"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1bb",
            "instructions": [
                "found = NEW_VAL unknown",
                "index = NEW_VAL unknown",
                "CONDITION found 0x1bc 0x1bd"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1bc",
            "instructions": [
                "TMP_28 = 380 + index",
                "TMP_29 = NEW_VAL unknown",
                "TMP_78 = TMP_29",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1bd",
            "instructions": [
                "NOP",
                "JUMP 0x1be"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1be",
            "instructions": [
                "TMP_30 = proto == 378",
                "CONDITION TMP_30 0x1bf 0x1c0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1bf",
            "instructions": [
                "TMP_78 = 65000",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c0",
            "instructions": [
                "NOP",
                "JUMP 0x1c1"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c1",
            "instructions": [
                "TMP_31 = proto == 379",
                "CONDITION TMP_31 0x1c2 0x1c3"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c2",
            "instructions": [
                "TMP_78 = 65001",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c3",
            "instructions": [
                "NOP",
                "JUMP 0x1c4"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c4",
            "instructions": [
                "TMP_32 = proto == 383",
                "CONDITION TMP_32 0x1c5 0x1c6"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c5",
            "instructions": [
                "TMP_78 = 65002",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c6",
            "instructions": [
                "NOP",
                "JUMP 0x1c7"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c7",
            "instructions": [
                "TMP_33 = proto == 384",
                "CONDITION TMP_33 0x1c8 0x1c9"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c8",
            "instructions": [
                "TMP_78 = 65003",
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1c9",
            "instructions": [
                "NOP",
                "JUMP 0x1ca"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ca",
            "instructions": [
                "CONDITION false 0x1ca_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ca_r0",
            "instructions": [
                "JUMP 0x1b0"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1cb",
            "instructions": [
                "NOP",
                "JUMP 0x1cc"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1cc",
            "instructions": [
                "i = 0",
                "JUMP 0x1cd"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1cd",
            "instructions": [
                "NOP",
                "REF_2 = LENGTH ebs",
                "TMP_35 = i < REF_2",
                "CONDITION TMP_35 0x1ce 0x1cf"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ce",
            "instructions": [
                "CLR_25 = ebs[i]",
                "REF_3 = CLR_25",
                "TMP_36 = REF_3 == proto",
                "CONDITION TMP_36 0x1d0 0x1d1"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1cf",
            "instructions": [
                "NOP",
                "JUMP 0x1d2"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d2",
            "instructions": [
                "TMP_79 = false",
                "JUMP 0x1d3"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d0",
            "instructions": [
                "TMP_79 = true",
                "JUMP 0x1d3"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d1",
            "instructions": [
                "NOP",
                "JUMP 0x1d4"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d4",
            "instructions": [
                "TMP_37 = i",
                "i = i + 1",
                "JUMP 0x1cd"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d3",
            "instructions": [
                "TMP_79 = i",
                "JUMP 0x1d5"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1ba",
            "instructions": [
                "NOP",
                "NOP",
                "proto = proto",
                "JUMP 0x1cb"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d5",
            "instructions": [
                "TUPLE_1 = TMP_79",
                "JUMP 0x1bb"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1a7",
            "instructions": [
                "TMP_62 = loopStart + i",
                "x = TMP_62",
                "CLR_26 = sdl.protos",
                "REF_18 = CLR_26",
                "CLR_27 = REF_18[i]",
                "REF_19 = CLR_27",
                "CLR_28 = sdl.oldProtos",
                "REF_20 = CLR_28",
                "CLR_29 = REF_20[x]",
                "REF_21 = CLR_29",
                "proto = REF_21",
                "JUMP 0x1ac"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1b0",
            "instructions": [
                "TMP_63 = TMP_78",
                "JUMP 0x1d6"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d7",
            "instructions": [
                "NOP",
                "JUMP 0x1d8"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d8",
            "instructions": [
                "TMP_19 = purity \/ 1000",
                "TMP_20 = 4 - TMP_19",
                "TMP_21 = NEW_VAL unknown",
                "TMP_77 = TMP_21",
                "JUMP 0x1d9"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d6",
            "instructions": [
                "REF_18[i] = TMP_63",
                "CLR_30 = sdl.qualities",
                "REF_22 = CLR_30",
                "CLR_31 = REF_22[i]",
                "REF_23 = CLR_31",
                "CLR_32 = sdl.purities",
                "REF_24 = CLR_32",
                "CLR_33 = REF_24[x]",
                "REF_25 = CLR_33",
                "purity = REF_25",
                "JUMP 0x1d7"
            ]
        },
        {
            "scope": "migrate_v2",
            "addr": "0x1d9",
            "instructions": [
                "TMP_64 = TMP_77",
                "JUMP 0x1ab"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1aa",
            "instructions": [
                "current = NEW_VAL unknown",
                "count = NEW_VAL unknown",
                "user = NEW_VAL unknown",
                "randomness = NEW_VAL unknown",
                "TMP_48 = randomness != 0",
                "CONDITION TMP_48 0x1aa_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1aa_r0",
            "instructions": [
                "JUMP 0x1da"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1da",
            "instructions": [
                "TMP_50 = count - current",
                "TMP_51 = TMP_50 * 5",
                "remaining = TMP_51",
                "TMP_52 = remaining > 0",
                "CONDITION TMP_52 0x1da_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1da_r0",
            "instructions": [
                "JUMP 0x1db"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1db",
            "instructions": [
                "TMP_54 = limit >= remaining",
                "CONDITION TMP_54 0x1db_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1db_r0",
            "instructions": [
                "JUMP 0x1dc"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1dc",
            "instructions": [
                "NOP",
                "CLR_34 = sdl.protos",
                "REF_13 = CLR_34",
                "TMP_57 = NEW_COL integer",
                "sdl.protos = TMP_57",
                "CLR_35 = sdl.qualities",
                "REF_14 = CLR_35",
                "TMP_59 = NEW_COL integer",
                "sdl.qualities = TMP_59",
                "CLR_36 = sdl.oldProtos",
                "REF_15 = CLR_36",
                "CLR_37 = sdl.purities",
                "REF_16 = CLR_37",
                "TUPLE_3 = NEW_COL unknown",
                "JUMP 0x1dd"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1dd",
            "instructions": [
                "NCV_2 = NEW_VAL unknown",
                "sdl.oldProtos = NCV_2",
                "NCV_3 = NEW_VAL unknown",
                "sdl.purities = NCV_3",
                "TMP_60 = current * 5",
                "loopStart = TMP_60",
                "i = 0",
                "JUMP 0x1de"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1de",
            "instructions": [
                "NOP",
                "TMP_61 = i < remaining",
                "CONDITION TMP_61 0x1e0 0x1df"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1df",
            "instructions": [
                "NOP",
                "JUMP 0x1e1"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e1",
            "instructions": [
                "CLR_38 = sdl.protos",
                "REF_27 = CLR_38",
                "CLR_39 = sdl.qualities",
                "REF_28 = CLR_39",
                "TMP_66 = NEW_VAL integer",
                "JUMP 0x1e2"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e2",
            "instructions": [
                "startID = TMP_66",
                "TMP_67 = NEW_VAL unknown",
                "CLR_40 = v1Migrated[TMP_67]",
                "REF_29 = CLR_40",
                "CLR_41 = REF_29[id]",
                "REF_30 = CLR_41",
                "REF_29[id] = true",
                "TMP_68 = loopStart + remaining",
                "loopEnd = TMP_68",
                "TMP_69 = NEW_VAL unknown",
                "NOP"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e3",
            "instructions": [
                "REF_22[i] = TMP_64",
                "TMP_65 = i",
                "i = i + 1",
                "JUMP 0x1de"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e4",
            "instructions": [
                "NOP",
                "JUMP 0x1e5"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e5",
            "instructions": [
                "TMP_22 = proto >= 1",
                "TMP_23 = proto <= 377",
                "TMP_24 = TMP_22 && TMP_23",
                "CONDITION TMP_24 0x1e6 0x1e7"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e6",
            "instructions": [
                "TMP_78 = proto",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e7",
            "instructions": [
                "NOP",
                "JUMP 0x1e9"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e9",
            "instructions": [
                "TMP_25 = proto == 380",
                "CONDITION TMP_25 0x1ea 0x1eb"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1ea",
            "instructions": [
                "TMP_78 = 400",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1eb",
            "instructions": [
                "NOP",
                "JUMP 0x1ec"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1ec",
            "instructions": [
                "TMP_26 = proto == 381",
                "CONDITION TMP_26 0x1ed 0x1ee"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1ed",
            "instructions": [
                "TMP_78 = 401",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1ee",
            "instructions": [
                "NOP",
                "JUMP 0x1ef"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1ef",
            "instructions": [
                "TMP_27 = proto == 394",
                "CONDITION TMP_27 0x1f0 0x1f1"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f0",
            "instructions": [
                "TMP_78 = 402",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f1",
            "instructions": [
                "NOP",
                "JUMP 0x1f2"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f3",
            "instructions": [
                "found = NEW_VAL unknown",
                "index = NEW_VAL unknown",
                "CONDITION found 0x1f4 0x1f5"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f4",
            "instructions": [
                "TMP_28 = 380 + index",
                "TMP_29 = NEW_VAL unknown",
                "TMP_78 = TMP_29",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f5",
            "instructions": [
                "NOP",
                "JUMP 0x1f6"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f6",
            "instructions": [
                "TMP_30 = proto == 378",
                "CONDITION TMP_30 0x1f7 0x1f8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f7",
            "instructions": [
                "TMP_78 = 65000",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f8",
            "instructions": [
                "NOP",
                "JUMP 0x1f9"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f9",
            "instructions": [
                "TMP_31 = proto == 379",
                "CONDITION TMP_31 0x1fa 0x1fb"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1fa",
            "instructions": [
                "TMP_78 = 65001",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1fb",
            "instructions": [
                "NOP",
                "JUMP 0x1fc"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1fc",
            "instructions": [
                "TMP_32 = proto == 383",
                "CONDITION TMP_32 0x1fd 0x1fe"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1fd",
            "instructions": [
                "TMP_78 = 65002",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1fe",
            "instructions": [
                "NOP",
                "JUMP 0x1ff"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1ff",
            "instructions": [
                "TMP_33 = proto == 384",
                "CONDITION TMP_33 0x200 0x201"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x200",
            "instructions": [
                "TMP_78 = 65003",
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x201",
            "instructions": [
                "NOP",
                "JUMP 0x202"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x202",
            "instructions": [
                "CONDITION false 0x202_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x202_r0",
            "instructions": [
                "JUMP 0x1e8"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x203",
            "instructions": [
                "NOP",
                "JUMP 0x204"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x204",
            "instructions": [
                "i = 0",
                "JUMP 0x205"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x205",
            "instructions": [
                "NOP",
                "REF_2 = LENGTH ebs",
                "TMP_35 = i < REF_2",
                "CONDITION TMP_35 0x206 0x207"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x206",
            "instructions": [
                "CLR_42 = ebs[i]",
                "REF_3 = CLR_42",
                "TMP_36 = REF_3 == proto",
                "CONDITION TMP_36 0x208 0x209"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x207",
            "instructions": [
                "NOP",
                "JUMP 0x20a"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x20a",
            "instructions": [
                "TMP_79 = false",
                "JUMP 0x20b"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x208",
            "instructions": [
                "TMP_79 = true",
                "JUMP 0x20b"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x209",
            "instructions": [
                "NOP",
                "JUMP 0x20c"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x20c",
            "instructions": [
                "TMP_37 = i",
                "i = i + 1",
                "JUMP 0x205"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x20b",
            "instructions": [
                "TMP_79 = i",
                "JUMP 0x20d"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1f2",
            "instructions": [
                "NOP",
                "NOP",
                "proto = proto",
                "JUMP 0x203"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x20d",
            "instructions": [
                "TUPLE_1 = TMP_79",
                "JUMP 0x1f3"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e0",
            "instructions": [
                "TMP_62 = loopStart + i",
                "x = TMP_62",
                "CLR_43 = sdl.protos",
                "REF_18 = CLR_43",
                "CLR_44 = REF_18[i]",
                "REF_19 = CLR_44",
                "CLR_45 = sdl.oldProtos",
                "REF_20 = CLR_45",
                "CLR_46 = REF_20[x]",
                "REF_21 = CLR_46",
                "proto = REF_21",
                "JUMP 0x1e4"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x1e8",
            "instructions": [
                "TMP_63 = TMP_78",
                "JUMP 0x20e"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x20f",
            "instructions": [
                "NOP",
                "JUMP 0x210"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x210",
            "instructions": [
                "TMP_19 = purity \/ 1000",
                "TMP_20 = 4 - TMP_19",
                "TMP_21 = NEW_VAL unknown",
                "TMP_77 = TMP_21",
                "JUMP 0x211"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x20e",
            "instructions": [
                "REF_18[i] = TMP_63",
                "CLR_47 = sdl.qualities",
                "REF_22 = CLR_47",
                "CLR_48 = REF_22[i]",
                "REF_23 = CLR_48",
                "CLR_49 = sdl.purities",
                "REF_24 = CLR_49",
                "CLR_50 = REF_24[x]",
                "REF_25 = CLR_50",
                "purity = REF_25",
                "JUMP 0x20f"
            ]
        },
        {
            "scope": "migrate_v1",
            "addr": "0x211",
            "instructions": [
                "TMP_64 = TMP_77",
                "JUMP 0x1e3"
            ]
        },
        {
            "scope": "trap",
            "addr": "0x212",
            "instructions": [
                "NOP"
            ]
        },
        {
            "scope": "RequireTrap",
            "addr": "0xRequireTrap",
            "instructions": [
                "NOP"
            ]
        }
    ]
}