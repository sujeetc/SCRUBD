{
    "file_name": "dao_symex_path_3.json",
    "from_function": "withdrawal",
    "to_function": "fallback",
    "bug_type": "dao",
    "src_node": "\"BlockID: 81\nCall context: \nNone\nENTRY_POINT None\"",
    "dest_node": [
        "\"BlockID: 96\nCall context: \nNone\nREF_2 -> BALANCE this\nTMP_10 = SEND dest:adr value:REF_2\""
    ],
    "executable_instructions": 41,
    "state_variable": "adr",
    "error": "",
    "result": "UNSAT",
    "execution_details": "# using file \/ethereum-security\/empirical-study\/data\/extracted_solc_codes\/crowdsource_contracts\/sailfish\/0x42db5bfe8828f12f164586af8a992b3a7b038164\/dao_symex_path_3.json\n# attack type: range\n# solver type: z3\n# block execution bound: 10\n# verbose: #f\n# debug: #f\n# building structs\n# building global scope\n  > loading global blocks\n    > adding global block: 0x8@__GLOBAL__\n    > adding global block: 0x9@__GLOBAL__\n    > adding global block: 0xa@__GLOBAL__\n    > adding global block: 0xc@__GLOBAL__\n    > adding global block: 0xd@__GLOBAL__\n    > adding global block: 0xe@__GLOBAL__\n    > adding global block: 0x1b@__GLOBAL__\n    > adding global block: 0x1c@__GLOBAL__\n    > adding global block: 0x1d@__GLOBAL__\n    > adding global block: 0x29@__GLOBAL__\n    > adding global block: 0x2a@__GLOBAL__\n    > adding global block: 0x2b@__GLOBAL__\n  > start adding and initializing global variables\n    > declaring global variable: block\n    > initializing global variable: block\n    > declaring global variable: msg\n    > initializing global variable: msg\n\n    > declaring global variable: now\n    > initializing global variable: now\n    > declaring global variable: tx\n    > initializing global variable: tx\n    > declaring global variable: this\n    > initializing global variable: this\n\n    > declaring global variable: msg_sender\n    > initializing global variable: msg_sender\n\n    > declaring global variable: addmod\n    > initializing global variable: addmod\n    > declaring global variable: mulmod\n    > initializing global variable: mulmod\n    > declaring global variable: keccak\n    > initializing global variable: keccak\n    > declaring global variable: sha256\n    > initializing global variable: sha256\n    > declaring global variable: sha3\n    > initializing global variable: sha3\n    > declaring global variable: ripemd160\n    > initializing global variable: ripemd160\n    > declaring global variable: ecrecover\n    > initializing global variable: ecrecover\n    > declaring global variable: blockhash\n    > initializing global variable: blockhash\n    > declaring global variable: adr\n    > initializing global variable: adr\n    > declaring global variable: emails\n    > initializing global variable: emails\n\n    > declaring global variable: Limit\n    > initializing global variable: Limit\n\n    > declaring global variable: Owner\n    > initializing global variable: Owner\n\n    > declaring global variable: firstTest\n    > initializing global variable: firstTest\n# building ranges\n  > start adding range variables\n    > adding: Limit -> (0x2@__RANGE__ 0x4@__RANGE__)\n    > adding: emails -> (0x2@__RANGE__ 0x6@__RANGE__)\n    > adding: adr -> (0x2@__RANGE__ 0x7@__RANGE__ 0xb@__RANGE__)\n  > range entry addresses: (0x2@__RANGE__ 0x6@__RANGE__ 0x7@__RANGE__ 0x4@__RANGE__ 0xb@__RANGE__)\n  > loading range blocks\n    > adding range block: 0x1@__RANGE__\n    > adding range block: 0x2@__RANGE__\n    > adding range block: 0x4@__RANGE__\n    > adding range block: 0x3@__RANGE__\n    > adding range block: 0x6@__RANGE__\n    > adding range block: 0x5@__RANGE__\n    > adding range block: 0x7@__RANGE__\n    > adding range block: 0xb@__RANGE__\n# building normal scopes\n  > root addr: 0x2c\n  > dest addrs: (0x36)\n  > loading normal blocks\n    > adding normal block: 0x2c\n    > adding normal block: 0x2d\n    > adding normal block: 0x2e\n    > adding normal block: 0x30\n    > adding normal block: 0x31\n    > adding normal block: 0x32\n    > adding normal block: 0x33\n    > adding normal block: 0x35\n    > adding normal block: 0x34\n    > adding normal block: 0x36\n    > adding normal block: 0x2f\n# start interpretation of normal blocks...\n\n# asserts size: 1\n# using solver: #<z3>\n# result: #f\n"
}