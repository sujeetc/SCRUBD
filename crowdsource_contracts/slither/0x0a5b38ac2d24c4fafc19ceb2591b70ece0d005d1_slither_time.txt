'solc --version' running
'solc ./0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> ./0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol:548:1:
    |
548 | contract Daoclub is ReentrancyGuard, IERC20 {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973):
	External calls:
	- _targetToken.safeTransfer(_summonerAddress,_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#928)
	External calls sending eth:
	- address(_summonerAddress).transfer(_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#926)
	State variables written after the call(s):
	- _receivedManagementFee = true (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#930)
	Daoclub._receivedManagementFee (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#596) can be used in cross function reentrancies:
	- Daoclub._receivedManagementFee (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#596)
	- Daoclub._voteYes() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#849-867)
	- Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973)
Reentrancy in Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973):
	External calls:
	- _targetToken.safeTransfer(_summonerAddress,_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#928)
	- _targetToken.safeTransfer(_summonerAddress,gpProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#953)
	- _targetToken.safeTransfer(_members[i],distributeProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#964)
	External calls sending eth:
	- address(_summonerAddress).transfer(_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#926)
	- address(_summonerAddress).transfer(gpProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#951)
	- address(_members[i]).transfer(distributeProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#962)
	State variables written after the call(s):
	- _amountOfGrandTotalLiquidation = _amountOfGrandTotalLiquidation + amountOfThisLiquidation_ + gpProfit_ (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#969)
	Daoclub._amountOfGrandTotalLiquidation (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#587) can be used in cross function reentrancies:
	- Daoclub._amountOfGrandTotalLiquidation (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#587)
	- Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973)
Reentrancy in Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106):
	External calls:
	- _targetToken.safeTransfer(redemption._member,payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1101)
	External calls sending eth:
	- address(redemption._member).transfer(payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1099)
	State variables written after the call(s):
	- _burn(redemption._member,redemption._sellShares) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1103)
		- _balances[account] = accountBalance - amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1240)
	Daoclub._balances (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#558) can be used in cross function reentrancies:
	- Daoclub._burn(address,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1232-1247)
	- Daoclub._fundShare(address) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1312-1314)
	- Daoclub._mint(address,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1216-1230)
	- Daoclub._transfer(address,address,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1189-1214)
	- Daoclub._voteNo() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#869-876)
	- Daoclub._voteYes() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#849-867)
	- Daoclub.balanceOf(address) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1128-1130)
	- Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973)
	- Daoclub.onlyGpAndLp() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#661-664)
	- Daoclub.onlyMember() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#656-659)
	- Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106)
	- Daoclub.redemptionSubmit(uint256,uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1055-1064)
	- Daoclub.submitVote(uint8) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#823-847)
	- Daoclub.subscriptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1038-1051)
Reentrancy in Daoclub.subscriptionCancel(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1012-1028):
	External calls:
	- _targetToken.safeTransfer(subscription._member,subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1021)
	External calls sending eth:
	- address(subscription._member).transfer(subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1019)
	State variables written after the call(s):
	- subscription._buyAmount = 0 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1024)
	Daoclub._subscriptionMap (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#624) can be used in cross function reentrancies:
	- Daoclub._subscriptionMap (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#624)
	- Daoclub.subscriptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1038-1051)
	- Daoclub.subscriptionCancel(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1012-1028)
	- Daoclub.subscriptionSubmitByEth(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#988-997)
	- Daoclub.subscriptionSubmitByUSD(uint256,uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1000-1009)
	- subscription._buyMaxNetValue = 0 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1025)
	Daoclub._subscriptionMap (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#624) can be used in cross function reentrancies:
	- Daoclub._subscriptionMap (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#624)
	- Daoclub.subscriptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1038-1051)
	- Daoclub.subscriptionCancel(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1012-1028)
	- Daoclub.subscriptionSubmitByEth(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#988-997)
	- Daoclub.subscriptionSubmitByUSD(uint256,uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1000-1009)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Daoclub._voteYes() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#849-867) performs a multiplication on the result of a division:
	- managementDays_ = block.timestamp.sub(_initTimestamp).div(24 * 3600) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#857)
	- _receivableManagementFee = _actualFund.mul(_managementFee).div(36500).mul(managementDays_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#861)
Daoclub.subscriptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1038-1051) performs a multiplication on the result of a division:
	- shares = subscription._buyAmount.div(confirmNetValue.div(10000)).mul(_exchangeRate) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1044)
Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106) performs a multiplication on the result of a division:
	- payAmount = redemption._sellShares.div(_exchangeRate).mul(confirmNetValue.div(10000)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1088)
Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106) performs a multiplication on the result of a division:
	- payAmount = payAmount.sub(payAmount.mul(confirmNetValue.sub(_aveCost[redemption._member])).div(confirmNetValue).mul(_profitDistribution).div(100)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1092)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reentrancy in Daoclub.buyTokenByUSDTorUSDC(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#770-792):
	External calls:
	- _targetToken.safeTransferFrom(msg.sender,address(this),amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#781)
	State variables written after the call(s):
	- fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#791)
		- _daoStatus = 1 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#797)
	Daoclub._daoStatus (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#577) can be used in cross function reentrancies:
	- Daoclub._daoStatus (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#577)
	- Daoclub._voteNo() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#869-876)
	- Daoclub._voteYes() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#849-867)
	- Daoclub.daoStatus() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#680-686)
	- Daoclub.fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#795-804)
	- Daoclub.init(address,string,uint256,uint256,uint256,Daoclub.InitUint8,uint256,uint256,address,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#694-735)
	- Daoclub.submitProposal() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#809-819)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Daoclub.init(address,string,uint256,uint256,uint256,Daoclub.InitUint8,uint256,uint256,address,string).summoner (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#695) lacks a zero-check on :
		- _owner = summoner (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#708)
Daoclub.init(address,string,uint256,uint256,uint256,Daoclub.InitUint8,uint256,uint256,address,string).summonerAddress (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#703) lacks a zero-check on :
		- _summonerAddress = summonerAddress (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#730)
DaoclubSummoner.constructor(address).template (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1363) lacks a zero-check on :
		- _template = address(template) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1364)
DaoclubSummoner.resetTemplate(address).template (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1377) lacks a zero-check on :
		- _template = address(template) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1378)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973) has external calls inside a loop: address(_members[i]).transfer(distributeProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#962)
Daoclub.getBalance() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#977-983) has external calls inside a loop: _targetToken.balanceOf(address(this)).sub(_lockAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#981)
Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106) has external calls inside a loop: address(redemption._member).transfer(payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1099)
Address.functionCallWithValue(address,bytes,uint256,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#130-139) has external calls inside a loop: (success,returndata) = target.call{value: value}(data) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in Daoclub.buyTokenByUSDTorUSDC(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#770-792):
	External calls:
	- _targetToken.safeTransferFrom(msg.sender,address(this),amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#781)
	State variables written after the call(s):
	- _actualFund += amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#783)
	- _aveCost[_msgSender()] = 10000 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#790)
	- _transfer(address(this),msg.sender,_totalSupply.mul(amount).div(_totalFund)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#786)
		- _balances[from] = fromBalance - amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1203)
		- _balances[to] += amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1205)
	- fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#791)
		- _balances[account] = accountBalance - amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1240)
	- _transfer(address(this),msg.sender,_totalSupply.mul(amount).div(_totalFund)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#786)
		- _inserted[to] = true (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1207)
	- _transfer(address(this),msg.sender,_totalSupply.mul(amount).div(_totalFund)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#786)
		- _members.push(to) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1208)
	- fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#791)
		- _totalSupply -= amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1242)
Reentrancy in Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106):
	External calls:
	- _targetToken.safeTransfer(redemption._member,payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1101)
	External calls sending eth:
	- address(redemption._member).transfer(payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1099)
	State variables written after the call(s):
	- _burn(redemption._member,redemption._sellShares) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1103)
		- _totalSupply -= amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1242)
Reentrancy in Daoclub.subscriptionCancel(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1012-1028):
	External calls:
	- _targetToken.safeTransfer(subscription._member,subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1021)
	External calls sending eth:
	- address(subscription._member).transfer(subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1019)
	State variables written after the call(s):
	- _lockAmount = _lockAmount.sub(subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1023)
Reentrancy in DaoclubSummoner.summonDaoclub(uint8,string,uint256,uint256,uint256,uint8,uint8,uint256,uint256,address,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1382-1415):
	External calls:
	- _daoclub.init(msg.sender,tokenSymbol,totalSupply,totalFund,miniOffering,initUint8,periodTimestamp,duration,summonerAddress,targetSymbol) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1398-1409)
	State variables written after the call(s):
	- _daoIdx ++ (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1411)
	- _summonedDaoclub.push(address(_daoclub)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1410)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Daoclub.buyTokenByUSDTorUSDC(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#770-792):
	External calls:
	- _targetToken.safeTransferFrom(msg.sender,address(this),amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#781)
	Event emitted after the call(s):
	- BuyToken(msg.sender,amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#789)
	- FundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#802)
		- fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#791)
	- Transfer(account,address(0),amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1244)
		- fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#791)
	- Transfer(from,to,amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1211)
		- _transfer(address(this),msg.sender,_totalSupply.mul(amount).div(_totalFund)) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#786)
Reentrancy in Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973):
	External calls:
	- _targetToken.safeTransfer(_summonerAddress,_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#928)
	- _targetToken.safeTransfer(_summonerAddress,gpProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#953)
	- _targetToken.safeTransfer(_members[i],distributeProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#964)
	External calls sending eth:
	- address(_summonerAddress).transfer(_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#926)
	- address(_summonerAddress).transfer(gpProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#951)
	- address(_members[i]).transfer(distributeProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#962)
	Event emitted after the call(s):
	- LiquidationCompleted(address(this),_members[i],distributeProfit_,_fundShare(_members[i])) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#966)
Reentrancy in Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106):
	External calls:
	- _targetToken.safeTransfer(redemption._member,payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1101)
	External calls sending eth:
	- address(redemption._member).transfer(payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1099)
	Event emitted after the call(s):
	- RedemptionApprove(sid,payAmount,_aveCost[redemption._member]) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1105)
	- Transfer(account,address(0),amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1244)
		- _burn(redemption._member,redemption._sellShares) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1103)
Reentrancy in DaoclubSummoner.summonDaoclub(uint8,string,uint256,uint256,uint256,uint8,uint8,uint256,uint256,address,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1382-1415):
	External calls:
	- _daoclub.init(msg.sender,tokenSymbol,totalSupply,totalFund,miniOffering,initUint8,periodTimestamp,duration,summonerAddress,targetSymbol) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1398-1409)
	Event emitted after the call(s):
	- SummonComplete(address(_daoclub),msg.sender) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1413)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Daoclub.daoStatus() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#680-686) uses timestamp for comparisons
	Dangerous comparisons:
	- _daoStatus == 0 && block.timestamp > _periodTimestamp (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#681)
Daoclub.fundraisingCompleted() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#795-804) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > _periodTimestamp || _actualFund == _totalFund || _totalFund.sub(_actualFund) < _miniOffering (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#796)
Daoclub._voteYes() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#849-867) uses timestamp for comparisons
	Dangerous comparisons:
	- managementDays_ > _duration (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#858)
Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(amountOfThisLiquidation_ > _receivableManagementFee,Daoclub: Insufficient amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#924)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address._revert(bytes,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#233-245) uses assembly
	- INLINE ASM (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#238-241)
CloneFactory.createClone(address) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1343-1352) uses assembly
	- INLINE ASM (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1345-1351)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Daoclub.init(address,string,uint256,uint256,uint256,Daoclub.InitUint8,uint256,uint256,address,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#694-735) compares to a boolean constant:
	-require(bool,string)(_initialized == false,Daoclub: cannot be initialized repeatedly ) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#706)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Daoclub.subscriptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1038-1051) has costly operations inside a loop:
	- _lockAmount = _lockAmount.sub(subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1042)
Daoclub._mint(address,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1216-1230) has costly operations inside a loop:
	- _totalSupply += amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1221)
Daoclub._burn(address,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1232-1247) has costly operations inside a loop:
	- _totalSupply -= amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1242)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Daoclub._msgData() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1300-1302) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint ^0.8.7 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- ^0.8.7 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#5)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#62-67):
	- (success,None) = recipient.call{value: amount}() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#65)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#130-139):
	- (success,returndata) = target.call{value: value}(data) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#137)
Low level call in Address.functionStaticCall(address,bytes,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#157-164):
	- (success,returndata) = target.staticcall(data) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#162)
Low level call in Address.functionDelegateCall(address,bytes,string) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#182-189):
	- (success,returndata) = target.delegatecall(data) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#187)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IERC20Permit.DOMAIN_SEPARATOR() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#425) is not in mixedCase
Parameter Daoclub.compareStr(string,string)._str (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1304) is not in mixedCase
Variable Daoclub._members (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#567) is not in mixedCase
Variable Daoclub._initTimestamp (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#576) is not in mixedCase
Variable Daoclub._daoStatus (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#577) is not in mixedCase
Variable Daoclub._voteResult (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#579) is not in mixedCase
Variable Daoclub._yesShares (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#580) is not in mixedCase
Variable Daoclub._noShares (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#581) is not in mixedCase
Variable Daoclub._totalFund (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#584) is not in mixedCase
Variable Daoclub._actualFund (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#585) is not in mixedCase
Variable Daoclub._miniOffering (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#586) is not in mixedCase
Variable Daoclub._amountOfGrandTotalLiquidation (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#587) is not in mixedCase
Variable Daoclub._periodTimestamp (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#590) is not in mixedCase
Variable Daoclub._targetSymbol (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#592) is not in mixedCase
Variable Daoclub._targetToken (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#593) is not in mixedCase
Variable Daoclub._receivableManagementFee (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#595) is not in mixedCase
Variable Daoclub._receivedManagementFee (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#596) is not in mixedCase
Variable Daoclub._daoType (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#608) is not in mixedCase
Variable Daoclub._exchangeRate (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#609) is not in mixedCase
Variable Daoclub._aveCost (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#610) is not in mixedCase
Variable Daoclub._subscriptionMap (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#624) is not in mixedCase
Variable Daoclub._redemptionMap (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#625) is not in mixedCase
Variable Daoclub._lockAmount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#626) is not in mixedCase
Variable DaoclubSummoner._template (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1357) is not in mixedCase
Variable DaoclubSummoner._summonedDaoclub (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1360) is not in mixedCase
Variable DaoclubSummoner._daoIdx (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1361) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973):
	External calls:
	- address(_summonerAddress).transfer(_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#926)
	State variables written after the call(s):
	- _receivedManagementFee = true (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#930)
Reentrancy in Daoclub.liquidate() (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#919-973):
	External calls:
	- address(_summonerAddress).transfer(_receivableManagementFee) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#926)
	- address(_summonerAddress).transfer(gpProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#951)
	- address(_members[i]).transfer(distributeProfit_) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#962)
	State variables written after the call(s):
	- _amountOfGrandTotalLiquidation = _amountOfGrandTotalLiquidation + amountOfThisLiquidation_ + gpProfit_ (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#969)
	Event emitted after the call(s):
	- LiquidationCompleted(address(this),_members[i],distributeProfit_,_fundShare(_members[i])) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#966)
Reentrancy in Daoclub.redemptionApproveOne(uint256,uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1082-1106):
	External calls:
	- address(redemption._member).transfer(payAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1099)
	State variables written after the call(s):
	- _burn(redemption._member,redemption._sellShares) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1103)
		- _balances[account] = accountBalance - amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1240)
	- _burn(redemption._member,redemption._sellShares) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1103)
		- _totalSupply -= amount (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1242)
	Event emitted after the call(s):
	- RedemptionApprove(sid,payAmount,_aveCost[redemption._member]) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1105)
	- Transfer(account,address(0),amount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1244)
		- _burn(redemption._member,redemption._sellShares) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1103)
Reentrancy in Daoclub.subscriptionCancel(uint256) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1012-1028):
	External calls:
	- address(subscription._member).transfer(subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1019)
	State variables written after the call(s):
	- _lockAmount = _lockAmount.sub(subscription._buyAmount) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1023)
	- subscription._buyAmount = 0 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1024)
	- subscription._buyMaxNetValue = 0 (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1025)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

CloneFactory.createClone(address) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1343-1352) uses literals with too many digits:
	- mstore(uint256,uint256)(clone_createClone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1347)
CloneFactory.createClone(address) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1343-1352) uses literals with too many digits:
	- mstore(uint256,uint256)(clone_createClone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1349)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition i < _members.length (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#815) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

DaoclubSummoner._owner (0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol#1358) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x0a5b38ac2d24c4fafc19ceb2591b70ece0d005d1.sol analyzed (9 contracts with 94 detectors), 75 result(s) found

real	0m3.697s
user	0m3.434s
sys	0m0.265s
