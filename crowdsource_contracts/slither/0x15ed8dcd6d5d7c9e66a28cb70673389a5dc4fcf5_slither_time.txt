'solc --version' running
'solc ./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1071:13: Warning: Return value of low-level calls not used.
            recipient.call(abi.encodeWithSignature("tokenFallback(address,uint256,bytes)", sender, amount, data));
            ^---------------------------------------------------------------------------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1109:1: Warning: Base constructor arguments given twice.
contract ExternStateToken is SelfDestructible, Proxyable, TokenFallbackCaller {
^ (Relevant source part starts here and spans across multiple lines).
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:132:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:774:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1306:1: Warning: Base constructor arguments given twice.
contract Synth is ExternStateToken {
^ (Relevant source part starts here and spans across multiple lines).
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:132:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:774:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1652:1: Warning: Base constructor arguments given twice.
contract FeePool is Proxyable, SelfDestructible {
^ (Relevant source part starts here and spans across multiple lines).
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:774:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:132:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1663:50: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant public MAX_TRANSFER_FEE_RATE = SafeDecimalMath.unit() / 10;
                                                 ^-------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1669:50: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant public MAX_EXCHANGE_FEE_RATE = SafeDecimalMath.unit() / 10;
                                                 ^-------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1711:36: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant TWENTY_PERCENT = (20 * SafeDecimalMath.unit()) / 100;
                                   ^---------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1712:41: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant TWENTY_FIVE_PERCENT = (25 * SafeDecimalMath.unit()) / 100;
                                        ^---------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1713:36: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant THIRTY_PERCENT = (30 * SafeDecimalMath.unit()) / 100;
                                   ^---------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1714:36: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant FOURTY_PERCENT = (40 * SafeDecimalMath.unit()) / 100;
                                   ^---------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1715:35: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant FIFTY_PERCENT = (50 * SafeDecimalMath.unit()) / 100;
                                  ^---------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:1716:42: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant SEVENTY_FIVE_PERCENT = (75 * SafeDecimalMath.unit()) / 100;
                                         ^---------------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:2690:40: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant MAX_ISSUANCE_RATIO = SafeDecimalMath.unit();
                                       ^--------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:3371:1: Warning: Base constructor arguments given twice.
contract Synthetix is ExternStateToken {
^ (Relevant source part starts here and spans across multiple lines).
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:132:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:774:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:3384:38: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant SYNTHETIX_SUPPLY = 1e8 * SafeDecimalMath.unit();
                                     ^--------------------------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:4220:1: Warning: Base constructor arguments given twice.
contract Depot is SelfDestructible, Pausable {
^ (Relevant source part starts here and spans across multiple lines).
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:132:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:240:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol:4747:55: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function tokenFallback(address from, uint amount, bytes data)
                                                      ^--------^


SynthetixEscrow (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2334-2616) contract sets array length with a user-controlled value:
	- vestingSchedules[account].push((time,quantity)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2558)
SynthetixState (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2659-2904) contract sets array length with a user-controlled value:
	- debtLedger.push(SafeDecimalMath.preciseUnit()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2863)
SynthetixState (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2659-2904) contract sets array length with a user-controlled value:
	- debtLedger.push(debtLedger[debtLedger.length - 1].multiplyDecimalRoundPrecise(delta)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2859-2861)
Synthetix (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3371-4183) contract sets array length with a user-controlled value:
	- availableSynths.push(synth) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3422)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- synth.transfer(msg.sender,remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4501)
	- synth.transfer(msg.sender,deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4537)
	External calls sending eth:
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	State variables written after the call(s):
	- depositStartIndex = depositStartIndex.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4467)
	Depot.depositStartIndex (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4271) can be used in cross function reentrancies:
	- Depot.depositStartIndex (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4271)
	- Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561)
	- Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724)
	- depositStartIndex = depositStartIndex.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4511)
	Depot.depositStartIndex (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4271) can be used in cross function reentrancies:
	- Depot.depositStartIndex (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4271)
	- Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561)
	- Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724)
	- delete deposits[i] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4509)
	Depot.deposits (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4269) can be used in cross function reentrancies:
	- Depot.deposits (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4269)
	- Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561)
	- Depot.tokenFallback(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4747-4771)
	- Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724)
	- totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4477)
	Depot.totalSellableDeposits (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4278) can be used in cross function reentrancies:
	- Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561)
	- Depot.tokenFallback(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4747-4771)
	- Depot.totalSellableDeposits (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4278)
	- Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724)
	- totalSellableDeposits = totalSellableDeposits.sub(deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4513)
	Depot.totalSellableDeposits (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4278) can be used in cross function reentrancies:
	- Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561)
	- Depot.tokenFallback(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4747-4771)
	- Depot.totalSellableDeposits (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4278)
	- Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

SynthetixEscrow.withdrawSynthetix(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2498-2504) ignores return value by synthetix.transfer(synthetix,quantity) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2503)
SynthetixEscrow.vest() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2582-2608) ignores return value by synthetix.transfer(msg.sender,total) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2605)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) ignores return value by synth.transfer(msg.sender,remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4501)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) ignores return value by synth.transfer(msg.sender,deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4537)
Depot.exchangeEtherForSynthetix() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4584-4603) ignores return value by synthetix.transfer(msg.sender,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4598)
Depot.exchangeSynthsForSynthetix(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4629-4649) ignores return value by synth.transferFrom(msg.sender,fundsWallet,synthAmount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4641)
Depot.exchangeSynthsForSynthetix(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4629-4649) ignores return value by synthetix.transfer(msg.sender,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4644)
Depot.withdrawSynthetix(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4672-4682) ignores return value by synthetix.transfer(owner,amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4676)
Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724) ignores return value by synth.transfer(msg.sender,synthsToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4721)
Depot.depositSynths(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4732-4740) ignores return value by synth.transferFrom(msg.sender,this,amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4736)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Synthetix._removeFromDebtRegister(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3941-3977) uses a dangerous strict equality:
	- debtToRemove == existingDebt (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3960)
Synthetix.collateralisationRatio(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4006-4016) uses a dangerous strict equality:
	- totalOwnedSynthetix == 0 (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4012)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Contract locking ether found:
	Contract Proxy (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#635-734) has payable functions:
	 - Proxy.fallback() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#692-726)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in FeePool.claimFees(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1881-1901):
	External calls:
	- availableFees = feesAvailable(messageSender,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1886)
		- ratio = synthetix.collateralisationRatio(account) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2117)
		- (initialDebtOwnership,debtEntryIndex) = synthetix.synthetixState().issuanceData(account) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2149)
		- totalSynths = synthetix.totalIssuedSynths(XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2155)
		- synthetix.effectiveValue(XDR,totalFees,currencyKey) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2105)
		- debtBalance = synthetix.debtBalanceOf(account,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2158)
	State variables written after the call(s):
	- lastFeeWithdrawal[messageSender] = recentFeePeriods[1].feePeriodId (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1890)
	FeePool.lastFeeWithdrawal (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1707) can be used in cross function reentrancies:
	- FeePool.claimFees(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1881-1901)
	- FeePool.feesByPeriod(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2139-2185)
	- FeePool.lastFeeWithdrawal (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1707)
	- _recordFeePayment(availableFees) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1893)
		- recentFeePeriods[i].feesClaimed = recentFeePeriods[i].feesClaimed.add(amountInPeriod) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1923)
	FeePool.recentFeePeriods (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1691) can be used in cross function reentrancies:
	- FeePool._recordFeePayment(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1907-1934)
	- FeePool.claimFees(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1881-1901)
	- FeePool.closeCurrentFeePeriod() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1831-1875)
	- FeePool.constructor(address,address,Synthetix,address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1718-1741)
	- FeePool.feePaid(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1818-1826)
	- FeePool.feesByPeriod(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2139-2185)
	- FeePool.recentFeePeriods (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1691)
	- FeePool.totalFeesAvailable(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2069-2083)
Reentrancy in FeePool.closeCurrentFeePeriod() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1831-1875):
	External calls:
	- recentFeePeriods[0].startingDebtIndex = synthetix.synthetixState().debtLedgerLength() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1869)
	State variables written after the call(s):
	- nextFeePeriodId = nextFeePeriodId.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1872)
	FeePool.nextFeePeriodId (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1694) can be used in cross function reentrancies:
	- FeePool.closeCurrentFeePeriod() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1831-1875)
	- FeePool.constructor(address,address,Synthetix,address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1718-1741)
	- FeePool.nextFeePeriodId (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1694)
	- recentFeePeriods[0].startTime = now (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1870)
	FeePool.recentFeePeriods (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1691) can be used in cross function reentrancies:
	- FeePool._recordFeePayment(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1907-1934)
	- FeePool.claimFees(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1881-1901)
	- FeePool.closeCurrentFeePeriod() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1831-1875)
	- FeePool.constructor(address,address,Synthetix,address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1718-1741)
	- FeePool.feePaid(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1818-1826)
	- FeePool.feesByPeriod(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2139-2185)
	- FeePool.recentFeePeriods (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1691)
	- FeePool.totalFeesAvailable(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2069-2083)
Reentrancy in Synthetix.issueMaxSynths(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3898-3907):
	External calls:
	- maxIssuable = remainingIssuableSynths(messageSender,currencyKey) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3903)
		- balance = tokenState.balanceOf(account) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4086)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4129)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3556)
		- destinationValue.multiplyDecimal(synthetixState.issuanceRatio()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3995)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4033)
		- balance = balance.add(escrow.balanceOf(account)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4089)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3541-3542)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4040-4042)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3562)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3568-3570)
	- issueSynths(currencyKey,maxIssuable) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3906)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4129)
		- balance = tokenState.balanceOf(account) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4086)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3556)
		- destinationValue.multiplyDecimal(synthetixState.issuanceRatio()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3995)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4033)
		- balance = balance.add(escrow.balanceOf(account)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4089)
		- synths[currencyKey].issue(messageSender,amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3890)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3541-3542)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4040-4042)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3562)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3568-3570)
		- ! synthetixState.hasIssued(messageSender) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3854)
		- synthetixState.incrementTotalIssuerCount() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3855)
		- synthetixState.setCurrentIssuanceData(messageSender,debtPercentage) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3859)
		- synthetixState.debtLedgerLength() > 0 (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3863)
		- synthetixState.appendDebtLedgerValue(synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3864-3866)
		- synthetixState.appendDebtLedgerValue(SafeDecimalMath.preciseUnit()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3868)
	State variables written after the call(s):
	- issueSynths(currencyKey,maxIssuable) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3906)
		- messageSender = msg.sender (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#804)
	Proxyable.messageSender (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#771) can be used in cross function reentrancies:
	- Synthetix._addToDebtRegister(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3823-3870)
	- Synthetix._removeFromDebtRegister(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3941-3977)
	- ExternStateToken.approve(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1241-1251)
	- Synthetix.burnSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3914-3934)
	- Synthetix.exchange(bytes4,uint256,bytes4,address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3661-3679)
	- Synthetix.issueMaxSynths(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3898-3907)
	- Synthetix.issueSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3878-3891)
	- Proxyable.optionalProxy() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#801-807)
	- Proxyable.optionalProxy_onlyOwner() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#809-816)
	- Proxyable.setMessageSender(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#789-794)
	- Synthetix.setPreferredCurrency(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3511-3520)
	- Synthetix.transfer(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3607-3619)
	- Synthetix.transferFrom(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3638-3651)
Reentrancy in Synthetix.issueSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3878-3891):
	External calls:
	- require(bool,string)(amount <= remainingIssuableSynths(messageSender,currencyKey),Amount too large) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3884)
		- balance = tokenState.balanceOf(account) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4086)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4129)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3556)
		- destinationValue.multiplyDecimal(synthetixState.issuanceRatio()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3995)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4033)
		- balance = balance.add(escrow.balanceOf(account)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4089)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3541-3542)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4040-4042)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3562)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3568-3570)
	- _addToDebtRegister(currencyKey,amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3887)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4129)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3556)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4033)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3541-3542)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4040-4042)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3562)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3568-3570)
		- ! synthetixState.hasIssued(messageSender) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3854)
		- synthetixState.incrementTotalIssuerCount() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3855)
		- synthetixState.setCurrentIssuanceData(messageSender,debtPercentage) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3859)
		- synthetixState.debtLedgerLength() > 0 (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3863)
		- synthetixState.appendDebtLedgerValue(synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3864-3866)
		- synthetixState.appendDebtLedgerValue(SafeDecimalMath.preciseUnit()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3868)
	State variables written after the call(s):
	- _addToDebtRegister(currencyKey,amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3887)
		- messageSender = msg.sender (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#804)
	Proxyable.messageSender (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#771) can be used in cross function reentrancies:
	- Synthetix._addToDebtRegister(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3823-3870)
	- Synthetix._removeFromDebtRegister(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3941-3977)
	- ExternStateToken.approve(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1241-1251)
	- Synthetix.burnSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3914-3934)
	- Synthetix.exchange(bytes4,uint256,bytes4,address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3661-3679)
	- Synthetix.issueMaxSynths(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3898-3907)
	- Synthetix.issueSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3878-3891)
	- Proxyable.optionalProxy() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#801-807)
	- Proxyable.optionalProxy_onlyOwner() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#809-816)
	- Proxyable.setMessageSender(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#789-794)
	- Synthetix.setPreferredCurrency(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3511-3520)
	- Synthetix.transfer(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3607-3619)
	- Synthetix.transferFrom(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3638-3651)
Reentrancy in Synthetix.removeSynth(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3432-3464):
	External calls:
	- require(bool,string)(synths[currencyKey].totalSupply() == 0,Synth supply exists) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3437)
	State variables written after the call(s):
	- delete synths[currencyKey] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3461)
	Synthetix.synths (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3377) can be used in cross function reentrancies:
	- Synthetix._internalExchange(address,bytes4,uint256,bytes4,address,bool) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3762-3815)
	- Synthetix.addSynth(Synth) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3414-3426)
	- Synthetix.burnSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3914-3934)
	- Synthetix.issueSynths(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3878-3891)
	- Synthetix.removeSynth(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3432-3464)
	- Synthetix.synths (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3377)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

ExternStateToken (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1109-1272) gives base constructor Owned.constructor(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#51-57) arguments more than once in inheritance hierarchy:
	- From Proxyable (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#764-819) constructor definition
	- From SelfDestructible (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#120-201) constructor definition
Synth (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1306-1611) gives base constructor Owned.constructor(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#51-57) arguments more than once in inheritance hierarchy:
	- From Proxyable (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#764-819) constructor definition
	- From SelfDestructible (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#120-201) constructor definition
FeePool (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1652-2245) gives base constructor Owned.constructor(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#51-57) arguments more than once in inheritance hierarchy:
	- From SelfDestructible (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#120-201) constructor definition
	- From Proxyable (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#764-819) constructor definition
Synthetix (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3371-4183) gives base constructor Owned.constructor(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#51-57) arguments more than once in inheritance hierarchy:
	- From Proxyable (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#764-819) constructor definition
	- From SelfDestructible (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#120-201) constructor definition
Depot (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4220-4873) gives base constructor Owned.constructor(address) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#51-57) arguments more than once in inheritance hierarchy:
	- From Pausable (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#230-277) constructor definition
	- From SelfDestructible (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#120-201) constructor definition
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reused-base-constructors

TokenFallbackCaller.callTokenFallbackIfNeeded(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1043-1075) ignores return value by recipient.call(abi.encodeWithSignature(tokenFallback(address,uint256,bytes),sender,amount,data)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1071)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

Synth.transfer(address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1374) is a local variable never initialized
Synth.transferFrom(address,address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1419) is a local variable never initialized
Synthetix.transferFrom(address,address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3628) is a local variable never initialized
Synth.triggerTokenFallbackIfNeeded(address,address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1567) is a local variable never initialized
FeePool.feesByPeriod(address).result (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2144) is a local variable never initialized
Synthetix.transfer(address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3597) is a local variable never initialized
Synth.transferFromSenderPaysFee(address,address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1499) is a local variable never initialized
Synth.transferSenderPaysFee(address,uint256).empty (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1461) is a local variable never initialized
SynthetixEscrow.vest().total (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2586) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Synth.transfer(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1361-1376) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1371)
Synth.transfer(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1382-1396) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1392)
Synth.transferFrom(address,address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1402-1421) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1417)
Synth.transferFrom(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1427-1445) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1442)
Synth.transferSenderPaysFee(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1449-1463) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1458)
Synth.transferSenderPaysFee(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1467-1480) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1476)
Synth.transferFromSenderPaysFee(address,address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1484-1501) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1497)
Synth.transferFromSenderPaysFee(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1505-1521) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1518)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

ExternStateToken.allowance(address,address).owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1156) shadows:
	- Owned.owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#45) (state variable)
ExternStateToken.emitApproval(address,address,uint256).owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1263) shadows:
	- Owned.owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#45) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Owned.nominateNewOwner(address)._owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#63) lacks a zero-check on :
		- nominatedOwner = _owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#67)
State.setAssociatedContract(address)._associatedContract (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#872) lacks a zero-check on :
		- associatedContract = _associatedContract (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#876)
Proxyable.setMessageSender(address).sender (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#789) lacks a zero-check on :
		- messageSender = sender (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#793)
FeePool.constructor(address,address,Synthetix,address,uint256,uint256)._feeAuthority (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1718) lacks a zero-check on :
		- feeAuthority = _feeAuthority (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1728)
FeePool.setFeeAuthority(address)._feeAuthority (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1777) lacks a zero-check on :
		- feeAuthority = _feeAuthority (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1781)
ExchangeRates.constructor(address,address,bytes4[],uint256[])._oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2976) lacks a zero-check on :
		- oracle = _oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2986)
ExchangeRates.setOracle(address)._oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3116) lacks a zero-check on :
		- oracle = _oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3120)
Depot.constructor(address,address,Synthetix,Synth,FeePool,address,uint256,uint256)._fundsWallet (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4306) lacks a zero-check on :
		- fundsWallet = _fundsWallet (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4323)
Depot.constructor(address,address,Synthetix,Synth,FeePool,address,uint256,uint256)._oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4314) lacks a zero-check on :
		- oracle = _oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4327)
Depot.setFundsWallet(address)._fundsWallet (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4339) lacks a zero-check on :
		- fundsWallet = _fundsWallet (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4343)
Depot.setOracle(address)._oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4351) lacks a zero-check on :
		- oracle = _oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4355)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2532-2559) has external calls inside a loop: require(bool,string)(totalVestedBalance <= synthetix.balanceOf(this),Must be enough balance in the contract to provide for the vesting entry) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2543)
SynthetixState._addToDebtRegister(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2815-2865) has external calls inside a loop: xdrValue = synthetix.effectiveValue(sUSD,amount,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2823)
SynthetixState._addToDebtRegister(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2815-2865) has external calls inside a loop: totalDebtIssued = synthetix.totalIssuedSynths(XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2826)
SynthetixState._addToDebtRegister(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2815-2865) has external calls inside a loop: existingDebt = synthetix.debtBalanceOf(account,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2840)
Synthetix.totalIssuedSynths(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3549-3575) has external calls inside a loop: require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3562)
Synthetix.totalIssuedSynths(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3549-3575) has external calls inside a loop: synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3568-3570)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has external calls inside a loop: ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has external calls inside a loop: fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has external calls inside a loop: synth.transfer(msg.sender,remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4501)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has external calls inside a loop: ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has external calls inside a loop: fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has external calls inside a loop: synth.transfer(msg.sender,deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4537)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in SynthetixState._addToDebtRegister(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2815-2865):
	External calls:
	- xdrValue = synthetix.effectiveValue(sUSD,amount,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2823)
	- totalDebtIssued = synthetix.totalIssuedSynths(XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2826)
	- existingDebt = synthetix.debtBalanceOf(account,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2840)
	State variables written after the call(s):
	- debtLedger.push(debtLedger[debtLedger.length - 1].multiplyDecimalRoundPrecise(delta)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2859-2861)
	- debtLedger.push(SafeDecimalMath.preciseUnit()) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2863)
	- issuanceData[account].initialDebtOwnership = debtPercentage (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2853)
	- issuanceData[account].debtEntryIndex = debtLedger.length (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2854)
	- totalIssuerCount = totalIssuerCount.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2849)
Reentrancy in Synthetix.addSynth(Synth) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3414-3426):
	External calls:
	- currencyKey = synth.currencyKey() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3418)
	State variables written after the call(s):
	- availableSynths.push(synth) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3422)
	- synths[currencyKey] = synth (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3423)
Reentrancy in SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2532-2559):
	External calls:
	- require(bool,string)(totalVestedBalance <= synthetix.balanceOf(this),Must be enough balance in the contract to provide for the vesting entry) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2543)
	State variables written after the call(s):
	- totalVestedAccountBalance[account] = quantity (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2550)
	- totalVestedAccountBalance[account] = totalVestedAccountBalance[account].add(quantity) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2555)
	- vestingSchedules[account].push((time,quantity)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2558)
Reentrancy in Synth.burn(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1551-1559):
	External calls:
	- tokenState.setBalanceOf(account,tokenState.balanceOf(account).sub(amount)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1555)
	State variables written after the call(s):
	- totalSupply = totalSupply.sub(amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1556)
Reentrancy in FeePool.feePaid(bytes4,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1818-1826):
	External calls:
	- xdrAmount = synthetix.effectiveValue(currencyKey,amount,XDR) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1822)
	State variables written after the call(s):
	- recentFeePeriods[0].feesToDistribute = recentFeePeriods[0].feesToDistribute.add(xdrAmount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1825)
Reentrancy in Synth.issue(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1540-1548):
	External calls:
	- tokenState.setBalanceOf(account,tokenState.balanceOf(account).add(amount)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1544)
	State variables written after the call(s):
	- totalSupply = totalSupply.add(amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1545)
Reentrancy in Synthetix.removeSynth(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3432-3464):
	External calls:
	- require(bool,string)(synths[currencyKey].totalSupply() == 0,Synth supply exists) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3437)
	State variables written after the call(s):
	- delete availableSynths[i] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3446)
	- availableSynths[i] = availableSynths[availableSynths.length - 1] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3451)
	- availableSynths.length -- (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3454)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Depot.exchangeEtherForSynthetix() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4584-4603):
	External calls:
	- synthetixToSend = synthetixReceivedForEther(msg.value) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4592)
		- synthsReceived = feePool.amountReceivedFromTransfer(amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4796)
	- synthetix.transfer(msg.sender,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4598)
	External calls sending eth:
	- fundsWallet.transfer(msg.value) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4595)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,SNX,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4600)
Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- synth.transfer(msg.sender,remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4501)
	- synth.transfer(msg.sender,deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4537)
	External calls sending eth:
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	Event emitted after the call(s):
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,remainingToFulfill,i) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4494)
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,deposit.amount,i) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4530)
	- NonPayableContract(deposit.user,ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4492)
	- NonPayableContract(deposit.user,ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4528)
Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- synth.transfer(msg.sender,remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4501)
	- synth.transfer(msg.sender,deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4537)
	External calls sending eth:
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	- msg.sender.transfer(remainingToFulfill.divideDecimal(usdToEthPrice)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4549)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,sUSD,fulfilled) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4557)
Reentrancy in Depot.exchangeSynthsForSynthetix(uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4629-4649):
	External calls:
	- synthetixToSend = synthetixReceivedForSynths(synthAmount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4636)
		- synthsReceived = feePool.amountReceivedFromTransfer(amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4796)
	- synth.transferFrom(msg.sender,fundsWallet,synthAmount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4641)
	- synthetix.transfer(msg.sender,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4644)
	Event emitted after the call(s):
	- Exchange(sUSD,synthAmount,SNX,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4646)
Reentrancy in SynthetixEscrow.vest() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2582-2608):
	External calls:
	- synthetix.transfer(msg.sender,total) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2605)
	Event emitted after the call(s):
	- Vested(msg.sender,now,total) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2606)
Reentrancy in Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724):
	External calls:
	- synth.transfer(msg.sender,synthsToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4721)
	Event emitted after the call(s):
	- SynthWithdrawal(msg.sender,synthsToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4723)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

SelfDestructible.selfDestruct() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#186-195) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(initiationTime + SELFDESTRUCT_DELAY < now,Self destruct delay has not yet elapsed) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#191)
FeePool.closeCurrentFeePeriod() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1831-1875) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(recentFeePeriods[0].startTime <= (now - feePeriodDuration),It is too early to close the current fee period) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1835)
SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2532-2559) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now < time,Time must be in the future) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2538)
SynthetixEscrow.vest() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2582-2608) uses timestamp for comparisons
	Dangerous comparisons:
	- time > now (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2590)
ExchangeRates.internalUpdateRates(bytes4[],uint256[],uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3036-3065) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(timeSent < (now + ORACLE_FUTURE_LIMIT),Time is too far into the future) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3041)
	- timeSent >= lastRateUpdateTimes[currencyKeys[i]] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3052)
ExchangeRates.rateIsStale(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3197-3206) uses timestamp for comparisons
	Dangerous comparisons:
	- lastRateUpdateTimes[currencyKey].add(rateStalePeriod) < now (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3205)
ExchangeRates.anyRateIsStale(bytes4[]) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3211-3228) uses timestamp for comparisons
	Dangerous comparisons:
	- currencyKeys[i] != sUSD && lastRateUpdateTimes[currencyKeys[i]].add(rateStalePeriod) < now (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3221)
Depot.updatePrices(uint256,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4416-4430) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(lastPriceUpdateTime < timeSent,Time must be later than last update) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4422)
	- require(bool,string)(timeSent < (now + ORACLE_FUTURE_LIMIT),Time must be less than now + ORACLE_FUTURE_LIMIT) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4423)
Depot.pricesAreStale() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4777-4783) uses timestamp for comparisons
	Dangerous comparisons:
	- lastPriceUpdateTime.add(priceStalePeriod) < now (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4782)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Proxy._emit(bytes,uint256,bytes32,bytes32,bytes32,bytes32) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#660-690) uses assembly
	- INLINE ASM (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#667-690)
Proxy.fallback() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#692-726) uses assembly
	- INLINE ASM (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#697-710)
	- INLINE ASM (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#714-725)
TokenFallbackCaller.callTokenFallbackIfNeeded(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1043-1075) uses assembly
	- INLINE ASM (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1060-1066)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2532-2559) has costly operations inside a loop:
	- totalVestedBalance = totalVestedBalance.add(quantity) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2542)
SynthetixState._addToDebtRegister(address,uint256) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2815-2865) has costly operations inside a loop:
	- totalIssuerCount = totalIssuerCount.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2849)
Synthetix.removeSynth(bytes4) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3432-3464) has costly operations inside a loop:
	- delete availableSynths[i] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3446)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has costly operations inside a loop:
	- depositStartIndex = depositStartIndex.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4467)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has costly operations inside a loop:
	- totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4477)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has costly operations inside a loop:
	- delete deposits[i] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4509)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has costly operations inside a loop:
	- depositStartIndex = depositStartIndex.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4511)
Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561) has costly operations inside a loop:
	- totalSellableDeposits = totalSellableDeposits.sub(deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4513)
Depot.withdrawMyDepositedSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4691-4724) has costly operations inside a loop:
	- delete deposits[i] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4703)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Version constraint 0.4.25 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x.
It is used by:
	- 0.4.25 (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#37)
solc-0.4.25 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in TokenFallbackCaller.callTokenFallbackIfNeeded(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1043-1075):
	- recipient.call(abi.encodeWithSignature(tokenFallback(address,uint256,bytes),sender,amount,data)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1071)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Owned.nominateNewOwner(address)._owner (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#63) is not in mixedCase
Parameter SelfDestructible.setSelfDestructBeneficiary(address)._beneficiary (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#145) is not in mixedCase
Parameter Pausable.setPaused(bool)._paused (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#250) is not in mixedCase
Parameter Proxy.setTarget(Proxyable)._target (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#645) is not in mixedCase
Function Proxy._emit(bytes,uint256,bytes32,bytes32,bytes32,bytes32) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#660-690) is not in mixedCase
Parameter Proxyable.setProxy(address)._proxy (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#781) is not in mixedCase
Modifier Proxyable.optionalProxy_onlyOwner() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#809-816) is not in mixedCase
Parameter State.setAssociatedContract(address)._associatedContract (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#872) is not in mixedCase
Parameter ExternStateToken.setTokenState(TokenState)._tokenState (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1182) is not in mixedCase
Function ExternStateToken._transfer_byProxy(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1218-1223) is not in mixedCase
Function ExternStateToken._transferFrom_byProxy(address,address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1229-1236) is not in mixedCase
Parameter Synth.setSynthetix(Synthetix)._synthetix (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1339) is not in mixedCase
Parameter Synth.setFeePool(FeePool)._feePool (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1347) is not in mixedCase
Parameter FeePool.setExchangeFeeRate(uint256)._exchangeFeeRate (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1747) is not in mixedCase
Parameter FeePool.setTransferFeeRate(uint256)._transferFeeRate (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1762) is not in mixedCase
Parameter FeePool.setFeeAuthority(address)._feeAuthority (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1777) is not in mixedCase
Parameter FeePool.setFeePeriodDuration(uint256)._feePeriodDuration (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1789) is not in mixedCase
Parameter FeePool.setSynthetix(Synthetix)._synthetix (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1804) is not in mixedCase
Parameter SynthetixEscrow.setSynthetix(Synthetix)._synthetix (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2370) is not in mixedCase
Parameter SynthetixState.setIssuanceRatio(uint256)._issuanceRatio (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#2786) is not in mixedCase
Parameter ExchangeRates.setOracle(address)._oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3116) is not in mixedCase
Parameter ExchangeRates.setRateStalePeriod(uint256)._time (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3128) is not in mixedCase
Parameter Synthetix.setEscrow(SynthetixEscrow)._escrow (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3470) is not in mixedCase
Parameter Synthetix.setExchangeRates(ExchangeRates)._exchangeRates (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3484) is not in mixedCase
Parameter Synthetix.setSynthetixState(SynthetixState)._synthetixState (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3498) is not in mixedCase
Struct Depot.synthDeposit (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4251-4256) is not in CapWords
Parameter Depot.setFundsWallet(address)._fundsWallet (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4339) is not in mixedCase
Parameter Depot.setOracle(address)._oracle (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4351) is not in mixedCase
Parameter Depot.setSynth(Synth)._synth (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4363) is not in mixedCase
Parameter Depot.setSynthetix(Synthetix)._synthetix (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4375) is not in mixedCase
Parameter Depot.setPriceStalePeriod(uint256)._time (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4387) is not in mixedCase
Parameter Depot.setMinimumDepositAmount(uint256)._amount (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4399) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Depot.exchangeEtherForSynthetix() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4584-4603):
	External calls:
	- fundsWallet.transfer(msg.value) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4595)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,SNX,synthetixToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4600)
Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	State variables written after the call(s):
	- depositStartIndex = depositStartIndex.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4467)
	- depositStartIndex = depositStartIndex.add(1) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4511)
	- delete deposits[i] (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4509)
	- totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4477)
	- totalSellableDeposits = totalSellableDeposits.sub(deposit.amount) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4513)
	Event emitted after the call(s):
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,remainingToFulfill,i) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4494)
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,deposit.amount,i) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4530)
Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	Event emitted after the call(s):
	- NonPayableContract(deposit.user,ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4492)
Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	Event emitted after the call(s):
	- NonPayableContract(deposit.user,ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4528)
Reentrancy in Depot.exchangeEtherForSynths() (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4445-4561):
	External calls:
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4490)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4491)
	- ! deposit.user.send(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4526)
	- fundsWallet.transfer(ethToSend) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4527)
	- msg.sender.transfer(remainingToFulfill.divideDecimal(usdToEthPrice)) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4549)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,sUSD,fulfilled) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#4557)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Loop condition i < availableSynths.length (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3558) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < xdrParticipants.length (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3075) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

transfer(address,uint256,bytes) should be declared external:
	- Synth.transfer(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1382-1396)
transferFrom(address,address,uint256,bytes) should be declared external:
	- Synth.transferFrom(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1427-1445)
transferSenderPaysFee(address,uint256,bytes) should be declared external:
	- Synth.transferSenderPaysFee(address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1467-1480)
transferFromSenderPaysFee(address,address,uint256,bytes) should be declared external:
	- Synth.transferFromSenderPaysFee(address,address,uint256,bytes) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#1505-1521)
ratesForCurrencies(bytes4[]) should be declared external:
	- ExchangeRates.ratesForCurrencies(bytes4[]) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3152-3164)
lastRateUpdateTimesForCurrencies(bytes4[]) should be declared external:
	- ExchangeRates.lastRateUpdateTimesForCurrencies(bytes4[]) (0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol#3180-3192)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x15ed8dcd6d5d7c9e66a28cb70673389a5dc4fcf5.sol analyzed (20 contracts with 94 detectors), 153 result(s) found

real	0m12.662s
user	0m12.285s
sys	0m0.375s
