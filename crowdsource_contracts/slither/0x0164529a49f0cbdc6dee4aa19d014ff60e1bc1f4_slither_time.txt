'solc --version' running
'solc ./0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#631-637)
	External calls sending eth:
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	State variables written after the call(s):
	- _balances[from] = _balances[from].sub(amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#582)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
	- _balances[to] = _balances[to].add(transferAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#583)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
	- _balances[address(this)] = _balances[address(this)].add(taxAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#584)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

JinChan.sendERC20Tokens(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#663-667) ignores return value by erc20Token.transfer(deployer,balance) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#666)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	State variables written after the call(s):
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- _balances[account] = _balances[account].sub(value) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#511)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
Reentrancy in JinChan.burnTokens() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#495-499):
	External calls:
	- a() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#497)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	State variables written after the call(s):
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
		- _balances[account] = _balances[account].sub(value) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#511)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
		- nextLiquidityBurnTimeStamp = block.timestamp.add(burnFrequencynMinutes.mul(60)) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#486)
	JinChan.nextLiquidityBurnTimeStamp (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#371) can be used in cross function reentrancies:
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.burnTokens() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#495-499)
	- JinChan.burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#478-489)
	- JinChan.nextLiquidityBurnTimeStamp (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#371)
	- JinChan.openTrading() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#515-530)
Reentrancy in JinChan.disableBotProtectionPermanently() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#441-445):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#443)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	State variables written after the call(s):
	- isBotProtectionEnabled = false (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#444)
	JinChan.isBotProtectionEnabled (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#366) can be used in cross function reentrancies:
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.disableBotProtectionPermanently() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#441-445)
	- JinChan.isBotProtectionEnabled (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#366)
	- JinChan.openTrading() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#515-530)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
Reentrancy in JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600):
	External calls:
	- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	State variables written after the call(s):
	- _balances[holder] = _balances[holder].sub(amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#594)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
	- _balances[address(this)] = _balances[address(this)].add(amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#595)
	JinChan._balances (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#353) can be used in cross function reentrancies:
	- JinChan._burn(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#508-513)
	- JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586)
	- JinChan.balanceOf(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#402-404)
	- JinChan.constructor() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#377-384)
	- JinChan.snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#588-600)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

JinChan.openTrading() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#515-530) ignores return value by uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#519-525)
JinChan.openTrading() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#515-530) ignores return value by IERC20(marketPair).approve(address(uniswapV2Router),type()(uint256).max) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#526)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

JinChan.allowance(address,address).owner (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#411) shadows:
	- Ownable.owner() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#162-164) (function)
JinChan._approve(address,address,uint256).owner (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#536) shadows:
	- Ownable.owner() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#162-164) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

JinChan.setTaxFees(uint256,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#436-439) should emit an event for: 
	- buyFee = buy (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#437) 
	- sellFee = sell (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#438) 
JinChan.setBurnSettings(uint256,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#473-476) should emit an event for: 
	- burnFrequencynMinutes = frequencyInMinutes (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#474) 
	- burnRateInBasePoints = burnBasePoints (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#475) 
JinChan.setEthPriceToSwap(uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#652-654) should emit an event for: 
	- ethPriceToSwap = ethPriceToSwap_ (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#653) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

JinChan.numberOfSnipedBots() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#602-611) has external calls inside a loop: i < botSnipingMap.size() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#604)
JinChan.numberOfSnipedBots() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#602-611) has external calls inside a loop: holder = botSnipingMap.getKeyAtIndex(i) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#605)
JinChan.numberOfSnipedBots() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#602-611) has external calls inside a loop: timestamp = botSnipingMap.get(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#606)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	State variables written after the call(s):
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- inSwapAndLiquify = true (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#342)
		- inSwapAndLiquify = false (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#344)
Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#631-637)
	External calls sending eth:
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	State variables written after the call(s):
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- _allowances[owner][spender] = amount (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#540)
Reentrancy in JinChan.burnTokens() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#495-499):
	External calls:
	- a() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#497)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	State variables written after the call(s):
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
		- inSwapAndLiquify = true (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#342)
		- inSwapAndLiquify = false (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#344)
Reentrancy in JinChan.burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#478-489):
	External calls:
	- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	State variables written after the call(s):
	- nextLiquidityBurnTimeStamp = block.timestamp.add(burnFrequencynMinutes.mul(60)) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#486)
	- tokensBurnedSinceLaunch = tokensBurnedSinceLaunch.add(tokenBurnAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#485)
Reentrancy in JinChan.openTrading() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#515-530):
	External calls:
	- marketPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH()) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#518)
	- uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#519-525)
	- IERC20(marketPair).approve(address(uniswapV2Router),type()(uint256).max) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#526)
	External calls sending eth:
	- uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#519-525)
	State variables written after the call(s):
	- isBotProtectionEnabled = true (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#529)
	- nextLiquidityBurnTimeStamp = block.timestamp (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#528)
	- v2Pair = IUniswapV2Pair(marketPair) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#527)
Reentrancy in JinChan.transferFrom(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#420-424):
	External calls:
	- _transfer(sender,recipient,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#421)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#631-637)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
		- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#421)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#422)
		- _allowances[owner][spender] = amount (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#540)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	Event emitted after the call(s):
	- TokensBurned(tokenBurnAmount,nextLiquidityBurnTimeStamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#487)
		- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
	- Transfer(account,address(0),value) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#512)
		- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#631-637)
	External calls sending eth:
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#541)
		- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- snipeBalances() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#555)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#565)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#631-637)
	External calls sending eth:
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	Event emitted after the call(s):
	- Transfer(from,to,transferAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#585)
Reentrancy in JinChan.burnTokens() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#495-499):
	External calls:
	- a() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#497)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	Event emitted after the call(s):
	- TokensBurned(tokenBurnAmount,nextLiquidityBurnTimeStamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#487)
		- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
	- Transfer(account,address(0),value) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#512)
		- burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#498)
Reentrancy in JinChan.burnTokensFromLiquidityPool() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#478-489):
	External calls:
	- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
	Event emitted after the call(s):
	- TokensBurned(tokenBurnAmount,nextLiquidityBurnTimeStamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#487)
Reentrancy in JinChan.transferFrom(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#420-424):
	External calls:
	- _transfer(sender,recipient,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#421)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#631-637)
		- v2Pair.sync() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#484)
		- botSnipingMap.set(to,block.timestamp) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#556)
		- botSnipingMap.remove(holder) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#597)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#421)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#541)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#422)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

JinChan.burnTokens() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#495-499) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= nextLiquidityBurnTimeStamp,Next burn time is not due yet, be patient) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#496)
JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= nextLiquidityBurnTimeStamp && isBurnEnabled && ! isBotProtectionEnabled (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#564)
JinChan.numberOfSnipedBots() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#602-611) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= timestamp (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#607)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#91-100) uses assembly
	- INLINE ASM (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#98)
Address._functionCallWithValue(address,bytes,uint256,string) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#127-148) uses assembly
	- INLINE ASM (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#140-143)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Context._msgData() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#82-86) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

JinChan._tTotal (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#360) is set pre-construction with a non-constant function or state variable:
	- 333_333 * 10 ** _decimals
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.8.17 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ^0.8.17 (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#5)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#102-108):
	- (success,None) = recipient.call{value: amount}() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#106)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#127-148):
	- (success,returndata) = target.call{value: weiValue}(data) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#131)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#218) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#220) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#251) is not in mixedCase
Function IUniswapV2Router02.WETH() (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#335) is not in mixedCase
Parameter JinChan.enableDisableBurnToken(bool)._enabled (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#491) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#83)" inContext (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#76-87)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in JinChan._transfer(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#544-586):
	External calls:
	- swapTokensForEth(tokenAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#571)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	State variables written after the call(s):
	- _balances[from] = _balances[from].sub(amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#582)
	- _balances[to] = _balances[to].add(transferAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#583)
	- _balances[address(this)] = _balances[address(this)].add(taxAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#584)
	Event emitted after the call(s):
	- Transfer(from,to,transferAmount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#585)
Reentrancy in JinChan.transferFrom(address,address,uint256) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#420-424):
	External calls:
	- _transfer(sender,recipient,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#421)
		- address(feeOne).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#641)
		- address(feeTwo).transfer(halfShare) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#642)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#422)
		- _allowances[owner][spender] = amount (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#540)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#541)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#422)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

JinChan._decimals (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#359) should be constant 
JinChan._name (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#357) should be constant 
JinChan._symbol (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#358) should be constant 
JinChan.feeOne (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#351) should be constant 
JinChan.feeTwo (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#352) should be constant 
JinChan.uniswapV2Router (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#348) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

JinChan.botSnipingMap (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#347) should be immutable 
JinChan.deployer (0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol#364) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x0164529a49f0cbdc6dee4aa19d014ff60e1bc1f4.sol analyzed (10 contracts with 94 detectors), 54 result(s) found

real	0m2.879s
user	0m2.661s
sys	0m0.221s
