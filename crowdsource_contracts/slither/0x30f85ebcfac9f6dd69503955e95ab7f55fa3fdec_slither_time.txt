'solc --version' running
'solc ./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:81:5: Warning: Invoking events without "emit" prefix is deprecated.
    CreateSwap(now);
    ^-------------^
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:99:5: Warning: Invoking events without "emit" prefix is deprecated.
    CreateSwap(now);
    ^-------------^
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:124:5: Warning: Invoking events without "emit" prefix is deprecated.
    Withdraw();
    ^--------^
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:140:5: Warning: Invoking events without "emit" prefix is deprecated.
    Withdraw();
    ^--------^
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:161:5: Warning: Invoking events without "emit" prefix is deprecated.
    Refund();
    ^------^
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol:107:3: Warning: Function state mutability can be restricted to view
  function getTargetWallet(address tokenOwnerAddress) public returns (address) {
  ^ (Relevant source part starts here and spans across multiple lines).


ERC20 (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#32-35) has incorrect ERC20 function interface:ERC20.transfer(address,uint256) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

Reentrancy in EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82):
	External calls:
	- require(bool)(ERC20(_token).transferFrom(msg.sender,this,_value)) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#70)
	State variables written after the call(s):
	- swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#72-79)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
Reentrancy in EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100):
	External calls:
	- require(bool)(ERC20(_token).transferFrom(msg.sender,this,_value)) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#88)
	State variables written after the call(s):
	- swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#90-97)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
Reentrancy in EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162):
	External calls:
	- ERC20(swap.token).transfer(msg.sender,swap.balance) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#158)
	State variables written after the call(s):
	- clean(msg.sender,_participantAddress) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#159)
		- delete swaps[_ownerAddress][_participantAddress] (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#165)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
Reentrancy in EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125):
	External calls:
	- ERC20(swap.token).transfer(swap.targetWallet,swap.balance) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#119)
	State variables written after the call(s):
	- swaps[_ownerAddress][msg.sender].balance = 0 (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#121)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
	- swaps[_ownerAddress][msg.sender].secret = _secret (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#122)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
Reentrancy in EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141):
	External calls:
	- ERC20(swap.token).transfer(swap.targetWallet,swap.balance) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#135)
	State variables written after the call(s):
	- swaps[msg.sender][participantAddress].balance = 0 (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#137)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
	- swaps[msg.sender][participantAddress].secret = _secret (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#138)
	EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54) can be used in cross function reentrancies:
	- EthTokenToSmthSwaps.clean(address,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164-166)
	- EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82)
	- EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100)
	- EthTokenToSmthSwaps.getBalance(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101-103)
	- EthTokenToSmthSwaps.getSecret(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144-146)
	- EthTokenToSmthSwaps.getTargetWallet(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#107-109)
	- EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162)
	- EthTokenToSmthSwaps.swaps (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#54)
	- EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125)
	- EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Reentrancy in EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67-82):
	External calls:
	- require(bool)(ERC20(_token).transferFrom(msg.sender,this,_value)) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#70)
	Event emitted after the call(s):
	- CreateSwap(now) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#81)
Reentrancy in EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85-100):
	External calls:
	- require(bool)(ERC20(_token).transferFrom(msg.sender,this,_value)) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#88)
	Event emitted after the call(s):
	- CreateSwap(now) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#99)
Reentrancy in EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162):
	External calls:
	- ERC20(swap.token).transfer(msg.sender,swap.balance) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#158)
	Event emitted after the call(s):
	- Refund() (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#161)
Reentrancy in EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125):
	External calls:
	- ERC20(swap.token).transfer(swap.targetWallet,swap.balance) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#119)
	Event emitted after the call(s):
	- Withdraw() (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#124)
Reentrancy in EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141):
	External calls:
	- ERC20(swap.token).transfer(swap.targetWallet,swap.balance) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#135)
	Event emitted after the call(s):
	- Withdraw() (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#140)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

EthTokenToSmthSwaps.withdraw(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112-125) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(swap.createdAt.add(SafeTime) > now) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#117)
EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128-141) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(swap.createdAt.add(SafeTime) > now) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#133)
EthTokenToSmthSwaps.refund(address) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152-162) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(swap.createdAt.add(SafeTime) < now) (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#156)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Version constraint ^0.4.23 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- ^0.4.23 (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#1)
solc-0.4.23 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address)._secretHash (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address)._participantAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address)._value (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwap(bytes20,address,uint256,address)._token (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#67) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address)._secretHash (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address)._participantAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address)._targetWallet (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address)._value (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85) is not in mixedCase
Parameter EthTokenToSmthSwaps.createSwapTarget(bytes20,address,address,uint256,address)._token (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#85) is not in mixedCase
Parameter EthTokenToSmthSwaps.getBalance(address)._ownerAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#101) is not in mixedCase
Parameter EthTokenToSmthSwaps.withdraw(bytes32,address)._secret (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112) is not in mixedCase
Parameter EthTokenToSmthSwaps.withdraw(bytes32,address)._ownerAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#112) is not in mixedCase
Parameter EthTokenToSmthSwaps.withdrawNoMoney(bytes32,address)._secret (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#128) is not in mixedCase
Parameter EthTokenToSmthSwaps.getSecret(address)._participantAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#144) is not in mixedCase
Parameter EthTokenToSmthSwaps.refund(address)._participantAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#152) is not in mixedCase
Parameter EthTokenToSmthSwaps.clean(address,address)._ownerAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164) is not in mixedCase
Parameter EthTokenToSmthSwaps.clean(address,address)._participantAddress (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#164) is not in mixedCase
Variable EthTokenToSmthSwaps.SafeTime (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#42) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

EthTokenToSmthSwaps.SafeTime (0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol#42) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol analyzed (3 contracts with 94 detectors), 35 result(s) found

real	0m1.427s
user	0m1.255s
sys	0m0.175s
