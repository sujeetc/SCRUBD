'solc --version' running
'solc ./0x652729577d5c5a13060f81c256aa79adb264f188.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetAmount)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#179)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetBalance)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#188)
	External calls sending eth:
	- msg.sender.transfer(weiAmount.sub(weiExpend)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#191)
	State variables written after the call(s):
	- calcRatioNext() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#199)
		- ratioNext = ethPrice.mul(10 ** 6).div(vnetPriceStart.add(vnetPriceTarget.sub(vnetPriceStart).mul(vnetSold).div(vnetSupply))) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#210)
	VNETTokenPreSale.ratioNext (0x652729577d5c5a13060f81c256aa79adb264f188.sol#133) can be used in cross function reentrancies:
	- VNETTokenPreSale.calcRatioNext() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#209-211)
	- VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204)
	- VNETTokenPreSale.ratioNext (0x652729577d5c5a13060f81c256aa79adb264f188.sol#133)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetAmount)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#179)
	State variables written after the call(s):
	- vnetSold = vnetSold.add(vnetAmount) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#181)
	VNETTokenPreSale.vnetSold (0x652729577d5c5a13060f81c256aa79adb264f188.sol#135) can be used in cross function reentrancies:
	- VNETTokenPreSale.calcRatioNext() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#209-211)
	- VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204)
	- VNETTokenPreSale.vnetSold (0x652729577d5c5a13060f81c256aa79adb264f188.sol#135)
Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetBalance)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#188)
	State variables written after the call(s):
	- vnetSold = vnetSold.add(vnetBalance) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#190)
	VNETTokenPreSale.vnetSold (0x652729577d5c5a13060f81c256aa79adb264f188.sol#135) can be used in cross function reentrancies:
	- VNETTokenPreSale.calcRatioNext() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#209-211)
	- VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204)
	- VNETTokenPreSale.vnetSold (0x652729577d5c5a13060f81c256aa79adb264f188.sol#135)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

VNETTokenPreSale.updateWallet(address)._wallet (0x652729577d5c5a13060f81c256aa79adb264f188.sol#216) lacks a zero-check on :
		- wallet = _wallet (0x652729577d5c5a13060f81c256aa79adb264f188.sol#217)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetAmount)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#179)
	State variables written after the call(s):
	- welfare[msg.sender] = true (0x652729577d5c5a13060f81c256aa79adb264f188.sol#183)
Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetBalance)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#188)
	External calls sending eth:
	- msg.sender.transfer(weiAmount.sub(weiExpend)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#191)
	State variables written after the call(s):
	- welfare[msg.sender] = true (0x652729577d5c5a13060f81c256aa79adb264f188.sol#193)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetAmount)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#179)
	Event emitted after the call(s):
	- BuyVNET(msg.sender,ratioNext,vnetAmount,weiAmount) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#180)
	- Welfare(msg.sender) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#184)
Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetBalance)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#188)
	Event emitted after the call(s):
	- BuyVNET(msg.sender,ratioNext,vnetBalance,weiExpend) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#189)
Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- vnetBalance = vnetToken.balanceOf(address(this)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#165)
	- assert(bool)(vnetToken.transfer(msg.sender,vnetBalance)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#188)
	External calls sending eth:
	- msg.sender.transfer(weiAmount.sub(weiExpend)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#191)
	Event emitted after the call(s):
	- Welfare(msg.sender) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#194)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Version constraint ^0.4.25 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x.
It is used by:
	- ^0.4.25 (0x652729577d5c5a13060f81c256aa79adb264f188.sol#1)
solc-0.4.25 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Ownable.transferOwnership(address)._newOwner (0x652729577d5c5a13060f81c256aa79adb264f188.sol#58) is not in mixedCase
Parameter Ownable.rescueTokens(ERC20Basic,address)._token (0x652729577d5c5a13060f81c256aa79adb264f188.sol#69) is not in mixedCase
Parameter Ownable.rescueTokens(ERC20Basic,address)._receiver (0x652729577d5c5a13060f81c256aa79adb264f188.sol#69) is not in mixedCase
Parameter VNETTokenPreSale.updateWallet(address)._wallet (0x652729577d5c5a13060f81c256aa79adb264f188.sol#216) is not in mixedCase
Parameter VNETTokenPreSale.updateEthPrice(uint256)._ethPrice (0x652729577d5c5a13060f81c256aa79adb264f188.sol#223) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in VNETTokenPreSale.fallback() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#163-204):
	External calls:
	- msg.sender.transfer(weiAmount.sub(weiExpend)) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#191)
	State variables written after the call(s):
	- calcRatioNext() (0x652729577d5c5a13060f81c256aa79adb264f188.sol#199)
		- ratioNext = ethPrice.mul(10 ** 6).div(vnetPriceStart.add(vnetPriceTarget.sub(vnetPriceStart).mul(vnetSold).div(vnetSupply))) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#210)
	- welfare[msg.sender] = true (0x652729577d5c5a13060f81c256aa79adb264f188.sol#193)
	Event emitted after the call(s):
	- Welfare(msg.sender) (0x652729577d5c5a13060f81c256aa79adb264f188.sol#194)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

VNETTokenPreSale.description (0x652729577d5c5a13060f81c256aa79adb264f188.sol#129) should be constant 
VNETTokenPreSale.vnetPriceStart (0x652729577d5c5a13060f81c256aa79adb264f188.sol#137) should be constant 
VNETTokenPreSale.vnetPriceTarget (0x652729577d5c5a13060f81c256aa79adb264f188.sol#138) should be constant 
VNETTokenPreSale.vnetSupply (0x652729577d5c5a13060f81c256aa79adb264f188.sol#136) should be constant 
VNETTokenPreSale.weiMaximum (0x652729577d5c5a13060f81c256aa79adb264f188.sol#140) should be constant 
VNETTokenPreSale.weiMinimum (0x652729577d5c5a13060f81c256aa79adb264f188.sol#139) should be constant 
VNETTokenPreSale.weiWelfare (0x652729577d5c5a13060f81c256aa79adb264f188.sol#141) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x652729577d5c5a13060f81c256aa79adb264f188.sol analyzed (4 contracts with 94 detectors), 24 result(s) found

real	0m1.633s
user	0m1.414s
sys	0m0.221s
