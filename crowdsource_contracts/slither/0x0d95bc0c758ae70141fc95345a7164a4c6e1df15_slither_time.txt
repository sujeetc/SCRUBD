'solc --version' running
'solc ./0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824):
	External calls:
	- swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#800)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	External calls sending eth:
	- swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#800)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	State variables written after the call(s):
	- super._transfer(from,address(this),fees) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#816)
		- _balances[from] = fromBalance - amount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#142)
		- _balances[to] += amount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#144)
	ERC20._balances (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#50) can be used in cross function reentrancies:
	- ERC20._mint(address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#151-161)
	- ERC20._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#129-149)
	- ERC20.balanceOf(address) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#81-83)
	- super._transfer(from,to,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#822)
		- _balances[from] = fromBalance - amount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#142)
		- _balances[to] += amount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#144)
	ERC20._balances (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#50) can be used in cross function reentrancies:
	- ERC20._mint(address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#151-161)
	- ERC20._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#129-149)
	- ERC20.balanceOf(address) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#81-83)
	- _swapping = false (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#801)
	Lagarde._swapping (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#576) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- _tokensForLiquidity += fees * _liquidityFee / totalFees (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#813)
	Lagarde._tokensForLiquidity (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#598) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885)
	- _tokensForMarketing += fees * _marketingFee / totalFees (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#814)
	Lagarde._tokensForMarketing (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#597) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885)
Reentrancy in Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663):
	External calls:
	- _addLp(_lpSupply,msg.value) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#655)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	External calls sending eth:
	- _addLp(_lpSupply,msg.value) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#655)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	State variables written after the call(s):
	- _launchBlock = block.number (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#662)
	Lagarde._launchBlock (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#578) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663)
	- _launchTime = block.timestamp (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#661)
	Lagarde._launchTime (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#577) can be used in cross function reentrancies:
	- Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663)
	- tradingActive = true (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#660)
	Lagarde.tradingActive (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#587) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663)
	- Lagarde.tradingActive (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#587)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Lagarde._isBlacklisted (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#575) is never initialized. It is used in:
	- Lagarde.isSniper(address) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#732-734)
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824) performs a multiplication on the result of a division:
	- fees = amount.mul(totalFees).div(100) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#812)
	- _tokensForLiquidity += fees * _liquidityFee / totalFees (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#813)
Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824) performs a multiplication on the result of a division:
	- fees = amount.mul(totalFees).div(100) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#812)
	- _tokensForMarketing += fees * _marketingFee / totalFees (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#814)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reentrancy in Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885):
	External calls:
	- _swapTokensForEth(amountToSwapForETH) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#868)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
	State variables written after the call(s):
	- _tokensForLiquidity = 0 (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#875)
	Lagarde._tokensForLiquidity (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#598) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885)
	- _tokensForMarketing = 0 (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#876)
	Lagarde._tokensForMarketing (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#597) can be used in cross function reentrancies:
	- Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824)
	- Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824) uses tx.origin for authorization: require(bool,string)(_holderLastTransferTimestamp[tx.origin] < block.number,_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#769)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-usage-of-txorigin

Lagarde._addLp(uint256,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#665-675) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
Lagarde._addLiquidity(uint256,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#842-853) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Lagarde.swapBack().success (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878) is written in both
	(success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	success = false (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#879)
Lagarde.forceSwap().success (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#892) is written in both
	(success,None) = address(feeWallet).call{value: address(this).balance}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#892)
	success = false (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#893)
Lagarde.forceSend().success (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#897) is written in both
	(success,None) = address(feeWallet).call{value: address(this).balance}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#897)
	success = false (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#898)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#write-after-write

Lagarde.constructor().totalSupply (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#624) shadows:
	- ERC20.totalSupply() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#77-79) (function)
	- IERC20.totalSupply() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#13) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Lagarde.updateSwapTokensAtAmount(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#687-692) should emit an event for: 
	- swapTokensAtAmount = newAmount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#690) 
Lagarde.changeFeeSettings(uint256,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#698-703) should emit an event for: 
	- _marketingFee = marketingFee (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#699) 
	- _liquidityFee = liquidityFee (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#700) 
	- totalFees = _marketingFee + _liquidityFee (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#701) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Lagarde.updateFeeWallet(address).newWallet (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#723) lacks a zero-check on :
		- feeWallet = newWallet (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#725)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663):
	External calls:
	- _addLp(_lpSupply,msg.value) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#655)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	External calls sending eth:
	- _addLp(_lpSupply,msg.value) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#655)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	State variables written after the call(s):
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- _allowances[owner][spender] = amount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#188)
Reentrancy in Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885):
	External calls:
	- _swapTokensForEth(amountToSwapForETH) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#868)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
	- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	- _addLiquidity(liquidityTokens,ethForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#882)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
	External calls sending eth:
	- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	- _addLiquidity(liquidityTokens,ethForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#882)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
	State variables written after the call(s):
	- _addLiquidity(liquidityTokens,ethForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#882)
		- _allowances[owner][spender] = amount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#188)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824):
	External calls:
	- swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#800)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	External calls sending eth:
	- swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#800)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	Event emitted after the call(s):
	- Transfer(from,to,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#146)
		- super._transfer(from,to,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#822)
	- Transfer(from,to,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#146)
		- super._transfer(from,address(this),fees) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#816)
Reentrancy in Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663):
	External calls:
	- _addLp(_lpSupply,msg.value) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#655)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	External calls sending eth:
	- _addLp(_lpSupply,msg.value) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#655)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#667-674)
	- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
		- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#189)
		- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
	- SwapAndLiquify(amountToSwapForETH,ethForLiquidity,_tokensForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#883)
		- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
	- Transfer(from,to,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#146)
		- _transfer(address(this),owner(),_leftover) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#658)
Reentrancy in Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885):
	External calls:
	- _swapTokensForEth(amountToSwapForETH) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#868)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#833-839)
	- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	- _addLiquidity(liquidityTokens,ethForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#882)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
	External calls sending eth:
	- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
	- _addLiquidity(liquidityTokens,ethForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#882)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#845-852)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#189)
		- _addLiquidity(liquidityTokens,ethForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#882)
	- SwapAndLiquify(amountToSwapForETH,ethForLiquidity,_tokensForLiquidity) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#883)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Lagarde.establishTrading(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647-663) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_launchTime == 0,already launched) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#649)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Lagarde._transfer(address,address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#736-824) has a high cyclomatic complexity (15).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Context._msgData() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#44-46) is never used and should be removed
ERC20._burn(address,uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#163-178) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint ^0.8.17 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ^0.8.17 (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#5)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Lagarde.swapBack() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#855-885):
	- (success,None) = address(feeWallet).call{value: ethForMarketing}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#878)
Low level call in Lagarde.forceSwap() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#889-894):
	- (success,None) = address(feeWallet).call{value: address(this).balance}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#892)
Low level call in Lagarde.forceSend() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#896-899):
	- (success,None) = address(feeWallet).call{value: address(this).balance}() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#897)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#362) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#363) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#380) is not in mixedCase
Function IUniswapV2Router01.WETH() (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#401) is not in mixedCase
Event Lagarde.feeWalletUpdated(address,address) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#608) is not in CapWords
Parameter Lagarde.establishTrading(uint256)._percent (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#647) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Lagarde.updateSwapTokensAtAmount(uint256) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#687-692) uses literals with too many digits:
	- require(bool,string)(newAmount >= totalSupply() * 1 / 100000,Swap amount cannot be lower than 0.001% total supply.) (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#688)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Lagarde.maxTransactionAmount (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#582) should be immutable 
Lagarde.maxWallet (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#584) should be immutable 
Lagarde.uniswapV2Pair (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#573) should be immutable 
Lagarde.uniswapV2Router (0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol#572) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x0d95bc0c758ae70141fc95345a7164a4c6e1df15.sol analyzed (12 contracts with 94 detectors), 40 result(s) found

real	0m3.836s
user	0m3.552s
sys	0m0.284s
