'solc --version' running
'solc ./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1157:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function multiowned(address[] _owners, uint _required)
    ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1298:9: Warning: Use of the "var" keyword is deprecated.
        var pending = m_multiOwnedPending[_operation];
        ^---------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1337:9: Warning: Use of the "var" keyword is deprecated.
        var pending = m_multiOwnedPending[_operation];
        ^---------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1430:9: Warning: Use of the "var" keyword is deprecated.
        var pending = m_multiOwnedPending[_operation];
        ^---------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1509:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function EthPriceDependent(address[] _initialOwners,  uint _consensus, bool _production)
    ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1806:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function BoomstarterPresale(address[] _owners, address _token,
    ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1200:9: Warning: Invoking events without "emit" prefix is deprecated.
        OwnerChanged(_from, _to);
        ^----------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1220:9: Warning: Invoking events without "emit" prefix is deprecated.
        OwnerAdded(_owner);
        ^----------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1243:9: Warning: Invoking events without "emit" prefix is deprecated.
        OwnerRemoved(_owner);
        ^------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1256:9: Warning: Invoking events without "emit" prefix is deprecated.
        RequirementChanged(_newRequired);
        ^------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1307:9: Warning: Invoking events without "emit" prefix is deprecated.
        Revoke(msg.sender, _operation);
        ^----------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1360:17: Warning: Invoking events without "emit" prefix is deprecated.
                FinalConfirmation(msg.sender, _operation);
                ^---------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1369:17: Warning: Invoking events without "emit" prefix is deprecated.
                Confirmation(msg.sender, _operation);
                ^----------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1533:13: Warning: Invoking events without "emit" prefix is deprecated.
            NewOraclizeQuery("Oraclize request fail. Previous one still pending");
            ^-------------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1534:47: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        } else if (oraclize_getPrice("URL") > this.balance) {
                                              ^----------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1535:13: Warning: Invoking events without "emit" prefix is deprecated.
            NewOraclizeQuery("Oraclize request fail. Not enough ether");
            ^---------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1544:13: Warning: Invoking events without "emit" prefix is deprecated.
            NewOraclizeQuery("Oraclize query was sent");
            ^-----------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1557:13: Warning: Invoking events without "emit" prefix is deprecated.
            NewETHPrice(m_ETHPriceInCents);
            ^----------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1559:13: Warning: Invoking events without "emit" prefix is deprecated.
            ETHPriceOutOfBounds(newPrice);
            ^---------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1595:9: Warning: Invoking events without "emit" prefix is deprecated.
        NewETHPrice(m_ETHPriceInCents);
        ^----------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1675:5: Warning: Functions in interfaces should be declared external.
    function getOwner(uint ownerIndex) public view returns (address);
    ^---------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1676:5: Warning: Functions in interfaces should be declared external.
    function getOwners() public view returns (address[]);
    ^---------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1677:5: Warning: Functions in interfaces should be declared external.
    function isOwner(address _addr) public view returns (bool);
    ^---------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1683:5: Warning: Functions in interfaces should be declared external.
    function totalSupply() public view returns (uint256);
    ^---------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1684:5: Warning: Functions in interfaces should be declared external.
    function balanceOf(address who) public view returns (uint256);
    ^------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1685:5: Warning: Functions in interfaces should be declared external.
    function transfer(address to, uint256 value) public returns (bool);
    ^-----------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1688:5: Warning: Functions in interfaces should be declared external.
    function allowance(address owner, address spender) public view returns (uint256);
    ^-------------------------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1689:5: Warning: Functions in interfaces should be declared external.
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    ^-----------------------------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1690:5: Warning: Functions in interfaces should be declared external.
    function approve(address spender, uint256 value) public returns (bool);
    ^---------------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1692:5: Warning: Functions in interfaces should be declared external.
    function name() public view returns (string);
    ^-------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1693:5: Warning: Functions in interfaces should be declared external.
    function symbol() public view returns (string);
    ^---------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1694:5: Warning: Functions in interfaces should be declared external.
    function decimals() public view returns (uint8);
    ^----------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1697:5: Warning: Functions in interfaces should be declared external.
    function burn(uint256 _amount) public returns (bool);
    ^---------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1700:5: Warning: Functions in interfaces should be declared external.
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public;
    ^---------------------------------------------------------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1894:9: Warning: Invoking events without "emit" prefix is deprecated.
        FundTransfer(investor, payment, true);
        ^-----------------------------------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1914:26: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        next.topUp.value(this.balance)();
                         ^----------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1549:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function __callback(bytes32 myid, string result, bytes proof) public {
                        ^----------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1549:54: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function __callback(bytes32 myid, string result, bytes proof) public {
                                                     ^---------^
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1823:5: Warning: No visibility specified. Defaulting to "public". 
    function() payable {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:131:5: Warning: Function state mutability can be restricted to pure
    function __callback(bytes32 myid, string result, bytes proof) public {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1469:3: Warning: Function state mutability can be restricted to pure
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1475:3: Warning: Function state mutability can be restricted to pure
  function div(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1482:3: Warning: Function state mutability can be restricted to pure
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol:1487:3: Warning: Function state mutability can be restricted to pure
  function add(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).


Reentrancy in EthPriceDependent.updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1528-1546):
	External calls:
	- oraclize_query(m_ETHPriceUpdateInterval,URL,json(https://api.coinmarketcap.com/v1/ticker/ethereum/?convert=USD).0.price_usd,m_callbackGas) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1537-1542)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#155)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(m_ETHPriceUpdateInterval,URL,json(https://api.coinmarketcap.com/v1/ticker/ethereum/?convert=USD).0.price_usd,m_callbackGas) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1537-1542)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
	State variables written after the call(s):
	- m_ETHPriceLastUpdateRequest = getTime() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1543)
	EthPriceDependent.m_ETHPriceLastUpdateRequest (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1648) can be used in cross function reentrancies:
	- EthPriceDependent.m_ETHPriceLastUpdateRequest (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1648)
	- EthPriceDependent.updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1528-1546)
	- EthPriceDependent.updateRequestExpired() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1631-1633)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

BoomstarterPresale.buy() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1833-1895) ignores return value by m_token.transfer(investor,tokenAmount) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1888)
BoomstarterPresale.finishSale() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1903-1919) ignores return value by m_token.transfer(m_nextSale,m_token.balanceOf(this)) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1916)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

usingOraclize.getCodeSize(address) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#531-535) is declared view but contains assembly code
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#956-976) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

BoomstarterPresale.buy() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1833-1895) performs a multiplication on the result of a division:
	- tokenAmount = payment.mul(m_ETHPriceInCents).div(centsPerToken) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1868)
	- ethPerToken = centsPerToken.mul(1000000000000000000).div(m_ETHPriceInCents) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1877)
	- payment = ethPerToken.mul(tokenAmount).div(1000000000000000000) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1880)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reentrancy in usingOraclize.oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#74-82):
	External calls:
	- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
	- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	State variables written after the call(s):
	- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

BoomstarterPresale.buy().investor (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1843) lacks a zero-check on :
		- investor.transfer(change) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1892)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Modifier multiowned.onlymanyowners(bytes32) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1119-1126) does not always execute _; or revert
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-modifier

Reentrancy in EthPriceDependent.__callback(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1549-1563):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1550)
		- oraclize.cbAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#518)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	State variables written after the call(s):
	- m_ETHPriceInCents = newPrice (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1555)
	- m_ETHPriceLastUpdate = getTime() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1556)
Reentrancy in EthPriceDependent.__callback(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1549-1563):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1550)
		- oraclize.cbAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#518)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
		- oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#137)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#155)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
	State variables written after the call(s):
	- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766-809):
	External calls:
	- sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#774)
		- oraclize.randomDS_getSessionPubKeyHash() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#528)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	- queryId = oraclize_query(random,args,_customGasLimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#790)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#369)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	External calls sending eth:
	- queryId = oraclize_query(random,args,_customGasLimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#790)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	State variables written after the call(s):
	- queryId = oraclize_query(random,args,_customGasLimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#790)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
	- oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2])) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#807)
		- oraclize_randomDS_args[queryId] = commitment (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#812)
Reentrancy in usingOraclize.oraclize_query(string,string[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#208-212):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#211)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#185)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#208)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#211)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#211)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#213-217):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#216)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#191)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#213)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#216)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#216)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#218-222):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#221)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#197)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#218)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#221)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#221)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#223-227):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#226)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#203)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#223)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#226)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#226)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#229-234):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#233)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#185)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#229)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#233)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#233)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#235-240):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#239)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#191)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#235)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#239)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#239)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#241-246):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#245)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#197)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#241)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#245)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#245)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#247-252):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#251)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#203)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#247)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#251)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#251)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#253-259):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#258)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#185)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#253)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#258)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#258)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#260-266):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#265)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#191)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#260)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#265)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#265)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#267-273):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#272)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#197)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#267)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#272)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#272)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#274-280):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#279)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#203)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#274)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#279)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#279)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#282-289):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#288)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#185)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#282)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#288)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#288)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#290-297):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#296)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#191)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#290)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#296)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#296)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#298-305):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#304)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#197)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#298)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#304)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#304)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#306-313):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#312)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#203)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#306)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#312)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#312)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#314-322):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#321)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#185)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#314)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#321)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#188)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#321)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#323-331):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#330)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#191)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#323)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#330)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#194)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#330)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#332-340):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#339)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#197)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#332)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#339)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#200)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#339)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,string[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#341-349):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#348)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#203)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#341)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#348)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#206)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#348)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#374-378):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#377)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#351)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#374)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#377)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#377)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#379-383):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#382)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#357)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#379)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#382)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#382)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#384-388):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#387)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#363)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#384)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#387)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#387)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#389-393):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#392)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#369)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#389)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#392)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#392)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#395-400):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#399)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#351)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#395)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#399)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#399)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#401-406):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#405)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#357)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#401)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#405)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#405)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#407-412):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#411)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#363)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#407)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#411)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#411)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#413-418):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#417)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#369)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#413)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#417)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#417)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#419-425):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#424)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#351)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#419)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#424)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#424)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#426-432):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#431)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#357)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#426)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#431)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#431)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#433-439):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#438)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#363)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#433)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#438)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#438)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#440-446):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#445)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#369)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#440)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#445)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#445)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#448-455):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#454)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#351)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#448)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#454)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#454)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#456-463):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#462)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#357)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#456)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#462)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#462)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#464-471):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#470)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#363)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#464)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#470)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#470)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#472-479):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#478)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#369)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#472)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#478)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#478)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#480-488):
	External calls:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#487)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#351)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#480)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#487)
		- oraclize.queryN.value(price)(0,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#354)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#487)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#489-497):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#496)
		- price = oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#357)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#489)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#496)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#360)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#496)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#498-506):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#505)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#363)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#498)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#505)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#366)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#505)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#507-515):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#514)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#369)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	- oraclizeAPI() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#507)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#514)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#372)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#514)
		- oraclize_network_name = _network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#759)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in EthPriceDependent.__callback(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1549-1563):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1550)
		- oraclize.cbAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#518)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	Event emitted after the call(s):
	- ETHPriceOutOfBounds(newPrice) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1559)
	- NewETHPrice(m_ETHPriceInCents) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1557)
Reentrancy in EthPriceDependent.__callback(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1549-1563):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1550)
		- oraclize.cbAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#518)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
		- oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#137)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#155)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
	Event emitted after the call(s):
	- NewOraclizeQuery(Oraclize request fail. Previous one still pending) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1533)
		- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
	- NewOraclizeQuery(Oraclize request fail. Not enough ether) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1535)
		- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
	- NewOraclizeQuery(Oraclize query was sent) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1544)
		- updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1562)
Reentrancy in EthPriceDependent.updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1528-1546):
	External calls:
	- oraclize_getPrice(URL) > this.balance (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1534)
		- oraclize.getPrice(datasource) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#137)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	Event emitted after the call(s):
	- NewOraclizeQuery(Oraclize request fail. Not enough ether) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1535)
Reentrancy in EthPriceDependent.updateETHPriceInCents() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1528-1546):
	External calls:
	- oraclize_query(m_ETHPriceUpdateInterval,URL,json(https://api.coinmarketcap.com/v1/ticker/ethereum/?convert=USD).0.price_usd,m_callbackGas) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1537-1542)
		- price = oraclize.getPrice(datasource,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#155)
		- address(oraclize) != OAR.getAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#78)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
		- oraclize = OraclizeI(OAR.getAddress()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#79)
	External calls sending eth:
	- oraclize_query(m_ETHPriceUpdateInterval,URL,json(https://api.coinmarketcap.com/v1/ticker/ethereum/?convert=USD).0.price_usd,m_callbackGas) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1537-1542)
		- oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#157)
	Event emitted after the call(s):
	- NewOraclizeQuery(Oraclize query was sent) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1544)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

EthPriceDependent.setETHPriceManually(uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1586-1596) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(priceExpired() || updateRequestExpired()) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1592)
EthPriceDependent.priceExpired() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1624-1626) uses timestamp for comparisons
	Dangerous comparisons:
	- (getTime() > m_ETHPriceLastUpdate + 2 * m_ETHPriceUpdateInterval) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1625)
EthPriceDependent.updateRequestExpired() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1631-1633) uses timestamp for comparisons
	Dangerous comparisons:
	- ((getTime() + m_leeway) >= (m_ETHPriceLastUpdateRequest + m_ETHPriceUpdateInterval)) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1632)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

usingOraclize.getCodeSize(address) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#531-535) uses assembly
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#532-535)
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766-809) uses assembly
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#775-781)
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#782-786)
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#794-807)
usingOraclize.verifySig(bytes32,bytes,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#818-844) uses assembly
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#832-838)
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#956-976) uses assembly
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#967-971)
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#980-1005) uses assembly
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#991-1004)
usingOraclize.ecrecovery(bytes32,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1008-1046) uses assembly
	- INLINE ASM (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1019-1039)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#846-879) compares to a boolean constant:
	-sigok == false (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#863)
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#891-899) compares to a boolean constant:
	-proofVerified == false (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#896)
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#913-953) compares to a boolean constant:
	-oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#948)
BoomstarterPresale.onlyIfSaleIsActive() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1781-1784) compares to a boolean constant:
	-require(bool)(m_active == true) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1782)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

3 different versions of Solidity are used:
	- Version constraint 0.4.23 is used by:
		-0.4.23 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1)
	- Version constraint ^0.4.18 is used by:
		-^0.4.18 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#36)
	- Version constraint ^0.4.15 is used by:
		-^0.4.15 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1074)
		-^0.4.15 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1721)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

usingOraclize.ba2cbor(bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#714-754) is never used and should be removed
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#956-976) is never used and should be removed
usingOraclize.ecrecovery(bytes32,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1008-1046) is never used and should be removed
usingOraclize.indexOf(string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#575-600) is never used and should be removed
usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#901-911) is never used and should be removed
usingOraclize.oraclize_getNetworkName() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#762-764) is never used and should be removed
usingOraclize.oraclize_getPrice(string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#140-142) is never used and should be removed
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766-809) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#374-378) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#389-393) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#395-400) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#413-418) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#419-425) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#440-446) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#448-455) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#472-479) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#480-488) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#507-515) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#350-355) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#368-373) is never used and should be removed
usingOraclize.oraclize_query(string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#144-148) is never used and should be removed
usingOraclize.oraclize_query(string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#164-168) is never used and should be removed
usingOraclize.oraclize_query(string,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#179-183) is never used and should be removed
usingOraclize.oraclize_query(string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#159-163) is never used and should be removed
usingOraclize.oraclize_query(string,string[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#208-212) is never used and should be removed
usingOraclize.oraclize_query(string,string[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#223-227) is never used and should be removed
usingOraclize.oraclize_query(string,string[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#229-234) is never used and should be removed
usingOraclize.oraclize_query(string,string[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#247-252) is never used and should be removed
usingOraclize.oraclize_query(string,string[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#253-259) is never used and should be removed
usingOraclize.oraclize_query(string,string[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#274-280) is never used and should be removed
usingOraclize.oraclize_query(string,string[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#282-289) is never used and should be removed
usingOraclize.oraclize_query(string,string[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#306-313) is never used and should be removed
usingOraclize.oraclize_query(string,string[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#314-322) is never used and should be removed
usingOraclize.oraclize_query(string,string[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#341-349) is never used and should be removed
usingOraclize.oraclize_query(string,string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#184-189) is never used and should be removed
usingOraclize.oraclize_query(string,string[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#202-207) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#379-383) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#384-388) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#401-406) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#407-412) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#426-432) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#433-439) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#456-463) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#464-471) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#489-497) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#498-506) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#356-361) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#362-367) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#149-153) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#169-173) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#174-178) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#213-217) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#218-222) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#235-240) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#241-246) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#260-266) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#267-273) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#290-297) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#298-305) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#323-331) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#332-340) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#190-195) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#196-201) is never used and should be removed
usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#527-529) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#913-953) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#891-899) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#846-879) is never used and should be removed
usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#811-813) is never used and should be removed
usingOraclize.parseAddr(string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#537-555) is never used and should be removed
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#980-1005) is never used and should be removed
usingOraclize.strCompare(string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#557-573) is never used and should be removed
usingOraclize.strConcat(string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#627-629) is never used and should be removed
usingOraclize.strConcat(string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#623-625) is never used and should be removed
usingOraclize.strConcat(string,string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#619-621) is never used and should be removed
usingOraclize.strConcat(string,string,string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#602-617) is never used and should be removed
usingOraclize.stra2cbor(string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#672-712) is never used and should be removed
usingOraclize.uint2str(uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#655-670) is never used and should be removed
usingOraclize.verifySig(bytes32,bytes,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#818-844) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint 0.4.23 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- 0.4.23 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1)
Version constraint ^0.4.18 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.18 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#36)
Version constraint ^0.4.15 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- NestedArrayFunctionCallDecoder
	- ZeroFunctionSelector.
It is used by:
	- ^0.4.15 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1074)
	- ^0.4.15 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1721)
solc-0.4.23 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function OraclizeI.query_withGasLimit(uint256,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#41) is not in mixedCase
Function OraclizeI.query2_withGasLimit(uint256,string,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#43) is not in mixedCase
Function OraclizeI.queryN_withGasLimit(uint256,string,bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#45) is not in mixedCase
Function OraclizeI.randomDS_getSessionPubKeyHash() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#50) is not in mixedCase
Contract usingOraclize (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#55-1048) is not in CapWords
Function usingOraclize.oraclize_setNetwork(uint8) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#88-91) is not in mixedCase
Function usingOraclize.oraclize_setNetwork() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#92-126) is not in mixedCase
Function usingOraclize.__callback(bytes32,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#128-130) is not in mixedCase
Function usingOraclize.__callback(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#131-134) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#136-138) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#140-142) is not in mixedCase
Function usingOraclize.oraclize_query(string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#144-148) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#149-153) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#154-158) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#159-163) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#164-168) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#169-173) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#174-178) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#179-183) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#184-189) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#190-195) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#196-201) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#202-207) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#208-212) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#213-217) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#218-222) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#223-227) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#229-234) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#235-240) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#241-246) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#247-252) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#253-259) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#260-266) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#267-273) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#274-280) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#282-289) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#290-297) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#298-305) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#306-313) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#314-322) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#323-331) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#332-340) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#341-349) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#350-355) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#356-361) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#362-367) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#368-373) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#374-378) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#379-383) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#384-388) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#389-393) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#395-400) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#401-406) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#407-412) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#413-418) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#419-425) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#426-432) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#433-439) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#440-446) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#448-455) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#456-463) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#464-471) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#472-479) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#480-488) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#489-497) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#498-506) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5],uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#507-515) is not in mixedCase
Function usingOraclize.oraclize_cbAddress() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#517-519) is not in mixedCase
Function usingOraclize.oraclize_setProof(bytes1) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#520-522) is not in mixedCase
Function usingOraclize.oraclize_setCustomGasPrice(uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#523-525) is not in mixedCase
Function usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#527-529) is not in mixedCase
Parameter usingOraclize.parseAddr(string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#537) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#557) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._b (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#557) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._haystack (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#575) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._needle (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#575) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#602) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._b (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#602) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._c (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#602) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._d (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#602) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._e (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#602) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#619) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._b (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#619) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._c (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#619) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._d (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#619) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#623) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._b (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#623) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._c (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#623) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#627) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._b (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#627) is not in mixedCase
Parameter usingOraclize.parseInt(string)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#632) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._a (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#637) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._b (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#637) is not in mixedCase
Function usingOraclize.oraclize_setNetworkName(string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#758-760) is not in mixedCase
Parameter usingOraclize.oraclize_setNetworkName(string)._network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#758) is not in mixedCase
Function usingOraclize.oraclize_getNetworkName() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#762-764) is not in mixedCase
Function usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766-809) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._delay (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._nbytes (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._customGasLimit (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#766) is not in mixedCase
Function usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#811-813) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#846-879) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#891-899) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._queryId (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#891) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._result (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#891) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._proof (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#891) is not in mixedCase
Parameter usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256).n_random_bytes (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#901) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#913-953) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string).context_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#913) is not in mixedCase
Function usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#980-1005) is not in mixedCase
Constant usingOraclize.day (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#56) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.week (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#57) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.month (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#58) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_NONE (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#59) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_TLSNotary (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#60) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Android (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#61) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Ledger (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#62) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Native (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#63) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofStorage_IPFS (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#64) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_auto (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#65) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_mainnet (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#66) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_testnet (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#67) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_morden (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#68) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_consensys (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#69) is not in UPPER_CASE_WITH_UNDERSCORES
Variable usingOraclize.OAR (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#71) is not in mixedCase
Variable usingOraclize.oraclize_network_name (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#757) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_args (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#815) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_sessionKeysHashVerified (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#816) is not in mixedCase
Modifier usingOraclize.oraclize_randomDS_proofVerify(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#881-889) is not in mixedCase
Contract multiowned (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1079-1460) is not in CapWords
Parameter multiowned.changeOwner(address,address)._from (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1185) is not in mixedCase
Parameter multiowned.changeOwner(address,address)._to (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1185) is not in mixedCase
Parameter multiowned.addOwner(address)._owner (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1206) is not in mixedCase
Parameter multiowned.removeOwner(address)._owner (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1226) is not in mixedCase
Parameter multiowned.changeRequirement(uint256)._newRequired (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1249) is not in mixedCase
Parameter multiowned.isOwner(address)._addr (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1278) is not in mixedCase
Parameter multiowned.revoke(bytes32)._operation (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1292) is not in mixedCase
Parameter multiowned.hasConfirmed(bytes32,address)._operation (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1313) is not in mixedCase
Parameter multiowned.hasConfirmed(bytes32,address)._owner (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1313) is not in mixedCase
Parameter multiowned.confirmAndCheck(bytes32)._operation (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1325) is not in mixedCase
Parameter multiowned.isOperationActive(bytes32)._operation (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1417) is not in mixedCase
Parameter multiowned.assertOperationIsConsistent(bytes32)._operation (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1429) is not in mixedCase
Constant multiowned.c_maxOwners (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1439) is not in UPPER_CASE_WITH_UNDERSCORES
Variable multiowned.m_multiOwnedRequired (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1442) is not in mixedCase
Variable multiowned.m_numOwners (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1446) is not in mixedCase
Variable multiowned.m_owners (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1451) is not in mixedCase
Variable multiowned.m_ownerIndex (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1454) is not in mixedCase
Variable multiowned.m_multiOwnedPending (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1458) is not in mixedCase
Variable multiowned.m_multiOwnedPendingIndex (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1459) is not in mixedCase
Function EthPriceDependent.__callback(bytes32,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1549-1563) is not in mixedCase
Parameter EthPriceDependent.setETHPriceUpperBound(uint256)._price (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1567) is not in mixedCase
Parameter EthPriceDependent.setETHPriceLowerBound(uint256)._price (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1576) is not in mixedCase
Parameter EthPriceDependent.setETHPriceManually(uint256)._price (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1586) is not in mixedCase
Parameter EthPriceDependent.setOraclizeGasPrice(uint256)._gasPrice (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1605) is not in mixedCase
Parameter EthPriceDependent.setOraclizeGasLimit(uint256)._callbackGas (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1615) is not in mixedCase
Variable EthPriceDependent.m_ETHPriceInCents (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1643) is not in mixedCase
Variable EthPriceDependent.m_ETHPriceLastUpdate (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1645) is not in mixedCase
Variable EthPriceDependent.m_ETHPriceLastUpdateRequest (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1648) is not in mixedCase
Variable EthPriceDependent.m_ETHPriceLowerBound (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1651) is not in mixedCase
Variable EthPriceDependent.m_ETHPriceUpperBound (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1653) is not in mixedCase
Variable EthPriceDependent.m_ETHPriceUpdateInterval (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1656) is not in mixedCase
Variable EthPriceDependent.m_leeway (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1659) is not in mixedCase
Variable EthPriceDependent.m_callbackGas (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1663) is not in mixedCase
Variable ReentrancyGuard.rentrancy_lock (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1753) is not in mixedCase
Parameter BoomstarterPresale.setNextSale(address)._sale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1925) is not in mixedCase
Variable BoomstarterPresale.c_MinInvestmentInCents (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1937) is not in mixedCase
Variable BoomstarterPresale.m_token (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1940) is not in mixedCase
Variable BoomstarterPresale.m_beneficiary (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1943) is not in mixedCase
Variable BoomstarterPresale.m_nextSale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1946) is not in mixedCase
Variable BoomstarterPresale.m_active (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1949) is not in mixedCase
Variable BoomstarterPresale.c_dateTo (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1955) is not in mixedCase
Variable BoomstarterPresale.m_currentTokensSold (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1958) is not in mixedCase
Variable BoomstarterPresale.c_maximumTokensSold (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1960) is not in mixedCase
Variable BoomstarterPresale.c_centsPerTokenFirst (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1963) is not in mixedCase
Variable BoomstarterPresale.c_centsPerTokenSecond (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1965) is not in mixedCase
Variable BoomstarterPresale.c_priceRiseTokenAmount (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1967) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "networkID (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#90)" inusingOraclize (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#55-1048)
Redundant expression "myid (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#133)" inusingOraclize (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#55-1048)
Redundant expression "result (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#133)" inusingOraclize (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#55-1048)
Redundant expression "proof (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#133)" inusingOraclize (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#55-1048)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in BoomstarterPresale.buy() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1833-1895):
	External calls:
	- m_beneficiary.transfer(payment) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1886)
	- investor.transfer(change) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1892)
	Event emitted after the call(s):
	- FundTransfer(investor,payment,true) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1894)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

usingOraclize.oraclize_query(string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#144-148) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#146)
usingOraclize.oraclize_query(uint256,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#149-153) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#151)
usingOraclize.oraclize_query(string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#164-168) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#166)
usingOraclize.oraclize_query(uint256,string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#169-173) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#171)
usingOraclize.oraclize_query(string,string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#184-189) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#186)
usingOraclize.oraclize_query(uint256,string,string[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#190-195) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#192)
usingOraclize.oraclize_query(string,bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#350-355) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#352)
usingOraclize.oraclize_query(uint256,string,bytes[]) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#356-361) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#358)
BoomstarterPresale.slitherConstructorVariables() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969) uses literals with too many digits:
	- m_ETHPriceUpperBound = 100000000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1653)
BoomstarterPresale.slitherConstructorVariables() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969) uses literals with too many digits:
	- c_MinInvestmentInCents = 3000000 (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1937)
BoomstarterPresale.slitherConstructorVariables() (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969) uses literals with too many digits:
	- c_maximumTokensSold = uint256(1500000) * uint256(10) ** uint256(18) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1960)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

usingOraclize.day (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#56) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.week (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#57) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.month (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#58) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.proofType_NONE (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#59) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.proofType_Android (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#61) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.proofType_Ledger (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#62) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.proofType_Native (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#63) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.networkID_mainnet (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#66) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.networkID_testnet (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#67) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.networkID_morden (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#68) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
usingOraclize.networkID_consensys (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#69) is never used in BoomstarterPresale (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1775-1969)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

BoomstarterPresale.c_MinInvestmentInCents (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1937) should be constant 
BoomstarterPresale.c_centsPerTokenFirst (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1963) should be constant 
BoomstarterPresale.c_centsPerTokenSecond (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1965) should be constant 
BoomstarterPresale.c_dateTo (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1955) should be constant 
BoomstarterPresale.c_maximumTokensSold (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1960) should be constant 
BoomstarterPresale.c_priceRiseTokenAmount (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1967) should be constant 
EthPriceDependent.m_ETHPriceUpdateInterval (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1656) should be constant 
EthPriceDependent.m_leeway (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1659) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

query2(uint256,string,string,string) should be declared external:
	- OraclizeI.query2(uint256,string,string,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#42)
queryN(uint256,string,bytes) should be declared external:
	- OraclizeI.queryN(uint256,string,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#44)
getPrice(string) should be declared external:
	- OraclizeI.getPrice(string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#46)
getPrice(string,uint256) should be declared external:
	- OraclizeI.getPrice(string,uint256) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#47)
__callback(bytes32,string) should be declared external:
	- usingOraclize.__callback(bytes32,string) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#128-130)
approveAndCall(address,uint256,bytes) should be declared external:
	- IBoomstarterToken.approveAndCall(address,uint256,bytes) (0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol#1700)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x2aa216f8126190fe5610b1b6c3c4835d1b07c8c8.sol analyzed (10 contracts with 94 detectors), 369 result(s) found

real	0m20.582s
user	0m20.105s
sys	0m0.473s
