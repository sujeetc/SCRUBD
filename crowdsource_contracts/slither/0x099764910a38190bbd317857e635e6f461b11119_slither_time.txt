'solc --version' running
'solc ./0x099764910a38190bbd317857e635e6f461b11119.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

IronHands (0x099764910a38190bbd317857e635e6f461b11119.sol#102-351) contract sets array length with a user-controlled value:
	- participants.push(Participant(msg.sender,amountCredited)) (0x099764910a38190bbd317857e635e6f461b11119.sol#187)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

Reentrancy in IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259):
	External calls:
	- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
	State variables written after the call(s):
	- backlog -= payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#231)
	IronHands.backlog (0x099764910a38190bbd317857e635e6f461b11119.sol#152) can be used in cross function reentrancies:
	- IronHands.backlog (0x099764910a38190bbd317857e635e6f461b11119.sol#152)
	- IronHands.backlogAmount() (0x099764910a38190bbd317857e635e6f461b11119.sol#311-313)
	- IronHands.deposit() (0x099764910a38190bbd317857e635e6f461b11119.sol#181-201)
	- IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259)
	- creditRemaining[participants[payoutOrder].etherAddress] -= payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#233)
	IronHands.creditRemaining (0x099764910a38190bbd317857e635e6f461b11119.sol#156) can be used in cross function reentrancies:
	- IronHands.amountOwed(address) (0x099764910a38190bbd317857e635e6f461b11119.sol#332-334)
	- IronHands.creditRemaining (0x099764910a38190bbd317857e635e6f461b11119.sol#156)
	- IronHands.deposit() (0x099764910a38190bbd317857e635e6f461b11119.sol#181-201)
	- IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259)
	- participants[payoutOrder].payout -= payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#235)
	IronHands.participants (0x099764910a38190bbd317857e635e6f461b11119.sol#154) can be used in cross function reentrancies:
	- IronHands.backlogLength() (0x099764910a38190bbd317857e635e6f461b11119.sol#304-306)
	- IronHands.deposit() (0x099764910a38190bbd317857e635e6f461b11119.sol#181-201)
	- IronHands.participants (0x099764910a38190bbd317857e635e6f461b11119.sol#154)
	- IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259)
	- IronHands.totalParticipants() (0x099764910a38190bbd317857e635e6f461b11119.sol#318-320)
	- payoutOrder += 1 (0x099764910a38190bbd317857e635e6f461b11119.sol#252)
	IronHands.payoutOrder (0x099764910a38190bbd317857e635e6f461b11119.sol#150) can be used in cross function reentrancies:
	- IronHands.backlogLength() (0x099764910a38190bbd317857e635e6f461b11119.sol#304-306)
	- IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259)
	- IronHands.payoutOrder (0x099764910a38190bbd317857e635e6f461b11119.sol#150)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Owned.changeOwner(address)._newOwner (0x099764910a38190bbd317857e635e6f461b11119.sol#91) lacks a zero-check on :
		- ownerCandidate = _newOwner (0x099764910a38190bbd317857e635e6f461b11119.sol#92)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) has external calls inside a loop: participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259):
	External calls:
	- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
	State variables written after the call(s):
	- backlog += payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#243)
	- creditRemaining[participants[payoutOrder].etherAddress] += payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#244)
	- participants[payoutOrder].payout += payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#245)
Reentrancy in IronHands.withdraw() (0x099764910a38190bbd317857e635e6f461b11119.sol#286-292):
	External calls:
	- weak_hands.withdraw.gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#288)
	State variables written after the call(s):
	- dividends += dividendsPaid (0x099764910a38190bbd317857e635e6f461b11119.sol#290)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in IronHands.deposit() (0x099764910a38190bbd317857e635e6f461b11119.sol#181-201):
	External calls:
	- myDividends() > 0 (0x099764910a38190bbd317857e635e6f461b11119.sol#195)
		- weak_hands.myDividends(true) (0x099764910a38190bbd317857e635e6f461b11119.sol#272)
	- withdraw() (0x099764910a38190bbd317857e635e6f461b11119.sol#197)
		- weak_hands.withdraw.gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#288)
	Event emitted after the call(s):
	- Dividends(dividendsPaid) (0x099764910a38190bbd317857e635e6f461b11119.sol#291)
		- withdraw() (0x099764910a38190bbd317857e635e6f461b11119.sol#197)
Reentrancy in IronHands.deposit() (0x099764910a38190bbd317857e635e6f461b11119.sol#181-201):
	External calls:
	- myDividends() > 0 (0x099764910a38190bbd317857e635e6f461b11119.sol#195)
		- weak_hands.myDividends(true) (0x099764910a38190bbd317857e635e6f461b11119.sol#272)
	- withdraw() (0x099764910a38190bbd317857e635e6f461b11119.sol#197)
		- weak_hands.withdraw.gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#288)
	- payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#200)
		- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
		- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
	External calls sending eth:
	- payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#200)
		- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
		- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
	Event emitted after the call(s):
	- Payout(payoutToSend,participants[payoutOrder].etherAddress) (0x099764910a38190bbd317857e635e6f461b11119.sol#239)
		- payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#200)
	- Purchase(investment,tokens) (0x099764910a38190bbd317857e635e6f461b11119.sol#221)
		- payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#200)
Reentrancy in IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259):
	External calls:
	- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
	Event emitted after the call(s):
	- Purchase(investment,tokens) (0x099764910a38190bbd317857e635e6f461b11119.sol#221)
Reentrancy in IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259):
	External calls:
	- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
	Event emitted after the call(s):
	- Payout(payoutToSend,participants[payoutOrder].etherAddress) (0x099764910a38190bbd317857e635e6f461b11119.sol#239)
Reentrancy in IronHands.withdraw() (0x099764910a38190bbd317857e635e6f461b11119.sol#286-292):
	External calls:
	- weak_hands.withdraw.gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#288)
	Event emitted after the call(s):
	- Dividends(dividendsPaid) (0x099764910a38190bbd317857e635e6f461b11119.sol#291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) tries to limit the gas of an external call that controls implicit decoding
	participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#return-bomb

IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) has costly operations inside a loop:
	- backlog -= payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#231)
IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) has costly operations inside a loop:
	- payoutOrder += 1 (0x099764910a38190bbd317857e635e6f461b11119.sol#252)
IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) has costly operations inside a loop:
	- backlog += payoutToSend (0x099764910a38190bbd317857e635e6f461b11119.sol#243)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Version constraint ^0.4.21 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.21 (0x099764910a38190bbd317857e635e6f461b11119.sol#1)
solc-0.4.21 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259):
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Owned.changeOwner(address)._newOwner (0x099764910a38190bbd317857e635e6f461b11119.sol#91) is not in mixedCase
Variable IronHands.weak_hands (0x099764910a38190bbd317857e635e6f461b11119.sol#158) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

IronHands.deposit() (0x099764910a38190bbd317857e635e6f461b11119.sol#181-201) uses literals with too many digits:
	- require(bool)(msg.value > 1000000 && msg.value <= 5000000000000000) (0x099764910a38190bbd317857e635e6f461b11119.sol#183)
IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) uses literals with too many digits:
	- tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender) (0x099764910a38190bbd317857e635e6f461b11119.sol#219)
IronHands.payout() (0x099764910a38190bbd317857e635e6f461b11119.sol#207-259) uses literals with too many digits:
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#237)
IronHands.withdraw() (0x099764910a38190bbd317857e635e6f461b11119.sol#286-292) uses literals with too many digits:
	- weak_hands.withdraw.gas(1000000)() (0x099764910a38190bbd317857e635e6f461b11119.sol#288)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
./0x099764910a38190bbd317857e635e6f461b11119.sol analyzed (4 contracts with 94 detectors), 24 result(s) found

real	0m1.636s
user	0m1.459s
sys	0m0.180s
