'solc --version' running
'solc ./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:172:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            support.send(verificationPrice);
            ^-----------------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:247:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            support.send(_support);
            ^--------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:249:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            referrer[msg.sender].send(_refBonus);
            ^----------------------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:252:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                referrer[referrer[msg.sender]].send(_refBonus);
                ^--------------------------------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:288:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                dep.depositor.send(dep.expect); //Send money to him
                ^----------------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:297:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                dep.depositor.send(money); //Send to him everything we have
                ^-----------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:334:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                dep.depositor.send(amount);
                ^------------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:341:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                dep.depositor.send(refund);
                ^------------------------^
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol:365:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        dep.depositor.send(amount);
        ^------------------------^


Multiplier (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#90-427) contract sets array length with a user-controlled value:
	- queue.push(Deposit(msg.sender,uint128(msg.value),uint128(msg.value * (100 + percent) / 100))) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#243)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

Multiplier.bytesToAddress(bytes) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#149-154) is declared view but contains assembly code
Multiplier.isContract(address) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#416-420) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) performs a multiplication on the result of a division:
	- actualCycle = actualCycle * 2 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#205)
	- actualCycle = actualCycle / 2 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#210)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Multiplier.verify(address) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#169-176) ignores return value by support.send(verificationPrice) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#172)
Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) ignores return value by support.send(_support) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#247)
Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) ignores return value by referrer[msg.sender].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#249)
Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) ignores return value by referrer[referrer[msg.sender]].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#252)
Multiplier.pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#276-310) ignores return value by dep.depositor.send(dep.expect) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#288)
Multiplier.pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#276-310) ignores return value by dep.depositor.send(money) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#297)
Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357) ignores return value by dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357) ignores return value by dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
Multiplier.singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#359-370) ignores return value by dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-send

Variable 'Multiplier.refunding().percent (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#326)' in Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357) potentially used before declaration: percent = 33 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#328)
Variable 'Multiplier.refunding().percent (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#326)' in Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357) potentially used before declaration: amount = uint128(dep.deposit + (dep.deposit * percent / 100)) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#331)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables

Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= cycleStart + actualCycle (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#203)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Multiplier.bytesToAddress(bytes) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#149-154) uses assembly
	- INLINE ASM (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#150-153)
Multiplier.isContract(address) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#416-420) uses assembly
	- INLINE ASM (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#418-419)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) has a high cyclomatic complexity (13).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Version constraint ^0.4.25 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x.
It is used by:
	- ^0.4.25 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#1)
solc-0.4.25 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter SafeMath.mul(uint256,uint256)._a (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#5) is not in mixedCase
Parameter SafeMath.mul(uint256,uint256)._b (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#5) is not in mixedCase
Parameter SafeMath.div(uint256,uint256)._a (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#16) is not in mixedCase
Parameter SafeMath.div(uint256,uint256)._b (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#16) is not in mixedCase
Parameter SafeMath.sub(uint256,uint256)._a (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#23) is not in mixedCase
Parameter SafeMath.sub(uint256,uint256)._b (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#23) is not in mixedCase
Parameter SafeMath.add(uint256,uint256)._a (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#30) is not in mixedCase
Parameter SafeMath.add(uint256,uint256)._b (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#30) is not in mixedCase
Constant Multiplier.support (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#94) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271):
	External calls:
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#225)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#227)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
	Event emitted after the call(s):
	- NewCycle(cycleStart,actualCycle,cycles) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#230)
Reentrancy in Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271):
	External calls:
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#225)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#227)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	State variables written after the call(s):
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- currentRefundIndex = 0 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#343)
		- currentRefundIndex -= i (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#355)
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- delete queue[idx] (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#339)
	- queue.push(Deposit(msg.sender,uint128(msg.value),uint128(msg.value * (100 + percent) / 100))) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#243)
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- reserved -= amount (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#336)
		- reserved -= refund (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#342)
	Event emitted after the call(s):
	- RefundCompleted(cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#346)
		- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
	- Refunded(dep.depositor,amount,cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#338)
		- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
	- Refunded(dep.depositor,refund,cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#345)
		- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
Reentrancy in Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271):
	External calls:
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#225)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#227)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- support.send(_support) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#247)
	- referrer[msg.sender].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#249)
	Event emitted after the call(s):
	- RefBonusPayed(msg.sender,referrer[msg.sender],_refBonus,1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#250)
Reentrancy in Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271):
	External calls:
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#225)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#227)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- support.send(_support) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#247)
	- referrer[msg.sender].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#249)
	- referrer[referrer[msg.sender]].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#252)
	State variables written after the call(s):
	- delayed = 0 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#262)
	- delayed += msg.value * 96 / 100 / 2 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#267)
	- reserved += msg.value * 96 / 100 / 2 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#259)
	Event emitted after the call(s):
	- NewDeposit(msg.sender,queue.length - 1,msg.value,msg.value * (100 + percent) / 100,cycles) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#256)
	- RefBonusPayed(msg.sender,referrer[referrer[msg.sender]],_refBonus,2) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#253)
Reentrancy in Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271):
	External calls:
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#225)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#227)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
	- refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#234)
		- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
		- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	- support.send(_support) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#247)
	- referrer[msg.sender].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#249)
	- referrer[referrer[msg.sender]].send(_refBonus) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#252)
	- pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#265)
		- dep.depositor.send(dep.expect) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#288)
		- dep.depositor.send(money) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#297)
	State variables written after the call(s):
	- pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#265)
		- currentReceiverIndex += i (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#309)
	- pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#265)
		- delete queue[idx] (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#294)
		- dep.expect -= money (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#298)
	Event emitted after the call(s):
	- Payed(dep.depositor,dep.expect,cycles) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#291)
		- pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#265)
	- Payed(dep.depositor,money,cycles) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#300)
		- pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#265)
Reentrancy in Multiplier.pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#276-310):
	External calls:
	- dep.depositor.send(dep.expect) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#288)
	State variables written after the call(s):
	- delete queue[idx] (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#294)
	Event emitted after the call(s):
	- Payed(dep.depositor,dep.expect,cycles) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#291)
Reentrancy in Multiplier.pay() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#276-310):
	External calls:
	- dep.depositor.send(dep.expect) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#288)
	- dep.depositor.send(money) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#297)
	State variables written after the call(s):
	- currentReceiverIndex += i (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#309)
	- dep.expect -= money (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#298)
	Event emitted after the call(s):
	- Payed(dep.depositor,money,cycles) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#300)
Reentrancy in Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357):
	External calls:
	- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
	State variables written after the call(s):
	- delete queue[idx] (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#339)
	- reserved -= amount (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#336)
	Event emitted after the call(s):
	- Refunded(dep.depositor,amount,cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#338)
Reentrancy in Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357):
	External calls:
	- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#334)
	- dep.depositor.send(refund) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#341)
	State variables written after the call(s):
	- currentRefundIndex = 0 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#343)
	- currentRefundIndex -= i (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#355)
	- reserved -= refund (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#342)
	Event emitted after the call(s):
	- RefundCompleted(cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#346)
	- Refunded(dep.depositor,refund,cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#345)
Reentrancy in Multiplier.singleRefunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#359-370):
	External calls:
	- dep.depositor.send(amount) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#365)
	State variables written after the call(s):
	- delete queue[queue.length - 1] (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#368)
	- reserved -= amount (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#366)
	Event emitted after the call(s):
	- RefundCompleted(cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#369)
	- Refunded(dep.depositor,amount,cycles - 1) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#367)
Reentrancy in Multiplier.verify(address) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#169-176):
	External calls:
	- support.send(verificationPrice) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#172)
	State variables written after the call(s):
	- verified[addr] = true (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#174)
	Event emitted after the call(s):
	- RefVerified(addr) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#175)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Multiplier.fallback() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#180-271) uses literals with too many digits:
	- require(bool,string)(gasleft()() >= 300000,We require more gas!) (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#200)
Multiplier.refunding() (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#312-357) uses literals with too many digits:
	- gasleft()() <= 100000 (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#350)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Multiplier.minPercent (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#110) is never used in Multiplier (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#90-427)
Multiplier.maxPercent (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#111) is never used in Multiplier (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#90-427)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Loop condition i < queue.length (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#382) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < queue.length (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#399) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < queue.length (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#281) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

Multiplier.frontier (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#113) should be constant 
Multiplier.initCycle (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#102) should be constant 
Multiplier.maxCycle (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#103) should be constant 
Multiplier.maxPercent (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#111) should be constant 
Multiplier.minCycle (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#101) should be constant 
Multiplier.minPercent (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#110) should be constant 
Multiplier.refBonus (0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol#118) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x07a6ebf8549dd5cfdf201f6de9e7487113434dd7.sol analyzed (3 contracts with 94 detectors), 55 result(s) found

real	0m2.400s
user	0m2.254s
sys	0m0.149s
