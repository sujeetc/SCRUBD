'solc --version' running
'solc ./0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol:
./0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol:89:17: Warning: Return value of low-level calls not used.
                participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();
                ^----------------------------------------------------------------------------^


BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) sends eth to arbitrary user
	Dangerous calls:
	- flmContract.buy.value(investment)(msg.sender) (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#83)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

BoomerangLiquidity (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#45-122) contract sets array length with a user-controlled value:
	- participants.push(Participant(msg.sender,(msg.value * multiplier) / 100)) (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#75)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

Reentrancy in BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95):
	External calls:
	- flmContract.buy.value(investment)(msg.sender) (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#83)
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#89)
	State variables written after the call(s):
	- participants[payoutOrder].payout -= payoutToSend (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#87)
	BoomerangLiquidity.participants (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#67) can be used in cross function reentrancies:
	- BoomerangLiquidity.deposit() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#74-76)
	- BoomerangLiquidity.participants (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#67)
	- BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95)
	- payoutOrder += 1 (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#92)
	BoomerangLiquidity.payoutOrder (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#53) can be used in cross function reentrancies:
	- BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95)
	- BoomerangLiquidity.payoutOrder (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#53)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) ignores return value by participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#89)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) ignores return value by flmContract.buy.value(investment)(msg.sender) (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#83)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Owned.changeOwner(address)._newOwner (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#34) lacks a zero-check on :
		- ownerCandidate = _newOwner (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#35)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) has external calls inside a loop: participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#89)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) tries to limit the gas of an external call that controls implicit decoding
	participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#89)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#return-bomb

BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) has costly operations inside a loop:
	- payoutOrder += 1 (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#92)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Version constraint 0.4.21 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- 0.4.21 (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#1)
solc-0.4.21 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95):
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#89)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Owned.changeOwner(address)._newOwner (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#34) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

BoomerangLiquidity.payout() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#78-95) uses literals with too many digits:
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#89)
BoomerangLiquidity.withdraw() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#104-106) uses literals with too many digits:
	- flmContract.withdraw.gas(1000000)() (0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol#105)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
./0x2247fdc0e5de91ae589abfab8b99976d8e9f330b.sol analyzed (4 contracts with 94 detectors), 15 result(s) found

real	0m1.619s
user	0m1.423s
sys	0m0.198s
