'solc --version' running
'solc ./0x2767e2ad18b358be2b511963a1b236b48203618c.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

BabyPOOF.swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#647-689) sends eth to arbitrary user
	Dangerous calls:
	- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609):
	External calls:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#658-664)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	External calls sending eth:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#597)
	BabyPOOF._balances (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#485) can be used in cross function reentrancies:
	- BabyPOOF._basicTransfer(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#611-616)
	- BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609)
	- BabyPOOF.balanceOf(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#558)
	- BabyPOOF.constructor() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#530-549)
	- BabyPOOF.setIsDividendExempt(address,bool) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#767-775)
	- BabyPOOF.shouldSwapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#640-645)
	- BabyPOOF.takeFee(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#631-638)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#600)
	BabyPOOF._balances (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#485) can be used in cross function reentrancies:
	- BabyPOOF._basicTransfer(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#611-616)
	- BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609)
	- BabyPOOF.balanceOf(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#558)
	- BabyPOOF.constructor() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#530-549)
	- BabyPOOF.setIsDividendExempt(address,bool) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#767-775)
	- BabyPOOF.shouldSwapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#640-645)
	- BabyPOOF.takeFee(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#631-638)
	- amountReceived = takeFee(sender,recipient,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#599)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#634)
	BabyPOOF._balances (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#485) can be used in cross function reentrancies:
	- BabyPOOF._basicTransfer(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#611-616)
	- BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609)
	- BabyPOOF.balanceOf(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#558)
	- BabyPOOF.constructor() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#530-549)
	- BabyPOOF.setIsDividendExempt(address,bool) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#767-775)
	- BabyPOOF.shouldSwapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#640-645)
	- BabyPOOF.takeFee(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#631-638)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- inSwap = true (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#528)
		- inSwap = false (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#528)
	BabyPOOF.inSwap (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#527) can be used in cross function reentrancies:
	- BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609)
	- BabyPOOF.shouldAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#691-697)
	- BabyPOOF.shouldSwapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#640-645)
	- BabyPOOF.swapping() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#528)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434) ignores return value by POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434):
	External calls:
	- POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#431)
	DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434)
	- DividendDistributor.getUnpaidEarnings(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#440-449)
	- DividendDistributor.setShare(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#355-369)
	- DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#432)
	DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434)
	- DividendDistributor.getUnpaidEarnings(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#440-449)
	- DividendDistributor.setShare(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#355-369)
	- DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319)
Reentrancy in DividendDistributor.process(uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#392-416):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#408)
		- POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
	State variables written after the call(s):
	- currentIndex = 0 (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#404)
	DividendDistributor.currentIndex (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#330) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#392-416)
	- currentIndex ++ (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#413)
	DividendDistributor.currentIndex (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#330) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#392-416)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#355-369):
	External calls:
	- distributeDividend(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#357)
		- POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#367)
	DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434)
	- DividendDistributor.getUnpaidEarnings(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#440-449)
	- DividendDistributor.setShare(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#355-369)
	- DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#368)
	DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434)
	- DividendDistributor.getUnpaidEarnings(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#440-449)
	- DividendDistributor.setShare(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#355-369)
	- DividendDistributor.shares (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#319)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

BabyPOOF.swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#647-689) ignores return value by router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

DividendDistributor.setDistributionCriteria(uint256,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#350-353) should emit an event for: 
	- minPeriod = _minPeriod (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#351) 
	- minDistribution = _minDistribution (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#352) 
BabyPOOF.setAutoBuybackSettings(bool,uint256,uint256,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#731-738) should emit an event for: 
	- autoBuybackCap = _cap (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#733) 
	- autoBuybackAmount = _amount.div(100) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#735) 
BabyPOOF.setTxLimit(uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#755-758) should emit an event for: 
	- _maxTxAmount = amount.div(100) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#757) 
BabyPOOF.setFees(uint256,uint256,uint256,uint256,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#785-793) should emit an event for: 
	- liquidityFee = _liquidityFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#786) 
	- reflectionFee = _reflectionFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#788) 
	- marketingFee = _marketingFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#789) 
	- totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(_marketingFee) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#790) 
	- feeDenominator = _feeDenominator (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#791) 
BabyPOOF.setSwapBackSettings(bool,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#800-803) should emit an event for: 
	- swapThreshold = _amount.div(100) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#802) 
BabyPOOF.setTargetLiquidity(uint256,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#805-808) should emit an event for: 
	- targetLiquidity = _target (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#806) 
	- targetLiquidityDenominator = _denominator (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#807) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

BabyPOOF.setFeeReceivers(address,address)._autoLiquidityReceiver (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#795) lacks a zero-check on :
		- autoLiquidityReceiver = _autoLiquidityReceiver (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#796)
BabyPOOF.setFeeReceivers(address,address)._marketingFeeReceiver (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#795) lacks a zero-check on :
		- marketingFeeReceiver = _marketingFeeReceiver (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#797)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434) has external calls inside a loop: POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609):
	External calls:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#658-664)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	External calls sending eth:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	State variables written after the call(s):
	- launch() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#595)
		- launchedAt = block.number (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#752)
Reentrancy in DividendDistributor.deposit() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#372-390):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#379-384)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#389)
	- totalDividends = totalDividends.add(amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#388)
Reentrancy in DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434):
	External calls:
	- POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#430)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#355-369):
	External calls:
	- distributeDividend(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#357)
		- POOF.transfer(shareholder,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#429)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#361)
		- shareholderIndexes[shareholder] = shareholders.length (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#456)
	- removeShareholder(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#363)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#462)
	- addShareholder(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#361)
		- shareholders.push(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#457)
	- removeShareholder(shareholder) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#363)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#461)
		- shareholders.pop() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#463)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#366)
Reentrancy in BabyPOOF.triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#711-716):
	External calls:
	- buyTokens(autoBuybackAmount,DEAD) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#712)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	State variables written after the call(s):
	- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#714)
	- autoBuybackBlockLast = block.number (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#713)
	- autoBuybackEnabled = false (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#715)
Reentrancy in BabyPOOF.triggerManualBuyback(uint256,bool) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#699-705):
	External calls:
	- buyTokens(amount,DEAD) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#700)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	State variables written after the call(s):
	- buybackMultiplierTriggeredAt = block.timestamp (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#702)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609):
	External calls:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#658-664)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	- distributor.setShare(sender,_balances[sender]) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#602)
	- distributor.setShare(recipient,_balances[recipient]) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#603)
	- distributor.process(distributorGas) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#605)
	External calls sending eth:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#607)
Reentrancy in BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609):
	External calls:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#658-664)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	External calls sending eth:
	- swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#592)
		- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
		- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	- triggerAutoBuyback() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#593)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#635)
		- amountReceived = takeFee(sender,recipient,amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#599)
Reentrancy in BabyPOOF.swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#647-689):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#658-664)
	- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
	- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	External calls sending eth:
	- distributor.deposit{value: amountETHReflection}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#674)
	- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#679-686)
	Event emitted after the call(s):
	- AutoLiquify(amountETHLiquidity,amountToLiquify) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#687)
Reentrancy in BabyPOOF.triggerManualBuyback(uint256,bool) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#699-705):
	External calls:
	- buyTokens(amount,DEAD) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#700)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#723-728)
	Event emitted after the call(s):
	- BuybackMultiplierActive(buybackMultiplierLength) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#703)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

BabyPOOF.swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#647-689) tries to limit the gas of an external call that controls implicit decoding
	(success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#return-bomb

DividendDistributor.shouldDistribute(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#418-421) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#419-420)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#8-17) uses assembly
	- INLINE ASM (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#15)
Address._functionCallWithValue(address,bytes,uint256,string) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#44-65) uses assembly
	- INLINE ASM (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#57-60)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

DividendDistributor.process(uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#392-416) has costly operations inside a loop:
	- currentIndex = 0 (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#404)
DividendDistributor.distributeDividend(address) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#423-434) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#428)
DividendDistributor.process(uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#392-416) has costly operations inside a loop:
	- currentIndex ++ (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#413)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

BabyPOOF._transferFrom(address,address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#583-609) has a high cyclomatic complexity (14).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Context._msgData() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#73-76) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

BabyPOOF._maxTxAmount (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#482) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 20) / 1000
BabyPOOF._maxWalletSize (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#483) is set pre-construction with a non-constant function or state variable:
	- (_totalSupply * 20) / 1000
BabyPOOF.swapThreshold (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#526) is set pre-construction with a non-constant function or state variable:
	- _totalSupply / 500
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.7.6 (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#4)
solc-0.7.6 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#19-25):
	- (success,None) = recipient.call{value: amount}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#23)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#44-65):
	- (success,returndata) = target.call{value: weiValue}(data) (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#48)
Low level call in BabyPOOF.swapBack() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#647-689):
	- (success,None) = address(marketingFeeReceiver).call{gas: 30000,value: amountETHDev}() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#675)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IDEXRouter.WETH() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#246) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#350) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDistribution (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#350) is not in mixedCase
Variable DividendDistributor.POOF (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#311) is not in mixedCase
Variable DividendDistributor.WETH (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#312) is not in mixedCase
Parameter BabyPOOF.setAutoBuybackSettings(bool,uint256,uint256,uint256)._enabled (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#731) is not in mixedCase
Parameter BabyPOOF.setAutoBuybackSettings(bool,uint256,uint256,uint256)._cap (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#731) is not in mixedCase
Parameter BabyPOOF.setAutoBuybackSettings(bool,uint256,uint256,uint256)._amount (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#731) is not in mixedCase
Parameter BabyPOOF.setAutoBuybackSettings(bool,uint256,uint256,uint256)._period (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#731) is not in mixedCase
Parameter BabyPOOF.setFees(uint256,uint256,uint256,uint256,uint256)._liquidityFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#785) is not in mixedCase
Parameter BabyPOOF.setFees(uint256,uint256,uint256,uint256,uint256)._buybackFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#785) is not in mixedCase
Parameter BabyPOOF.setFees(uint256,uint256,uint256,uint256,uint256)._reflectionFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#785) is not in mixedCase
Parameter BabyPOOF.setFees(uint256,uint256,uint256,uint256,uint256)._marketingFee (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#785) is not in mixedCase
Parameter BabyPOOF.setFees(uint256,uint256,uint256,uint256,uint256)._feeDenominator (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#785) is not in mixedCase
Parameter BabyPOOF.setFeeReceivers(address,address)._autoLiquidityReceiver (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#795) is not in mixedCase
Parameter BabyPOOF.setFeeReceivers(address,address)._marketingFeeReceiver (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#795) is not in mixedCase
Parameter BabyPOOF.setSwapBackSettings(bool,uint256)._enabled (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#800) is not in mixedCase
Parameter BabyPOOF.setSwapBackSettings(bool,uint256)._amount (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#800) is not in mixedCase
Parameter BabyPOOF.setTargetLiquidity(uint256,uint256)._target (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#805) is not in mixedCase
Parameter BabyPOOF.setTargetLiquidity(uint256,uint256)._denominator (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#805) is not in mixedCase
Parameter BabyPOOF.setDistributionCriteria(uint256,uint256)._minPeriod (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#810) is not in mixedCase
Parameter BabyPOOF.setDistributionCriteria(uint256,uint256)._minDistribution (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#810) is not in mixedCase
Variable BabyPOOF.POOF (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#472) is not in mixedCase
Variable BabyPOOF.WETH (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#473) is not in mixedCase
Variable BabyPOOF.DEAD (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#474) is not in mixedCase
Variable BabyPOOF.ZERO (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#475) is not in mixedCase
Constant BabyPOOF._name (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#477) is not in UPPER_CASE_WITH_UNDERSCORES
Constant BabyPOOF._symbol (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#478) is not in UPPER_CASE_WITH_UNDERSCORES
Constant BabyPOOF._decimals (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#479) is not in UPPER_CASE_WITH_UNDERSCORES
Variable BabyPOOF._maxTxAmount (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#482) is not in mixedCase
Variable BabyPOOF._maxWalletSize (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#483) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#74)" inContext (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#68-77)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

BabyPOOF.slitherConstructorVariables() (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#468-834) uses literals with too many digits:
	- distributorGas = 500000 (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#523)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

BabyPOOF.POOF (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#472) is never used in BabyPOOF (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#468-834)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

BabyPOOF.DEAD (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#474) should be constant 
BabyPOOF.POOF (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#472) should be constant 
BabyPOOF.WETH (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#473) should be constant 
BabyPOOF.ZERO (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#475) should be constant 
BabyPOOF._totalSupply (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#481) should be constant 
DividendDistributor.POOF (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#311) should be constant 
DividendDistributor.WETH (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#312) should be constant 
DividendDistributor.dividendsPerShareAccuracyFactor (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#325) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

BabyPOOF.distributor (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#522) should be immutable 
BabyPOOF.pair (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#506) should be immutable 
BabyPOOF.router (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#505) should be immutable 
DividendDistributor._token (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#302) should be immutable 
DividendDistributor.router (0x2767e2ad18b358be2b511963a1b236b48203618c.sol#313) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x2767e2ad18b358be2b511963a1b236b48203618c.sol analyzed (10 contracts with 94 detectors), 90 result(s) found

real	0m3.510s
user	0m3.255s
sys	0m0.257s
