'solc --version' running
'solc ./0x05b902c7fd6d221d582bb973fe6e253921568717.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624):
	External calls:
	- swapTokensForEth(walletTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#559)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	External calls sending eth:
	- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#608)
	Flasko._balances (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#395) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
	- Flasko.balanceOf(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#472-474)
	- Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467)
	- _balances[recipient] = _balances[recipient].add(TotalSent) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#609)
	Flasko._balances (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#395) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
	- Flasko.balanceOf(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#472-474)
	- Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467)
	- _balances[address(this)] = _balances[address(this)].add(taxAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#610)
	Flasko._balances (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#395) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
	- Flasko.balanceOf(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#472-474)
	- Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467)
	- _balances[address(0)] = _balances[address(0)].add(burnAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#611)
	Flasko._balances (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#395) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
	- Flasko.balanceOf(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#472-474)
	- Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467)
	- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#618)
	Flasko._balances (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#395) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
	- Flasko.balanceOf(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#472-474)
	- Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467)
	- _balances[recipient] = _balances[recipient].add(amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#619)
	Flasko._balances (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#395) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
	- Flasko.balanceOf(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#472-474)
	- Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467)
	- swapping = false (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#568)
	Flasko.swapping (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#435) can be used in cross function reentrancies:
	- Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Flasko._owner (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#444) shadows:
	- Ownable._owner (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#63)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing

Flasko.removeStuckToken(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#722-727) ignores return value by IERC20(_address).transfer(owner(),IERC20(_address).balanceOf(address(this))) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#726)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624) performs a multiplication on the result of a division:
	- taxAmount = amount.mul(totalFee).div(100) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#605)
	- burnAmount = taxAmount.mul(burnFee).div(totalFee) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#606)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Flasko.addLiquidity(uint256,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#672-687) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Flasko.changeNumTokensSellToAddToLiquidity(uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#512-515) should emit an event for: 
	- numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#514) 
Flasko.changeMaxTxLimit(uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#525-528) should emit an event for: 
	- maxTxAmount = _number (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#527) 
Flasko.setSellFee(uint256,uint256,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#627-635) should emit an event for: 
	- SELLmarketingFee = _onSellMarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#629) 
	- SELLburnFee = _onSellEthBurnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#630) 
	- SELLliquidityFee = _onSellliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#631) 
Flasko.setBuyFee(uint256,uint256,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#637-645) should emit an event for: 
	- BUYmarketingFee = _onBuyMarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#639) 
	- BUYburnFee = _onBuyBurnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#640) 
	- BUYliquidityFee = _onBuyliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#641) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Flasko.setMarketingAddress(address).wallet (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#500) lacks a zero-check on :
		- marketingaddress = wallet (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#502)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624):
	External calls:
	- swapTokensForEth(walletTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#559)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	External calls sending eth:
	- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	State variables written after the call(s):
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- _allowances[towner][spender] = amount (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#711)
	- burnFee = BUYburnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#589)
	- burnFee = SELLburnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#597)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- inSwapAndLiquify = true (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#439)
		- inSwapAndLiquify = false (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#441)
	- liquidityFee = BUYliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#588)
	- liquidityFee = SELLliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#596)
	- marketingFee = BUYmarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#587)
	- marketingFee = SELLmarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#595)
	- totalFee = BUYtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#590)
	- totalFee = SELLtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#598)
Reentrancy in Flasko.swapAndLiquify(uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#648-670):
	External calls:
	- swapTokensForEth(half) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#661)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	- addLiquidity(otherHalf,newBalance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#667)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#667)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	State variables written after the call(s):
	- addLiquidity(otherHalf,newBalance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#667)
		- _allowances[towner][spender] = amount (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#711)
Reentrancy in Flasko.transferFrom(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#486-490):
	External calls:
	- _transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#487)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#487)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#488)
		- _allowances[towner][spender] = amount (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#711)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624):
	External calls:
	- swapTokensForEth(walletTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#559)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	External calls sending eth:
	- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	Event emitted after the call(s):
	- Approval(towner,spender,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#712)
		- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
	- SwapAndLiquify(half,newBalance,otherHalf) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#669)
		- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
	- Transfer(sender,recipient,TotalSent) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#612)
	- Transfer(sender,address(this),taxAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#613)
	- Transfer(sender,address(0),burnAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#614)
	- Transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#620)
Reentrancy in Flasko.swapAndLiquify(uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#648-670):
	External calls:
	- swapTokensForEth(half) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#661)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	- addLiquidity(otherHalf,newBalance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#667)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#667)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	Event emitted after the call(s):
	- Approval(towner,spender,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#712)
		- addLiquidity(otherHalf,newBalance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#667)
	- SwapAndLiquify(half,newBalance,otherHalf) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#669)
Reentrancy in Flasko.transferFrom(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#486-490):
	External calls:
	- _transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#487)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#698-704)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#487)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	Event emitted after the call(s):
	- Approval(towner,spender,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#712)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#488)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Address.isContract(address) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#140-146) uses assembly
	- INLINE ASM (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Flasko.BUYtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#410) is set pre-construction with a non-constant function or state variable:
	- BUYliquidityFee.add(BUYmarketingFee).add(BUYburnFee)
Flasko.SELLtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#415) is set pre-construction with a non-constant function or state variable:
	- SELLliquidityFee.add(SELLmarketingFee).add(SELLburnFee)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint 0.8.15 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- StorageWriteRemovalBeforeConditionalTermination
	- AbiReencodingHeadOverflowWithStaticArrayCleanup.
It is used by:
	- 0.8.15 (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#167-178):
	- (success,returndata) = address(token).call(data) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#213) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#214) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#231) is not in mixedCase
Function IUniswapV2Router01.WETH() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#253) is not in mixedCase
Parameter Flasko.setSwapAndLiquifyEnabled(bool)._enabled (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#507) is not in mixedCase
Parameter Flasko.changeNumTokensSellToAddToLiquidity(uint256)._numTokensSellToAddToLiquidity (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#512) is not in mixedCase
Parameter Flasko.changeMaxTxLimit(uint256)._number (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#525) is not in mixedCase
Parameter Flasko.setSellFee(uint256,uint256,uint256)._onSellEthBurnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#627) is not in mixedCase
Parameter Flasko.setSellFee(uint256,uint256,uint256)._onSellliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#627) is not in mixedCase
Parameter Flasko.setSellFee(uint256,uint256,uint256)._onSellMarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#627) is not in mixedCase
Parameter Flasko.setBuyFee(uint256,uint256,uint256)._onBuyBurnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#637) is not in mixedCase
Parameter Flasko.setBuyFee(uint256,uint256,uint256)._onBuyliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#637) is not in mixedCase
Parameter Flasko.setBuyFee(uint256,uint256,uint256)._onBuyMarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#637) is not in mixedCase
Parameter Flasko.removeStuckToken(address)._address (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#722) is not in mixedCase
Variable Flasko.BUYmarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#407) is not in mixedCase
Variable Flasko.BUYburnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#408) is not in mixedCase
Variable Flasko.BUYliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#409) is not in mixedCase
Variable Flasko.BUYtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#410) is not in mixedCase
Variable Flasko.SELLmarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#412) is not in mixedCase
Variable Flasko.SELLburnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#413) is not in mixedCase
Variable Flasko.SELLliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#414) is not in mixedCase
Variable Flasko.SELLtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#415) is not in mixedCase
Variable Flasko._owner (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#444) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Flasko._transfer(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#532-624):
	External calls:
	- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	External calls sending eth:
	- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
	State variables written after the call(s):
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- _allowances[towner][spender] = amount (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#711)
	- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#608)
	- _balances[recipient] = _balances[recipient].add(TotalSent) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#609)
	- _balances[address(this)] = _balances[address(this)].add(taxAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#610)
	- _balances[address(0)] = _balances[address(0)].add(burnAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#611)
	- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#618)
	- _balances[recipient] = _balances[recipient].add(amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#619)
	- burnFee = BUYburnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#589)
	- burnFee = SELLburnFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#597)
	- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
		- inSwapAndLiquify = true (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#439)
		- inSwapAndLiquify = false (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#441)
	- liquidityFee = BUYliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#588)
	- liquidityFee = SELLliquidityFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#596)
	- marketingFee = BUYmarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#587)
	- marketingFee = SELLmarketingFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#595)
	- swapping = false (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#568)
	- totalFee = BUYtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#590)
	- totalFee = SELLtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#598)
	Event emitted after the call(s):
	- Approval(towner,spender,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#712)
		- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
	- SwapAndLiquify(half,newBalance,otherHalf) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#669)
		- swapAndLiquify(swapTokens) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#566)
	- Transfer(sender,recipient,TotalSent) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#612)
	- Transfer(sender,address(this),taxAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#613)
	- Transfer(sender,address(0),burnAmount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#614)
	- Transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#620)
Reentrancy in Flasko.transferFrom(address,address,uint256) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#486-490):
	External calls:
	- _transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#487)
		- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#487)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#678-685)
		- address(marketingaddress).transfer(marketingShare) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#563)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#488)
		- _allowances[towner][spender] = amount (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#711)
	Event emitted after the call(s):
	- Approval(towner,spender,amount) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#712)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#488)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Flasko.constructor() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#446-467) uses literals with too many digits:
	- _totalSupply = 1000000000 * (10 ** 18) (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#448)
Flasko.slitherConstructorVariables() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#387-730) uses literals with too many digits:
	- numTokensSellToAddToLiquidity = 100000 * 10 ** 18 (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#424)
Flasko.slitherConstructorVariables() (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#387-730) uses literals with too many digits:
	- maxTxAmount = 1000000000 * 10 ** 18 (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#425)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Flasko.BUYtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#410) should be immutable 
Flasko.SELLtotalFee (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#415) should be immutable 
Flasko._owner (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#444) should be immutable 
Flasko._totalSupply (0x05b902c7fd6d221d582bb973fe6e253921568717.sol#399) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x05b902c7fd6d221d582bb973fe6e253921568717.sol analyzed (12 contracts with 94 detectors), 53 result(s) found

real	0m3.352s
user	0m3.045s
sys	0m0.306s
