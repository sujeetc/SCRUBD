'solc --version' running
'solc ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:
Warning: Unused local variable.
   --> ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:324:10:
    |
324 |         (uint amountToken, uint amountETH, uint liquidity) = ...
    |          ^^^^^^^^^^^^^^^^

Warning: Unused local variable.
   --> ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:324:28:
    |
324 |         (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
    |                            ^^^^^^^^^^^^^^

Warning: Unused local variable.
   --> ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:450:14:
    |
450 |             (uint amountToken, uint amountETH, uint liquidity) = ...
    |              ^^^^^^^^^^^^^^^^

Warning: Unused local variable.
   --> ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:450:32:
    |
450 |             (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
    |                                ^^^^^^^^^^^^^^

Warning: Unused local variable.
   --> ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:457:14:
    |
457 |             (uint amountToken, uint amountETH, uint liquidity) = ...
    |              ^^^^^^^^^^^^^^^^

Warning: Unused local variable.
   --> ./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol:457:32:
    |
457 |             (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
    |                                ^^^^^^^^^^^^^^



Reentrancy in LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460):
	External calls:
	- minter.liquidityRewards(address(this),_numTokensToReinvest) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#449)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidityETH{value: msg.value}(address(pampToken),_numTokensToReinvest,0,0,address(this),now + 86400) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#450)
	External calls sending eth:
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidityETH{value: msg.value}(address(pampToken),_numTokensToReinvest,0,0,address(this),now + 86400) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#450)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#451)
	LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260) can be used in cross function reentrancies:
	- LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345)
	- LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494)
	- LiquidityPool.emergencyWithdrawLiquidityTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#463-472)
	- LiquidityPool.getStaker(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#569-571)
	- LiquidityPool.giveMeDayLast() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#564-566)
	- LiquidityPool.giveMeDayStart() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#560-562)
	- LiquidityPool.lockRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#431-440)
	- LiquidityPool.migrateState() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#347-359)
	- LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379)
	- LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460)
	- LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320)
	- LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260)
	- LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409)
	- LiquidityPool.withdrawRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#411-429)
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460):
	External calls:
	- minter.liquidityRewards(address(this),numTokensToReinvest) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#456)
	- (amountToken_scope_0,amountETH_scope_1,liquidity_scope_2) = uniswapV2.addLiquidityETH{value: msg.value}(address(pampToken),numTokensToReinvest,0,0,address(this),now + 86400) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#457)
	External calls sending eth:
	- (amountToken_scope_0,amountETH_scope_1,liquidity_scope_2) = uniswapV2.addLiquidityETH{value: msg.value}(address(pampToken),numTokensToReinvest,0,0,address(this),now + 86400) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#457)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity_scope_2) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#458)
	LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260) can be used in cross function reentrancies:
	- LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345)
	- LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494)
	- LiquidityPool.emergencyWithdrawLiquidityTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#463-472)
	- LiquidityPool.getStaker(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#569-571)
	- LiquidityPool.giveMeDayLast() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#564-566)
	- LiquidityPool.giveMeDayStart() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#560-562)
	- LiquidityPool.lockRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#431-440)
	- LiquidityPool.migrateState() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#347-359)
	- LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379)
	- LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460)
	- LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320)
	- LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260)
	- LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409)
	- LiquidityPool.withdrawRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#411-429)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320) ignores return value by uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#293)
LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345) ignores return value by pampToken.transferFrom(msg.sender,address(this),_numTokensToInvest) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#323)
LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409) ignores return value by uniswapPair.transfer(msg.sender,numPoolTokensToWithdraw) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#408)
LiquidityPool.emergencyWithdrawLiquidityTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#463-472) ignores return value by uniswapPair.transfer(msg.sender,poolTokenBalance) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#471)
LiquidityPool.transferPampTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#548-550) ignores return value by pampToken.transfer(msg.sender,_numTokens) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#549)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494) performs a multiplication on the result of a division:
	- daysSinceLast = block.timestamp.sub(thisStaker.lastTimestamp) / 86400 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#479)
	- tokens = mulDiv(daysSinceLast.mul(rewardAdjustmentFactor),thisStaker.poolTokenBalance,uniswapPair.totalSupply()) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#481)
LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494) performs a multiplication on the result of a division:
	- totalDaysStaked = block.timestamp.sub(thisStaker.startTimestamp) / 86400 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#478)
	- tokens * totalDaysStaked (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#488)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#585)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#586)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#587)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#588)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#589)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#590)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#591)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- z /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#581)
	- r *= 2 - z * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#592)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) performs a multiplication on the result of a division:
	- l /= pow2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#582)
	- l * r (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#593)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320) uses a dangerous strict equality:
	- require(bool)(previousBalance.add(numPoolTokensToStake) == postBalance) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#297)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379):
	External calls:
	- require(bool,string)(uniswapPair.transferFrom(msg.sender,address(this),previousBalance),Failure transferring UNI-V2) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#370)
	State variables written after the call(s):
	- delete previousContractBalances[msg.sender] (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#374)
	LiquidityPool.previousContractBalances (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#261) can be used in cross function reentrancies:
	- LiquidityPool.migrateState() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#347-359)
	- LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379)
	- LiquidityPool.previousContractBalances (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#261)
	- thisStaker.poolTokenBalance = previousBalance (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#372)
	LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260) can be used in cross function reentrancies:
	- LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345)
	- LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494)
	- LiquidityPool.emergencyWithdrawLiquidityTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#463-472)
	- LiquidityPool.getStaker(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#569-571)
	- LiquidityPool.giveMeDayLast() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#564-566)
	- LiquidityPool.giveMeDayStart() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#560-562)
	- LiquidityPool.lockRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#431-440)
	- LiquidityPool.migrateState() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#347-359)
	- LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379)
	- LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460)
	- LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320)
	- LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260)
	- LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409)
	- LiquidityPool.withdrawRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#411-429)
	- thisStaker.hasMigrated = true (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#376)
	LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260) can be used in cross function reentrancies:
	- LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345)
	- LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494)
	- LiquidityPool.emergencyWithdrawLiquidityTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#463-472)
	- LiquidityPool.getStaker(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#569-571)
	- LiquidityPool.giveMeDayLast() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#564-566)
	- LiquidityPool.giveMeDayStart() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#560-562)
	- LiquidityPool.lockRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#431-440)
	- LiquidityPool.migrateState() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#347-359)
	- LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379)
	- LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460)
	- LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320)
	- LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260)
	- LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409)
	- LiquidityPool.withdrawRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#411-429)
	- thisStaker.lockedRewardBalance = 10E18 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#378)
	LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260) can be used in cross function reentrancies:
	- LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345)
	- LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494)
	- LiquidityPool.emergencyWithdrawLiquidityTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#463-472)
	- LiquidityPool.getStaker(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#569-571)
	- LiquidityPool.giveMeDayLast() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#564-566)
	- LiquidityPool.giveMeDayStart() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#560-562)
	- LiquidityPool.lockRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#431-440)
	- LiquidityPool.migrateState() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#347-359)
	- LiquidityPool.migrateTokens() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#361-379)
	- LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460)
	- LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320)
	- LiquidityPool.stakers (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#260)
	- LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409)
	- LiquidityPool.withdrawRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#411-429)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

LiquidityPool.constructor() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#269-283) ignores return value by pampToken.approve(address(uniswapV2),100000000000E18) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#282)
LiquidityPool.updateUinswapV2(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#507-510) ignores return value by pampToken.approve(address(uniswapV2),100000000E18) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#509)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

LiquidityPool.transferOwnership(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#556-558) should emit an event for: 
	- owner = _newOwner (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#557) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

LiquidityPool.updateRewardAdjustmentFactor(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#528-530) should emit an event for: 
	- rewardAdjustmentFactor = _rewardAdjustmentFactor (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#529) 
LiquidityPool.updateExponentialDaysMax(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#540-542) should emit an event for: 
	- exponentialDaysMax = _exponentialDaysMax (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#541) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

LiquidityPool.transferOwnership(address)._newOwner (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#556) lacks a zero-check on :
		- owner = _newOwner (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#557)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345):
	External calls:
	- pampToken.transferFrom(msg.sender,address(this),_numTokensToInvest) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#323)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidityETH{value: msg.value}(address(pampToken),_numTokensToInvest,0,0,address(this),now + 86400) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#324)
	External calls sending eth:
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidityETH{value: msg.value}(address(pampToken),_numTokensToInvest,0,0,address(this),now + 86400) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#324)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#329)
	- thisStaker.lastTimestamp = block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#330)
	- thisStaker.startTimestamp = block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#338)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#340)
	- thisStaker.hasMigrated = true (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#343)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#344)
Reentrancy in LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320):
	External calls:
	- uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#293)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#302)
	- thisStaker.lastTimestamp = block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#303)
	- thisStaker.startTimestamp = block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#311)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#313)
	- thisStaker.hasMigrated = true (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#317)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(numPoolTokensToStake) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#318)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#306)
	- percent > 1 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#307)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#310)
LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#333)
	- percent > 1 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#334)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#337)
LiquidityPool.withdrawLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#382-409) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(thisStaker.hasMigrated,You must migrate) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#388)
	- require(bool,string)(thisStaker.poolTokenBalance >= numPoolTokensToWithdraw,Pool token balance too low) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#390)
	- require(bool)(daysStaked >= minStakeDurationDays) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#394)
LiquidityPool.withdrawRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#411-429) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(daysStaked >= minStakeDurationDays) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#417)
	- require(bool,string)(thisStaker.hasMigrated,You must migrate) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#418)
LiquidityPool.lockRewards() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#431-440) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(thisStaker.hasMigrated,You must migrate) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#435)
LiquidityPool.reinvestRewards(bool,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442-460) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(thisStaker.hasMigrated) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#445)
LiquidityPool.calculateTokensOwed(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#474-494) uses timestamp for comparisons
	Dangerous comparisons:
	- totalDaysStaked > exponentialDaysMax (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#483)
LiquidityPool.mulDiv(uint256,uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#574-594) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(h < z) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#576)
	- mm > l (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#578)
LiquidityPool.fullMul(uint256,uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#596-601) uses timestamp for comparisons
	Dangerous comparisons:
	- mm < l (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#600)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#7)
solc-0.6.12 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

LiquidityPool (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#225-606) should inherit from PreviousLiquidityContract (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#212-215)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Struct LiquidityPool.staker (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#252-258) is not in CapWords
Parameter LiquidityPool.addLiquidity(uint256)._numTokensToInvest (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256)._numTokensToReinvest (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#442) is not in mixedCase
Parameter LiquidityPool.updateUniswapPair(address)._uniswapPair (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#503) is not in mixedCase
Parameter LiquidityPool.updateUinswapV2(address)._uniswapv2 (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#507) is not in mixedCase
Parameter LiquidityPool.updatePampToken(address)._pampToken (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#512) is not in mixedCase
Parameter LiquidityPool.updateMinter(address)._minter (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#516) is not in mixedCase
Parameter LiquidityPool.updatePreviousLiquidityContract(address)._previousContract (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#520) is not in mixedCase
Parameter LiquidityPool.updateMinStakeDurationDays(uint256)._minStakeDurationDays (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#524) is not in mixedCase
Parameter LiquidityPool.updateRewardAdjustmentFactor(uint256)._rewardAdjustmentFactor (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#528) is not in mixedCase
Parameter LiquidityPool.updateStakingEnabled(bool)._stakingEnbaled (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#532) is not in mixedCase
Parameter LiquidityPool.updateExponentialRewardsEnabled(bool)._exponentialRewards (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#536) is not in mixedCase
Parameter LiquidityPool.updateExponentialDaysMax(uint256)._exponentialDaysMax (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#540) is not in mixedCase
Parameter LiquidityPool.updateMigrationEnabled(bool)._migrationEnabled (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#544) is not in mixedCase
Parameter LiquidityPool.transferPampTokens(uint256)._numTokens (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#548) is not in mixedCase
Parameter LiquidityPool.transferEth(uint256)._eth (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#552) is not in mixedCase
Parameter LiquidityPool.transferOwnership(address)._newOwner (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#556) is not in mixedCase
Parameter LiquidityPool.getStaker(address)._staker (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#569) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

LiquidityPool.constructor() (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#269-283) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000000E18) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#282)
LiquidityPool.stakeLiquidityTokens(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#286-320) uses literals with too many digits:
	- percent = mulDiv(1000000,numPoolTokensToStake,thisStaker.poolTokenBalance) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#305)
LiquidityPool.addLiquidity(uint256) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#322-345) uses literals with too many digits:
	- percent = mulDiv(1000000,liquidity,thisStaker.poolTokenBalance) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#332)
LiquidityPool.updateUinswapV2(address) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#507-510) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol#509)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
./0x3c9bdc41ef0c823a43bd16fe2392a9217dc70215.sol analyzed (6 contracts with 94 detectors), 62 result(s) found

real	0m3.021s
user	0m2.803s
sys	0m0.220s
