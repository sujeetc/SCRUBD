'solc --version' running
'solc ./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol:
./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol:113:95: Warning: This looks like an address but has an invalid checksum. If this is not used as an address, please prepend '00'. Correct checksummed address: '0xd7630D881355151850f62DF8c101a978C8EA01f0'. For more information please see https://solidity.readthedocs.io/en/develop/types.html#address-literals
    MonkeyInterfaceForForwarder constant private MonkeyKingCorp = MonkeyInterfaceForForwarder(0xd7630d881355151850f62df8c101a978c8ea01f0);
                                                                                              ^----------------------------------------^
./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol:114:75: Warning: This looks like an address but has an invalid checksum. If this is not used as an address, please prepend '00'. Correct checksummed address: '0x61C279b55538fbb6fCAccBf84673bAe6b5308788'. For more information please see https://solidity.readthedocs.io/en/develop/types.html#address-literals
    PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x61c279b55538fbb6fcaccbf84673bae6b5308788);
                                                                          ^----------------------------------------^
./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol:1084:27: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function managePlayer(uint256 _pID, LDdatasets.EventReturns memory _eventData_)
                          ^----------^
./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol:1084:5: Warning: Function state mutability can be restricted to pure
    function managePlayer(uint256 _pID, LDdatasets.EventReturns memory _eventData_)
    ^ (Relevant source part starts here and spans across multiple lines).


Reentrancy in MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#767)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	State variables written after the call(s):
	- plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#790)
	MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278)
	- MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240)
	- MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215-1246)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361)
	- MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356-391)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327-354)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393-428)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
	- MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
	- MonkeyScam.withdrawEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1317-1334)
Reentrancy in MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949):
	External calls:
	- _eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#943)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
	State variables written after the call(s):
	- _eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#944)
		- airDropPot_ = airDropPot_.add(_air) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1260)
	MonkeyScam.airDropPot_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#128) can be used in cross function reentrancies:
	- MonkeyScam.airDropPot_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#128)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251-1279)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- _eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#944)
		- plyrRnds_[_pID].mask = (((round_.mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID].mask) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1307)
	MonkeyScam.plyrRnds_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#136) can be used in cross function reentrancies:
	- MonkeyScam.calcUnMaskedEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#958-964)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.getPlayerVaultsHelper(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#664-670)
	- MonkeyScam.plyrRnds_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#136)
	- MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161)
	- MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311)
	- _eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#944)
		- round_.mask = _ppt.add(round_.mask) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1302)
		- round_.pot = _pot.add(_dust).add(round_.pot) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1272)
	MonkeyScam.round_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#141) can be used in cross function reentrancies:
	- MonkeyScam.activate() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1367-1385)
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.calcKeysReceived(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#972-985)
	- MonkeyScam.calcUnMaskedEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#958-964)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251-1279)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.getBuyPrice() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#578-591)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.getPlayerVaultsHelper(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#664-670)
	- MonkeyScam.getTimeLeft() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#599-614)
	- MonkeyScam.iWantXKeys(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#993-1006)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.round_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#141)
	- MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311)
	- MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
Reentrancy in MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145):
	External calls:
	- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	State variables written after the call(s):
	- round_.mask = _ppt.add(round_.mask) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1133)
	MonkeyScam.round_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#141) can be used in cross function reentrancies:
	- MonkeyScam.activate() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1367-1385)
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.calcKeysReceived(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#972-985)
	- MonkeyScam.calcUnMaskedEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#958-964)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251-1279)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.getBuyPrice() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#578-591)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.getPlayerVaultsHelper(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#664-670)
	- MonkeyScam.getTimeLeft() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#599-614)
	- MonkeyScam.iWantXKeys(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#993-1006)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.round_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#141)
	- MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311)
	- MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
Reentrancy in MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#456)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	State variables written after the call(s):
	- _eth = withdrawEarnings(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#459)
		- plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1157)
		- plyr_[_pID].win = 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1328)
		- plyr_[_pID].gen = 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1329)
		- plyr_[_pID].aff = 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1330)
	MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278)
	- MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240)
	- MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215-1246)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361)
	- MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356-391)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327-354)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393-428)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
	- MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
	- MonkeyScam.withdrawEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1317-1334)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

NameFilter.nameFilter(string) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1534-1596) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

MonkeyScam.getPlayerVaultsHelper(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#664-670) performs a multiplication on the result of a division:
	- (((((round_.mask).add(((((round_.pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_.keys))).mul(plyrRnds_[_pID].keys)) / 1000000000000000000)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#669)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) performs a multiplication on the result of a division:
	- _gen = (_pot.mul(potSplit_)) / 100 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1111)
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1114)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) performs a multiplication on the result of a division:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1114)
	- _dust = _gen.sub((_ppt.mul(round_.keys)) / 1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1115)
MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184) performs a multiplication on the result of a division:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_.end) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1177)
MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184) performs a multiplication on the result of a division:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1175)
MonkeyScam.airdrop() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1191-1210) performs a multiplication on the result of a division:
	- (seed - ((seed / 1000) * 1000)) < airDropTracker_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1206)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311) performs a multiplication on the result of a division:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1301)
	- _pearn = (_ppt.mul(_keys)) / (1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1306)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311) performs a multiplication on the result of a division:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1301)
	- (_gen.sub((_ppt.mul(round_.keys)) / (1000000000000000000))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1310)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#755)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792) uses a dangerous strict equality:
	- _now > round_.end && round_.ended == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#763)
MonkeyScam.calcKeysReceived(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#972-985) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#981)
MonkeyScam.getBuyPrice() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#578-591) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#587)
MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659) uses a dangerous strict equality:
	- now > round_.end && round_.ended == false && round_.plyr != 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#629)
MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659) uses a dangerous strict equality:
	- round_.plyr == _pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#632)
MonkeyScam.iWantXKeys(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#993-1006) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1002)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#805)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839) uses a dangerous strict equality:
	- _now > round_.end && round_.ended == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#816)
MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184) uses a dangerous strict equality:
	- _now > round_.end && round_.plyr == 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1174)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#250)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	State variables written after the call(s):
	- plyr_[_pID].laff = _affID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#272)
	MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278)
	- MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240)
	- MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215-1246)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361)
	- MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356-391)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327-354)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393-428)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
	- MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
	- MonkeyScam.withdrawEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1317-1334)
Reentrancy in MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#220)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	State variables written after the call(s):
	- plyr_[_pID].laff = _affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#235)
	MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278)
	- MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240)
	- MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215-1246)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361)
	- MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356-391)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327-354)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393-428)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
	- MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
	- MonkeyScam.withdrawEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1317-1334)
Reentrancy in MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#288)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	State variables written after the call(s):
	- plyr_[_pID].laff = _affID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#310)
	MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792)
	- MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278)
	- MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240)
	- MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215-1246)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361)
	- MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203)
	- MonkeyScam.getCurrentRoundInfo() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#685-702)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659)
	- MonkeyScam.plyr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#135)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356-391)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327-354)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393-428)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
	- MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
	- MonkeyScam.withdrawEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1317-1334)
Reentrancy in MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078):
	External calls:
	- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
	- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
	- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	State variables written after the call(s):
	- pIDxAddr_[msg.sender] = _pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1061)
	MonkeyScam.pIDxAddr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#133) can be used in cross function reentrancies:
	- MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278)
	- MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240)
	- MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078)
	- MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717-738)
	- MonkeyScam.pIDxAddr_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#133)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356-391)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327-354)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393-428)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
	- MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._prize (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#888) is a local variable never initialized
MonkeyScam.reLoadXid(uint256,uint256)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#334) is a local variable never initialized
MonkeyScam.reLoadXname(bytes32,uint256)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#400) is a local variable never initialized
MonkeyScam.reLoadXaddr(address,uint256)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#363) is a local variable never initialized
MonkeyScam.withdraw()._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#452) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Reentrancy in MonkeyScam.determinePID(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047-1078):
	External calls:
	- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
	- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
	- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	State variables written after the call(s):
	- pIDxName_[_name] = _pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1066)
	- plyrNames_[_pID][_name] = true (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1068)
	- plyr_[_pID].addr = msg.sender (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1062)
	- plyr_[_pID].name = _name (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1067)
	- plyr_[_pID].laff = _laff (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1072)
Reentrancy in MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#456)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	State variables written after the call(s):
	- _eth = withdrawEarnings(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#459)
		- plyrRnds_[_pID].mask = _earnings.add(plyrRnds_[_pID].mask) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1159)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#767)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	Event emitted after the call(s):
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#774-786)
Reentrancy in MonkeyScam.buyXaddr(address) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242-278):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#250)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#277)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	External calls sending eth:
	- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#277)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1229)
		- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#277)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#774-786)
		- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#277)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1345-1360)
		- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#277)
Reentrancy in MonkeyScam.buyXid(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212-240):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#220)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	- buyCore(_pID,_affCode,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#239)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	External calls sending eth:
	- buyCore(_pID,_affCode,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#239)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1229)
		- buyCore(_pID,_affCode,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#239)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#774-786)
		- buyCore(_pID,_affCode,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#239)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1345-1360)
		- buyCore(_pID,_affCode,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#239)
Reentrancy in MonkeyScam.buyXname(bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280-316):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#288)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#315)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	External calls sending eth:
	- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#315)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1229)
		- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#315)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#774-786)
		- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#315)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1345-1360)
		- buyCore(_pID,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#315)
Reentrancy in MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949):
	External calls:
	- _eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#943)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
	Event emitted after the call(s):
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1345-1360)
		- endTx(_pID,_eth,_keys,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#947)
Reentrancy in MonkeyScam.fallback() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#188-203):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#196)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1056)
		- _name = PlayerBook.getPlayerName(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1057)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1058)
	- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#202)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	External calls sending eth:
	- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#202)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1229)
		- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#202)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#774-786)
		- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#202)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1345-1360)
		- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#202)
Reentrancy in MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#819)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	Event emitted after the call(s):
	- MonkeyEvents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#826-837)
Reentrancy in MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536):
	External calls:
	- (_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#530)
	Event emitted after the call(s):
	- MonkeyEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#535)
Reentrancy in MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552):
	External calls:
	- (_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#546)
	Event emitted after the call(s):
	- MonkeyEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#551)
Reentrancy in MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568):
	External calls:
	- (_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#562)
	Event emitted after the call(s):
	- MonkeyEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#567)
Reentrancy in MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#456)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	External calls sending eth:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#456)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	- plyr_[_pID].addr.transfer(_eth) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#463)
	Event emitted after the call(s):
	- MonkeyEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#470-482)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.end && round_.ended == false && round_.plyr != 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#449)
MonkeyScam.getBuyPrice() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#578-591) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#587)
MonkeyScam.getTimeLeft() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#599-614) uses timestamp for comparisons
	Dangerous comparisons:
	- _now < round_.end (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#607)
	- _now > round_.strt + rndGap_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#608)
MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659) uses timestamp for comparisons
	Dangerous comparisons:
	- now > round_.end && round_.ended == false && round_.plyr != 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#629)
	- round_.plyr == _pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#632)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#755)
	- _now > round_.end && round_.ended == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#763)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#805)
	- _now > round_.end && round_.ended == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#816)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses timestamp for comparisons
	Dangerous comparisons:
	- round_.plyr != _pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#874)
MonkeyScam.calcKeysReceived(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#972-985) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#981)
MonkeyScam.iWantXKeys(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#993-1006) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1002)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) uses timestamp for comparisons
	Dangerous comparisons:
	- _dust > 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1116)
MonkeyScam.updateGenVault(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150-1161) uses timestamp for comparisons
	Dangerous comparisons:
	- _earnings > 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1154)
MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.end && round_.plyr == 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1174)
	- _newTime < (rndMax_).add(_now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1180)
MonkeyScam.airdrop() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1191-1210) uses timestamp for comparisons
	Dangerous comparisons:
	- (seed - ((seed / 1000) * 1000)) < airDropTracker_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1206)
MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251-1279) uses timestamp for comparisons
	Dangerous comparisons:
	- _dust > 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1268)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

NameFilter.nameFilter(string) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1534-1596) uses assembly
	- INLINE ASM (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1592-1595)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496) compares to a boolean constant:
	-_now > round_.end && round_.ended == false && round_.plyr != 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#449)
MonkeyScam.getPlayerVaults(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623-659) compares to a boolean constant:
	-now > round_.end && round_.ended == false && round_.plyr != 0 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#629)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792) compares to a boolean constant:
	-_now > round_.end && round_.ended == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#763)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839) compares to a boolean constant:
	-_now > round_.end && round_.ended == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#816)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) compares to a boolean constant:
	-airdrop() == true (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#885)
MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014-1030) compares to a boolean constant:
	-plyrNames_[_pID][_name] == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1028)
MonkeyScam.receivePlayerNameList(uint256,bytes32) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1035-1041) compares to a boolean constant:
	-plyrNames_[_pID][_name] == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1039)
MonkeyScam.activate() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1367-1385) compares to a boolean constant:
	-require(bool,string)(activated_ == false,dogscam already activated) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1378)
MonkeyScam.isActivated() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#155-158) compares to a boolean constant:
	-require(bool,string)(activated_ == true,its not ready yet) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#156)
NameFilter.nameFilter(string) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1534-1596) compares to a boolean constant:
	-_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1584)
NameFilter.nameFilter(string) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1534-1596) compares to a boolean constant:
	-_hasNonNumber == false (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1566)
NameFilter.nameFilter(string) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1534-1596) compares to a boolean constant:
	-require(bool,string)(_hasNonNumber == true,string cannot be only numbers) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1589)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Version constraint ^0.4.24 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- ^0.4.24 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1)
solc-0.4.24 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145):
	- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
Low level call in MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215-1246):
	- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1235)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Event MonkeyEvents.onNewName(uint256,address,bytes32,bool,uint256,address,bytes32,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#6-17) is not in CapWords
Event MonkeyEvents.onEndTx(uint256,uint256,bytes32,address,uint256,uint256,address,bytes32,uint256,uint256,uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#20-35) is not in CapWords
Event MonkeyEvents.onWithdraw(uint256,address,bytes32,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#38-45) is not in CapWords
Event MonkeyEvents.onWithdrawAndDistribute(address,bytes32,uint256,uint256,uint256,address,bytes32,uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#48-60) is not in CapWords
Event MonkeyEvents.onBuyAndDistribute(address,bytes32,uint256,uint256,uint256,address,bytes32,uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#64-76) is not in CapWords
Event MonkeyEvents.onReLoadAndDistribute(address,bytes32,uint256,uint256,address,bytes32,uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#80-91) is not in CapWords
Event MonkeyEvents.onAffiliatePayout(uint256,address,bytes32,uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#94-102) is not in CapWords
Contract modularMonkeyScam (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#105) is not in CapWords
Parameter MonkeyScam.buyXid(uint256)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#212) is not in mixedCase
Parameter MonkeyScam.buyXaddr(address)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#242) is not in mixedCase
Parameter MonkeyScam.buyXname(bytes32)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#280) is not in mixedCase
Parameter MonkeyScam.reLoadXid(uint256,uint256)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327) is not in mixedCase
Parameter MonkeyScam.reLoadXid(uint256,uint256)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#327) is not in mixedCase
Parameter MonkeyScam.reLoadXaddr(address,uint256)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356) is not in mixedCase
Parameter MonkeyScam.reLoadXaddr(address,uint256)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#356) is not in mixedCase
Parameter MonkeyScam.reLoadXname(bytes32,uint256)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393) is not in mixedCase
Parameter MonkeyScam.reLoadXname(bytes32,uint256)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#393) is not in mixedCase
Parameter MonkeyScam.registerNameXID(string,uint256,bool)._nameString (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522) is not in mixedCase
Parameter MonkeyScam.registerNameXID(string,uint256,bool)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522) is not in mixedCase
Parameter MonkeyScam.registerNameXID(string,uint256,bool)._all (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522) is not in mixedCase
Parameter MonkeyScam.registerNameXaddr(string,address,bool)._nameString (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538) is not in mixedCase
Parameter MonkeyScam.registerNameXaddr(string,address,bool)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538) is not in mixedCase
Parameter MonkeyScam.registerNameXaddr(string,address,bool)._all (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538) is not in mixedCase
Parameter MonkeyScam.registerNameXname(string,bytes32,bool)._nameString (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554) is not in mixedCase
Parameter MonkeyScam.registerNameXname(string,bytes32,bool)._affCode (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554) is not in mixedCase
Parameter MonkeyScam.registerNameXname(string,bytes32,bool)._all (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554) is not in mixedCase
Parameter MonkeyScam.getPlayerVaults(uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#623) is not in mixedCase
Parameter MonkeyScam.getPlayerVaultsHelper(uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#664) is not in mixedCase
Parameter MonkeyScam.getPlayerInfoByAddress(address)._addr (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#717) is not in mixedCase
Parameter MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748) is not in mixedCase
Parameter MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns)._affID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748) is not in mixedCase
Parameter MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._affID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._affID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845) is not in mixedCase
Parameter MonkeyScam.calcUnMaskedEarnings(uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#958) is not in mixedCase
Parameter MonkeyScam.calcKeysReceived(uint256)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#972) is not in mixedCase
Parameter MonkeyScam.iWantXKeys(uint256)._keys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#993) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._addr (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._name (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._laff (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1014) is not in mixedCase
Parameter MonkeyScam.receivePlayerNameList(uint256,bytes32)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1035) is not in mixedCase
Parameter MonkeyScam.receivePlayerNameList(uint256,bytes32)._name (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1035) is not in mixedCase
Parameter MonkeyScam.determinePID(LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1047) is not in mixedCase
Parameter MonkeyScam.managePlayer(uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1084) is not in mixedCase
Parameter MonkeyScam.endRound(LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097) is not in mixedCase
Parameter MonkeyScam.updateGenVault(uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1150) is not in mixedCase
Parameter MonkeyScam.updateTimer(uint256)._keys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._affID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1215) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._keys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1251) is not in mixedCase
Parameter MonkeyScam.updateMasks(uint256,uint256,uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285) is not in mixedCase
Parameter MonkeyScam.updateMasks(uint256,uint256,uint256)._gen (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285) is not in mixedCase
Parameter MonkeyScam.updateMasks(uint256,uint256,uint256)._keys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285) is not in mixedCase
Parameter MonkeyScam.withdrawEarnings(uint256)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1317) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._keys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339) is not in mixedCase
Constant MonkeyScam.MonkeyKingCorp (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#113) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.PlayerBook (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#114) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.rndInit_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#121) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.rndInc_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#122) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.rndMax_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#123) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter LDKeysCalc.keysRec(uint256,uint256)._curEth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1459) is not in mixedCase
Parameter LDKeysCalc.keysRec(uint256,uint256)._newEth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1459) is not in mixedCase
Parameter LDKeysCalc.ethRec(uint256,uint256)._curKeys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1473) is not in mixedCase
Parameter LDKeysCalc.ethRec(uint256,uint256)._sellKeys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1473) is not in mixedCase
Parameter LDKeysCalc.keys(uint256)._eth (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1486) is not in mixedCase
Parameter LDKeysCalc.eth(uint256)._keys (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1499) is not in mixedCase
Parameter NameFilter.nameFilter(string)._input (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1534) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496):
	External calls:
	- plyr_[_pID].addr.transfer(_eth) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#463)
	External calls sending eth:
	- _eventData_ = endRound(_eventData_) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#456)
		- ! address(MonkeyKingCorp).call.value(_com)(bytes4(keccak256()(deposit()))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1126)
	- plyr_[_pID].addr.transfer(_eth) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#463)
	Event emitted after the call(s):
	- MonkeyEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#470-482)
Reentrancy in MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496):
	External calls:
	- plyr_[_pID].addr.transfer(_eth) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#491)
	Event emitted after the call(s):
	- MonkeyEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#494)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

MonkeyScam.withdraw() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#434-496) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#466)
MonkeyScam.getBuyPrice() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#578-591) uses literals with too many digits:
	- ((round_.keys.add(1000000000000000000)).ethRec(1000000000000000000)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#588)
MonkeyScam.getBuyPrice() (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#578-591) uses literals with too many digits:
	- (75000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#590)
MonkeyScam.getPlayerVaultsHelper(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#664-670) uses literals with too many digits:
	- (((((round_.mask).add(((((round_.pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_.keys))).mul(plyrRnds_[_pID].keys)) / 1000000000000000000)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#669)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#748-792) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#770)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#798-839) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#822)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- round_.eth < 100000000000000000000 && plyrRnds_[_pID].eth.add(_eth) > 10000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#853)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _availableLimit = (10000000000000000000).sub(plyrRnds_[_pID].eth) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#855)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eth > 1000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#862)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _keys >= 1000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#869)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eth >= 100000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#882)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eth >= 10000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#889)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eventData_.compressedData += 300000000000000000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#899)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eth >= 1000000000000000000 && _eth < 10000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#900)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eventData_.compressedData += 200000000000000000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#909)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eth >= 100000000000000000 && _eth < 1000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#910)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eventData_.compressedData += 100000000000000000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#919)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eventData_.compressedData += 10000000000000000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#922)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#845-949) uses literals with too many digits:
	- _eventData_.compressedData += _prize * 1000000000000000000000000000000000 (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#924)
MonkeyScam.calcUnMaskedEarnings(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#958-964) uses literals with too many digits:
	- ((((round_.mask).mul(plyrRnds_[_pID].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID].mask)) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#963)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) uses literals with too many digits:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1114)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) uses literals with too many digits:
	- _dust = _gen.sub((_ppt.mul(round_.keys)) / 1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1115)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (round_.end * 1000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1136)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1097-1145) uses literals with too many digits:
	- _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1137)
MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184) uses literals with too many digits:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1175)
MonkeyScam.updateTimer(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1166-1184) uses literals with too many digits:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_.end) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1177)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311) uses literals with too many digits:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1301)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311) uses literals with too many digits:
	- _pearn = (_ppt.mul(_keys)) / (1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1306)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311) uses literals with too many digits:
	- plyrRnds_[_pID].mask = (((round_.mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID].mask) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1307)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1285-1311) uses literals with too many digits:
	- (_gen.sub((_ppt.mul(round_.keys)) / (1000000000000000000))) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1310)
MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1339-1361) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1342)
LDKeysCalc.keys(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1486-1492) uses literals with too many digits:
	- ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1491)
LDKeysCalc.eth(uint256) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1499-1505) uses literals with too many digits:
	- ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq()) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#1504)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

MonkeyScam.fees_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#145) should be constant 
MonkeyScam.potSplit_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#146) should be constant 
MonkeyScam.rndGap_ (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#118) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

registerNameXID(string,uint256,bool) should be declared external:
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#522-536)
registerNameXaddr(string,address,bool) should be declared external:
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#538-552)
registerNameXname(string,bytes32,bool) should be declared external:
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol#554-568)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x06ef66ab59919e1c3b25ad4732a002f644fe0f8e.sol analyzed (9 contracts with 94 detectors), 199 result(s) found

real	0m10.786s
user	0m10.464s
sys	0m0.322s
