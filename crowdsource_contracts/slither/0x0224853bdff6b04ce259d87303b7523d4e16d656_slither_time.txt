'solc --version' running
'solc ./0x0224853bdff6b04ce259d87303b7523d4e16d656.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0224853bdff6b04ce259d87303b7523d4e16d656.sol:
./0x0224853bdff6b04ce259d87303b7523d4e16d656.sol:452:5: Warning: Function state mutability can be restricted to pure
    function __callback(bytes32 myid, string result, bytes proof) public {
    ^ (Relevant source part starts here and spans across multiple lines).


Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#481)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
		- oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#458)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	State variables written after the call(s):
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
		- OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#415)
		- OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#420)
		- OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#425)
		- OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#430)
		- OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#435)
		- OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#439)
		- OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#443)
	usingOraclize.OAR (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#392) can be used in cross function reentrancies:
	- usingOraclize.oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#395-403)
	- usingOraclize.oraclize_setNetwork() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#413-447)
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	usingOraclize.oraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#394) can be used in cross function reentrancies:
	- usingOraclize.oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#395-403)
	- usingOraclize.oraclize_cbAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#838-840)
	- usingOraclize.oraclize_getPrice(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#457-459)
	- usingOraclize.oraclize_getPrice(string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#461-463)
	- usingOraclize.oraclize_query(string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#480-484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

FidaSale.DECIMALS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1552) shadows:
	- BonusProgram.DECIMALS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#81)
FidaSale.contractManager (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1541) shadows:
	- BountyProgram.contractManager (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#263)
FidaSale.contractName (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1543) shadows:
	- BountyProgram.contractName (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#261)
FidaSale.mintableFida (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1548) shadows:
	- BountyProgram.mintableFida (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#265)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing

usingOraclize.getCodeSize(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#852-856) is declared view but contains assembly code
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1277-1297) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- oraclize_getPrice(URL,gasLimit) > address(this).balance (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1432)
		- oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#462)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
		- oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#458)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	State variables written after the call(s):
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
		- OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#415)
		- OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#420)
		- OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#425)
		- OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#430)
		- OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#435)
		- OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#439)
		- OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#443)
	usingOraclize.OAR (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#392) can be used in cross function reentrancies:
	- usingOraclize.oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#395-403)
	- usingOraclize.oraclize_setNetwork() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#413-447)
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	usingOraclize.oraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#394) can be used in cross function reentrancies:
	- usingOraclize.oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#395-403)
	- usingOraclize.oraclize_cbAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#838-840)
	- usingOraclize.oraclize_getPrice(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#457-459)
	- usingOraclize.oraclize_getPrice(string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#461-463)
	- usingOraclize.oraclize_query(string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#480-484)
Reentrancy in usingOraclize.oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#395-403):
	External calls:
	- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
	- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	State variables written after the call(s):
	- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

PriceChecker.constructor(address)._priceCheckerAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1416) lacks a zero-check on :
		- priceCheckerAddress = _priceCheckerAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1417)
BountyProgram.constructor(string,address,address,address)._bountyAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#288) lacks a zero-check on :
		- bountyAddress = _bountyAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#290)
FidaSale.constructor(string,address,address,address,address,address,address,string,string)._wallet (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1654) lacks a zero-check on :
		- wallet = _wallet (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1660)
FidaSale.constructor(string,address,address,address,address,address,address,string,string)._btcTokenBoughtAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1654) lacks a zero-check on :
		- btcTokenBoughtAddress = _btcTokenBoughtAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1661)
FidaSale.constructor(string,address,address,address,address,address,address,string,string)._whitelistingAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1654) lacks a zero-check on :
		- whitelistingAddress = _whitelistingAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1662)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in PriceChecker.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446-1455):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1447)
		- oraclize.cbAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#839)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	State variables written after the call(s):
	- ETHEUR = _result (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1450)
	- fidaPerEther = parseInt(_result,5) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1452)
Reentrancy in FidaSale._investAsBonusProgram(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1790-1803):
	External calls:
	- _depositTokens(_beneficiary,amountTokensWithBonus) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1796)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	State variables written after the call(s):
	- bonusProgramEnded = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1801)
Reentrancy in FidaSale._investAsEarlybird(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1772-1783):
	External calls:
	- earlybird.addAmountBoughtAsMember(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1775)
	- _depositTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1776)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	State variables written after the call(s):
	- earlybirdEnded = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1781)
Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- oraclize_getPrice(URL,gasLimit) > address(this).balance (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1432)
		- oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#462)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
		- oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#458)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	State variables written after the call(s):
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#481)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	External calls sending eth:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	State variables written after the call(s):
	- ids[id] = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1436)
Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#481)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
		- oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#458)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	State variables written after the call(s):
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in FidaSale.buyTokens(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1826-1844):
	External calls:
	- require(bool)(fidaToken.totalSupply() < 24750 * 10 ** 3 * 10 ** DECIMALS) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1832)
	- _investAsBonusProgram(_beneficiary,amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1840)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	State variables written after the call(s):
	- _investAsBonusProgram(_beneficiary,amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1840)
		- bonusProgramEnded = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1801)
Reentrancy in FidaSale.finishedSale() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1890-1898):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1891)
	State variables written after the call(s):
	- finished = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1895)
Reentrancy in usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087-1130):
	External calls:
	- sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1095)
		- oraclize.randomDS_getSessionPubKeyHash() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#849)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	- queryId = oraclize_query(random,args,_customGasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1111)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#690)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	External calls sending eth:
	- queryId = oraclize_query(random,args,_customGasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1111)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	State variables written after the call(s):
	- queryId = oraclize_query(random,args,_customGasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1111)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
	- oraclize_randomDS_setCommitment(queryId,keccak256()(delay_bytes8_left,args[1],sha256()(args[0]),args[2])) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1128)
		- oraclize_randomDS_args[queryId] = commitment (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1133)
Reentrancy in usingOraclize.oraclize_query(string,string[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#529-533):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#532)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#506)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#529)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#532)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#532)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#534-538):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#537)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#512)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#534)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#537)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#537)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#539-543):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#542)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#518)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#539)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#542)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#542)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#544-548):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#547)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#524)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#544)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#547)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#547)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#550-555):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#554)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#506)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#550)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#554)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#554)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#556-561):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#560)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#512)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#556)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#560)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#560)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#562-567):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#566)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#518)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#562)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#566)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#566)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#568-573):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#572)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#524)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#568)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#572)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#572)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#574-580):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#579)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#506)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#574)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#579)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#579)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#581-587):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#586)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#512)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#581)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#586)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#586)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#588-594):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#593)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#518)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#588)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#593)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#593)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#595-601):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#600)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#524)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#595)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#600)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#600)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#603-610):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#609)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#506)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#603)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#609)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#609)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#611-618):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#617)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#512)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#611)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#617)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#617)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#619-626):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#625)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#518)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#619)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#625)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#625)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#627-634):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#633)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#524)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#627)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#633)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#633)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#635-643):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#642)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#506)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#635)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#642)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#509)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#642)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#644-652):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#651)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#512)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#644)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#651)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#515)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#651)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#653-661):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#660)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#518)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#653)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#660)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#521)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#660)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,string[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#662-670):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#669)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#524)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#662)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#669)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#527)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#669)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#695-699):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#698)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#672)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#695)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#698)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#698)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#700-704):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#703)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#678)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#700)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#703)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#703)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#705-709):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#708)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#684)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#705)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#708)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#708)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#710-714):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#713)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#690)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#710)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#713)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#713)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#716-721):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#720)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#672)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#716)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#720)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#720)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#722-727):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#726)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#678)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#722)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#726)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#726)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#728-733):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#732)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#684)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#728)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#732)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#732)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#734-739):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#738)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#690)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#734)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#738)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#738)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#740-746):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#745)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#672)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#740)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#745)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#745)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#747-753):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#752)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#678)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#747)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#752)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#752)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#754-760):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#759)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#684)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#754)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#759)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#759)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#761-767):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#766)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#690)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#761)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#766)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#766)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#769-776):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#775)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#672)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#769)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#775)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#775)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#777-784):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#783)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#678)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#777)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#783)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#783)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#785-792):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#791)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#684)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#785)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#791)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#791)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#793-800):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#799)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#690)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#793)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#799)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#799)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#801-809):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#808)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#672)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#801)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#808)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#675)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#808)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#810-818):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#817)
		- price = oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#678)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#810)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#817)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#681)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#817)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#819-827):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#826)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#684)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#819)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#826)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#687)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#826)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#828-836):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#835)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#690)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	- oraclizeAPI() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#828)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#835)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#693)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#835)
		- oraclize_network_name = _network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1080)
Reentrancy in BountyProgram.setBountyWalletAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#299-308):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#300)
	State variables written after the call(s):
	- bountyAddress = _walletAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#305)
Reentrancy in FidaSale.setBtcTokenBoughtAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1703-1712):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1704)
	State variables written after the call(s):
	- btcTokenBoughtAddress = _address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1709)
Reentrancy in FidaSale.setWalletAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1688-1697):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1689)
	State variables written after the call(s):
	- wallet = _walletAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1694)
Reentrancy in FidaSale.setWhitelistingAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1718-1727):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1719)
	State variables written after the call(s):
	- whitelistingAddress = _address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1724)
Reentrancy in FidaSale.startSale() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1877-1885):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1878)
	State variables written after the call(s):
	- started = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1882)
Reentrancy in FidaSale.tokensBoughtWithBTC(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1851-1865):
	External calls:
	- require(bool)(fidaToken.totalSupply() < 24750 * 10 ** 3 * 10 ** DECIMALS) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1857)
	- _investAsBonusProgram(_beneficiary,_tokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1863)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	State variables written after the call(s):
	- _investAsBonusProgram(_beneficiary,_tokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1863)
		- bonusProgramEnded = true (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1801)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in PriceChecker.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446-1455):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1447)
		- oraclize.cbAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#839)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	Event emitted after the call(s):
	- PriceUpdated(_id,_result) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1454)
Reentrancy in FidaSale._investAsBonusProgram(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1790-1803):
	External calls:
	- _depositTokens(_beneficiary,amountTokensWithBonus) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1796)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	Event emitted after the call(s):
	- BoughtBonusProgram(_beneficiary,_amountTokens,bonusTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1798)
Reentrancy in FidaSale._investAsEarlybird(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1772-1783):
	External calls:
	- earlybird.addAmountBoughtAsMember(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1775)
	- _depositTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1776)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	Event emitted after the call(s):
	- BoughtEarlyBird(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1778)
Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- oraclize_getPrice(URL,gasLimit) > address(this).balance (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1432)
		- oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#462)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
		- oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#458)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	Event emitted after the call(s):
	- OraclizeQueryNotSend(Oraclize query was NOT sent, please add some ETH to cover for the query fee,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1433)
Reentrancy in PriceChecker._updatePrice() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1431-1439):
	External calls:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#481)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
		- oraclize.getPrice(datasource) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#458)
		- address(oraclize) != OAR.getAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#399)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#400)
	External calls sending eth:
	- id = oraclize_query(URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHEUR).result.XETHZEUR.a[0],gasLimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1435)
		- oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#483)
	Event emitted after the call(s):
	- NewOraclizeQuery(id,oraclize_getPrice(URL)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1437)
Reentrancy in FidaSale.buyTokens(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1826-1844):
	External calls:
	- require(bool)(fidaToken.totalSupply() < 24750 * 10 ** 3 * 10 ** DECIMALS) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1832)
	- _investAsEarlybird(_beneficiary,amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1838)
		- earlybird.addAmountBoughtAsMember(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1775)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	Event emitted after the call(s):
	- BoughtEarlyBird(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1778)
		- _investAsEarlybird(_beneficiary,amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1838)
Reentrancy in FidaSale.buyTokens(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1826-1844):
	External calls:
	- require(bool)(fidaToken.totalSupply() < 24750 * 10 ** 3 * 10 ** DECIMALS) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1832)
	- _investAsBonusProgram(_beneficiary,amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1840)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	Event emitted after the call(s):
	- BoughtBonusProgram(_beneficiary,_amountTokens,bonusTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1798)
		- _investAsBonusProgram(_beneficiary,amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1840)
Reentrancy in FidaSale.finishedSale() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1890-1898):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1891)
	Event emitted after the call(s):
	- FinishedSale() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1897)
Reentrancy in BountyProgram.setBountyWalletAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#299-308):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#300)
	Event emitted after the call(s):
	- BountyWalletAddressChanged(oldAddress,_walletAddress) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#307)
Reentrancy in FidaSale.setBtcTokenBoughtAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1703-1712):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1704)
	Event emitted after the call(s):
	- BtcTokenBoughtAddressChanged(oldAddress,_address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1711)
Reentrancy in FidaSale.setWalletAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1688-1697):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1689)
	Event emitted after the call(s):
	- WalletAddressChanged(oldAddress,_walletAddress) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1696)
Reentrancy in FidaSale.setWhitelistingAddress(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1718-1727):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1719)
	Event emitted after the call(s):
	- WhitelistingAddressChanged(oldAddress,_address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1726)
Reentrancy in FidaSale.startSale() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1877-1885):
	External calls:
	- require(bool)(contractManager.authorize(contractName,msg.sender)) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1878)
	Event emitted after the call(s):
	- StartedSale() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1884)
Reentrancy in FidaSale.tokensBoughtWithBTC(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1851-1865):
	External calls:
	- require(bool)(fidaToken.totalSupply() < 24750 * 10 ** 3 * 10 ** DECIMALS) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1857)
	- _investAsEarlybird(_beneficiary,_tokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1861)
		- earlybird.addAmountBoughtAsMember(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1775)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	Event emitted after the call(s):
	- BoughtEarlyBird(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1778)
		- _investAsEarlybird(_beneficiary,_tokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1861)
Reentrancy in FidaSale.tokensBoughtWithBTC(address,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1851-1865):
	External calls:
	- require(bool)(fidaToken.totalSupply() < 24750 * 10 ** 3 * 10 ** DECIMALS) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1857)
	- _investAsBonusProgram(_beneficiary,_tokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1863)
		- mintableFida.sendBoughtTokens(_beneficiary,_amountTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1819)
	Event emitted after the call(s):
	- BoughtBonusProgram(_beneficiary,_amountTokens,bonusTokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1798)
		- _investAsBonusProgram(_beneficiary,_tokens) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1863)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

usingOraclize.getCodeSize(address) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#852-856) uses assembly
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#853-856)
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087-1130) uses assembly
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1096-1102)
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1103-1107)
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1115-1128)
usingOraclize.verifySig(bytes32,bytes,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1139-1165) uses assembly
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1153-1159)
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1277-1297) uses assembly
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1288-1292)
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1301-1326) uses assembly
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1312-1325)
usingOraclize.ecrecovery(bytes32,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1329-1367) uses assembly
	- INLINE ASM (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1340-1360)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1167-1200) compares to a boolean constant:
	-sigok == false (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1184)
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1212-1220) compares to a boolean constant:
	-proofVerified == false (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1217)
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1234-1274) compares to a boolean constant:
	-oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1269)
PriceChecker.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446-1455) compares to a boolean constant:
	-require(bool)(ids[_id] == true) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1448)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

usingOraclize.ba2cbor(bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1035-1075) is never used and should be removed
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1277-1297) is never used and should be removed
usingOraclize.ecrecovery(bytes32,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1329-1367) is never used and should be removed
usingOraclize.indexOf(string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#896-921) is never used and should be removed
usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1222-1232) is never used and should be removed
usingOraclize.oraclize_getNetworkName() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1083-1085) is never used and should be removed
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087-1130) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#695-699) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#710-714) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#716-721) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#734-739) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#740-746) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#761-767) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#769-776) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#793-800) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#801-809) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#828-836) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#671-676) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#689-694) is never used and should be removed
usingOraclize.oraclize_query(string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#465-469) is never used and should be removed
usingOraclize.oraclize_query(string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#485-489) is never used and should be removed
usingOraclize.oraclize_query(string,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#500-504) is never used and should be removed
usingOraclize.oraclize_query(string,string[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#529-533) is never used and should be removed
usingOraclize.oraclize_query(string,string[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#544-548) is never used and should be removed
usingOraclize.oraclize_query(string,string[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#550-555) is never used and should be removed
usingOraclize.oraclize_query(string,string[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#568-573) is never used and should be removed
usingOraclize.oraclize_query(string,string[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#574-580) is never used and should be removed
usingOraclize.oraclize_query(string,string[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#595-601) is never used and should be removed
usingOraclize.oraclize_query(string,string[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#603-610) is never used and should be removed
usingOraclize.oraclize_query(string,string[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#627-634) is never used and should be removed
usingOraclize.oraclize_query(string,string[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#635-643) is never used and should be removed
usingOraclize.oraclize_query(string,string[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#662-670) is never used and should be removed
usingOraclize.oraclize_query(string,string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#505-510) is never used and should be removed
usingOraclize.oraclize_query(string,string[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#523-528) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#700-704) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#705-709) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#722-727) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#728-733) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#747-753) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#754-760) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#777-784) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#785-792) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#810-818) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#819-827) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#677-682) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#683-688) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#470-474) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#490-494) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#495-499) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#475-479) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#534-538) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#539-543) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#556-561) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#562-567) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#581-587) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#588-594) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#611-618) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#619-626) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#644-652) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#653-661) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#511-516) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#517-522) is never used and should be removed
usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#848-850) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1234-1274) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1212-1220) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1167-1200) is never used and should be removed
usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1132-1134) is never used and should be removed
usingOraclize.oraclize_setCustomGasPrice(uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#844-846) is never used and should be removed
usingOraclize.oraclize_setProof(bytes1) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#841-843) is never used and should be removed
usingOraclize.parseAddr(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#858-876) is never used and should be removed
usingOraclize.parseInt(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#953-955) is never used and should be removed
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1301-1326) is never used and should be removed
usingOraclize.strCompare(string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#878-894) is never used and should be removed
usingOraclize.strConcat(string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#948-950) is never used and should be removed
usingOraclize.strConcat(string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#944-946) is never used and should be removed
usingOraclize.strConcat(string,string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#940-942) is never used and should be removed
usingOraclize.strConcat(string,string,string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#923-938) is never used and should be removed
usingOraclize.stra2cbor(string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#993-1033) is never used and should be removed
usingOraclize.uint2str(uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#976-991) is never used and should be removed
usingOraclize.verifySig(bytes32,bytes,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1139-1165) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

FidaSale.INITIAL_BONUSLIST_TOKENS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1566) is set pre-construction with a non-constant function or state variable:
	- 150 * 10 ** 5 * 10 ** DECIMALS
FidaSale.INITIAL_EARLYBIRD_TOKENS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1568) is set pre-construction with a non-constant function or state variable:
	- 50 * 10 ** 5 * 10 ** DECIMALS
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.4.23 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- ^0.4.23 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1)
	- ^0.4.23 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#357)
solc-0.4.23 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter BountyProgram.setBountyWalletAddress(address)._walletAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#299) is not in mixedCase
Parameter BountyProgram.giveBounty(uint256,address)._tokens (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#315) is not in mixedCase
Parameter BountyProgram.giveBounty(uint256,address)._address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#315) is not in mixedCase
Variable BountyProgram.TOKENS_IN_BOUNTY (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#256) is not in mixedCase
Function OraclizeI.query_withGasLimit(uint256,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#362) is not in mixedCase
Function OraclizeI.query2_withGasLimit(uint256,string,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#364) is not in mixedCase
Function OraclizeI.queryN_withGasLimit(uint256,string,bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#366) is not in mixedCase
Function OraclizeI.randomDS_getSessionPubKeyHash() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#371) is not in mixedCase
Contract usingOraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#376-1369) is not in CapWords
Function usingOraclize.oraclize_setNetwork(uint8) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#409-412) is not in mixedCase
Function usingOraclize.oraclize_setNetwork() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#413-447) is not in mixedCase
Function usingOraclize.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#449-451) is not in mixedCase
Function usingOraclize.__callback(bytes32,string,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#452-455) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#457-459) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#461-463) is not in mixedCase
Function usingOraclize.oraclize_query(string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#465-469) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#470-474) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#475-479) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#480-484) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#485-489) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#490-494) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#495-499) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#500-504) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#505-510) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#511-516) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#517-522) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#523-528) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#529-533) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#534-538) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#539-543) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#544-548) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#550-555) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#556-561) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#562-567) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#568-573) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#574-580) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#581-587) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#588-594) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#595-601) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#603-610) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#611-618) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#619-626) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#627-634) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#635-643) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#644-652) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#653-661) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#662-670) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#671-676) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#677-682) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#683-688) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#689-694) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#695-699) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#700-704) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#705-709) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#710-714) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#716-721) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#722-727) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#728-733) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#734-739) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#740-746) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#747-753) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#754-760) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#761-767) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#769-776) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#777-784) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#785-792) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#793-800) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#801-809) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#810-818) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#819-827) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5],uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#828-836) is not in mixedCase
Function usingOraclize.oraclize_cbAddress() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#838-840) is not in mixedCase
Function usingOraclize.oraclize_setProof(bytes1) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#841-843) is not in mixedCase
Function usingOraclize.oraclize_setCustomGasPrice(uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#844-846) is not in mixedCase
Function usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#848-850) is not in mixedCase
Parameter usingOraclize.parseAddr(string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#858) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#878) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._b (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#878) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._haystack (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#896) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._needle (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#896) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#923) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._b (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#923) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._c (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#923) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._d (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#923) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._e (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#923) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#940) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._b (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#940) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._c (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#940) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._d (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#940) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#944) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._b (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#944) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._c (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#944) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#948) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._b (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#948) is not in mixedCase
Parameter usingOraclize.parseInt(string)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#953) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._a (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#958) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._b (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#958) is not in mixedCase
Function usingOraclize.oraclize_setNetworkName(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1079-1081) is not in mixedCase
Parameter usingOraclize.oraclize_setNetworkName(string)._network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1079) is not in mixedCase
Function usingOraclize.oraclize_getNetworkName() (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1083-1085) is not in mixedCase
Function usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087-1130) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._delay (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._nbytes (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._customGasLimit (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1087) is not in mixedCase
Function usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1132-1134) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1167-1200) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1212-1220) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._queryId (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1212) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._result (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1212) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._proof (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1212) is not in mixedCase
Parameter usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256).n_random_bytes (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1222) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1234-1274) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string).context_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1234) is not in mixedCase
Function usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1301-1326) is not in mixedCase
Constant usingOraclize.day (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#377) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.week (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#378) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.month (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#379) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_NONE (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#380) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_TLSNotary (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#381) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Android (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#382) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Ledger (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#383) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Native (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#384) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofStorage_IPFS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#385) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_auto (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#386) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_mainnet (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#387) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_testnet (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#388) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_morden (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#389) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_consensys (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#390) is not in UPPER_CASE_WITH_UNDERSCORES
Variable usingOraclize.OAR (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#392) is not in mixedCase
Variable usingOraclize.oraclize_network_name (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1078) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_args (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1136) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_sessionKeysHashVerified (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1137) is not in mixedCase
Modifier usingOraclize.oraclize_randomDS_proofVerify(bytes32,string,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1202-1210) is not in mixedCase
Function PriceChecker.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446-1455) is not in mixedCase
Parameter PriceChecker.__callback(bytes32,string)._id (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446) is not in mixedCase
Parameter PriceChecker.__callback(bytes32,string)._result (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446) is not in mixedCase
Parameter PriceChecker.changeGasLimit(uint256)._gasLimit (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1460) is not in mixedCase
Variable PriceChecker.ETHEUR (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1384) is not in mixedCase
Parameter FidaSale.setWalletAddress(address)._walletAddress (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1688) is not in mixedCase
Parameter FidaSale.setBtcTokenBoughtAddress(address)._address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1703) is not in mixedCase
Parameter FidaSale.setWhitelistingAddress(address)._address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1718) is not in mixedCase
Parameter FidaSale.setWhitelistStatus(address,bool)._address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1734) is not in mixedCase
Parameter FidaSale.setWhitelistStatus(address,bool)._whitelisted (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1734) is not in mixedCase
Parameter FidaSale.getWhitelistStatus(address)._address (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1747) is not in mixedCase
Parameter FidaSale.getAmountFida(uint256)._weiAmount (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1757) is not in mixedCase
Parameter FidaSale.buyTokens(address)._beneficiary (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1826) is not in mixedCase
Parameter FidaSale.tokensBoughtWithBTC(address,uint256)._beneficiary (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1851) is not in mixedCase
Parameter FidaSale.tokensBoughtWithBTC(address,uint256)._tokens (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1851) is not in mixedCase
Variable FidaSale.DECIMALS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1552) is not in mixedCase
Variable FidaSale.INITIAL_BONUSLIST_TOKENS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1566) is not in mixedCase
Variable FidaSale.INITIAL_EARLYBIRD_TOKENS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1568) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "networkID (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#411)" inusingOraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#376-1369)
Redundant expression "myid (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#454)" inusingOraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#376-1369)
Redundant expression "result (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#454)" inusingOraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#376-1369)
Redundant expression "proof (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#454)" inusingOraclize (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#376-1369)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

usingOraclize.oraclize_query(string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#465-469) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#467)
usingOraclize.oraclize_query(uint256,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#470-474) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#472)
usingOraclize.oraclize_query(string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#485-489) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#487)
usingOraclize.oraclize_query(uint256,string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#490-494) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#492)
usingOraclize.oraclize_query(string,string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#505-510) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#507)
usingOraclize.oraclize_query(uint256,string,string[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#511-516) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#513)
usingOraclize.oraclize_query(string,bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#671-676) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#673)
usingOraclize.oraclize_query(uint256,string,bytes[]) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#677-682) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#679)
FidaSale.getAmountFida(uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1757-1765) uses literals with too many digits:
	- _fidaAmount = _weiAmount.mul(fidaPerEther).div(100000) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1762)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

BountyProgram.TOKENS_IN_BOUNTY (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#256) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.day (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#377) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.week (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#378) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.month (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#379) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.proofType_NONE (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#380) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.proofType_TLSNotary (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#381) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.proofType_Android (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#382) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.proofType_Ledger (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#383) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.proofType_Native (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#384) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.proofStorage_IPFS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#385) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.networkID_mainnet (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#387) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.networkID_testnet (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#388) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.networkID_morden (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#389) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
usingOraclize.networkID_consensys (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#390) is never used in FidaSale (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1529-1900)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

BountyProgram.TOKENS_IN_BOUNTY (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#256) should be constant 
FidaSale.DECIMALS (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1552) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

query2(uint256,string,string,string) should be declared external:
	- OraclizeI.query2(uint256,string,string,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#363)
queryN(uint256,string,bytes) should be declared external:
	- OraclizeI.queryN(uint256,string,bytes) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#365)
getPrice(string) should be declared external:
	- OraclizeI.getPrice(string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#367)
getPrice(string,uint256) should be declared external:
	- OraclizeI.getPrice(string,uint256) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#368)
__callback(bytes32,string) should be declared external:
	- PriceChecker.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#1446-1455)
	- usingOraclize.__callback(bytes32,string) (0x0224853bdff6b04ce259d87303b7523d4e16d656.sol#449-451)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x0224853bdff6b04ce259d87303b7523d4e16d656.sol analyzed (13 contracts with 94 detectors), 363 result(s) found

real	0m19.841s
user	0m19.465s
sys	0m0.370s
