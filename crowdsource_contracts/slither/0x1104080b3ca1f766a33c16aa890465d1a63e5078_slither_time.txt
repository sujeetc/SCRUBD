'solc --version' running
'solc ./0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol:
Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
   --> 0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol:291:2:
    |
291 | 	constructor () public {
    | 	^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to pure
   --> 0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol:644:2:
    |
644 | 	function name() external view returns (string memory) {
    | 	^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to pure
   --> 0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol:647:2:
    |
647 | 	function symbol() external view returns (string memory) {
    | 	^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to pure
   --> 0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol:653:2:
    |
653 | 	function totalSupply() external view override returns (uint256) {
    | 	^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size is 37548 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> 0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol:318:1:
    |
318 | contract RedKnightToken is IERC20, Ownable {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988):
	External calls:
	- _swapTokensForETH(amountToSwapForETH) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#966)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	External calls sending eth:
	- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
	- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
	- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	State variables written after the call(s):
	- _buyBackFee = buyBackFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#987)
	RedKnightToken._buyBackFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#400) can be used in cross function reentrancies:
	- RedKnightToken._adjustTaxes(bool,bool,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#820-896)
	- RedKnightToken._getTValues(uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#773-783)
	- RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988)
	- _devFee = devFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#986)
	RedKnightToken._devFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#398) can be used in cross function reentrancies:
	- RedKnightToken._adjustTaxes(bool,bool,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#820-896)
	- RedKnightToken._getTValues(uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#773-783)
	- RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988)
	- _liquidityFee = liquidityFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#984)
	RedKnightToken._liquidityFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#397) can be used in cross function reentrancies:
	- RedKnightToken._adjustTaxes(bool,bool,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#820-896)
	- RedKnightToken._getTValues(uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#773-783)
	- RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988)
	- _marketingFee = marketingFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#985)
	RedKnightToken._marketingFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#399) can be used in cross function reentrancies:
	- RedKnightToken._adjustTaxes(bool,bool,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#820-896)
	- RedKnightToken._getTValues(uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#773-783)
	- RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988)
	- _totalFee = totalFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#983)
	RedKnightToken._totalFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#402) can be used in cross function reentrancies:
	- RedKnightToken._adjustTaxes(bool,bool,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#820-896)
	- RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988)
	- RedKnightToken._transfer(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#701-752)
	- RedKnightToken.reflectionFromToken(uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#686-698)
Reentrancy in RedKnightToken._transfer(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#701-752):
	External calls:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	External calls sending eth:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _rOwned[address(this)] += rOther (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#818)
		- _rOwned[sender] = _rOwned[sender] - rAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#763)
		- _rOwned[recipient] = _rOwned[recipient] + rTransferAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#764)
	RedKnightToken._rOwned (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#329) can be used in cross function reentrancies:
	- RedKnightToken._getCurrentSupply() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#800-813)
	- RedKnightToken._takeContractFees(uint256,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#814-819)
	- RedKnightToken._tokenTransfer(address,address,uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#753-768)
	- RedKnightToken.balanceOf(address) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#656-659)
	- RedKnightToken.constructor() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#422-457)
	- RedKnightToken.excludeFromDividends(address,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#608-628)
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _rTotal -= rFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#770)
	RedKnightToken._rTotal (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#335) can be used in cross function reentrancies:
	- RedKnightToken._getCurrentSupply() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#800-813)
	- RedKnightToken._reflectFee(uint256,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#769-772)
	- RedKnightToken.constructor() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#422-457)
	- RedKnightToken.tokenFromReflection(uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#681-685)
	- _swapping = false (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#743)
	RedKnightToken._swapping (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#347) can be used in cross function reentrancies:
	- RedKnightToken._transfer(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#701-752)
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _tOwned[address(this)] += tOther (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#816)
		- _tOwned[sender] = _tOwned[sender] - tAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#758)
		- _tOwned[recipient] = _tOwned[recipient] + tTransferAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#761)
	RedKnightToken._tOwned (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#330) can be used in cross function reentrancies:
	- RedKnightToken._getCurrentSupply() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#800-813)
	- RedKnightToken._takeContractFees(uint256,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#814-819)
	- RedKnightToken._tokenTransfer(address,address,uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#753-768)
	- RedKnightToken.balanceOf(address) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#656-659)
	- RedKnightToken.excludeFromDividends(address,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#608-628)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

RedKnightToken.reflectionFromToken(uint256,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#686-698) performs a multiplication on the result of a division:
	- rTotalFee = tAmount * _totalFee / 100 * currentRate (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#694)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

RedKnightToken._addLiquidity(uint256,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1002-1012) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

RedKnightToken._approve(address,address,uint256).owner (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#483) shadows:
	- Ownable.owner() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#297-299) (function)
RedKnightToken.allowance(address,address).owner (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#663) shadows:
	- Ownable.owner() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#297-299) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Reentrancy in RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988):
	External calls:
	- _swapTokensForETH(amountToSwapForETH) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#966)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	External calls sending eth:
	- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
	- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
	- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	State variables written after the call(s):
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- _allowances[owner][spender] = amount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#486)
Reentrancy in RedKnightToken._transfer(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#701-752):
	External calls:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	External calls sending eth:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _tFeeTotal += tFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#771)
Reentrancy in RedKnightToken.transferFrom(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#470-474):
	External calls:
	- _transfer(sender,recipient,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#471)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#471)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#472)
		- _allowances[owner][spender] = amount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#486)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988):
	External calls:
	- _swapTokensForETH(amountToSwapForETH) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#966)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	External calls sending eth:
	- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
	- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
	- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#487)
		- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
	- SwapAndLiquify(amountToSwapForETH,amountETHLiquidity,amountToLiquify) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#981)
Reentrancy in RedKnightToken._transfer(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#701-752):
	External calls:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	External calls sending eth:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	Event emitted after the call(s):
	- Transfer(sender,recipient,tTransferAmount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#767)
		- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
Reentrancy in RedKnightToken.claimETHOverflow() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#634-641):
	External calls:
	- (success,None) = address(owner()).call{value: amount}() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#637)
	Event emitted after the call(s):
	- ClaimETHOverflow(amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#639)
Reentrancy in RedKnightToken.transferFrom(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#470-474):
	External calls:
	- _transfer(sender,recipient,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#471)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#994-1000)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#471)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#487)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#472)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

RedKnightToken.blockAccount(address) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#535-543) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((currentTimestamp - _launchStartTimestamp) < _blockedTimeLimit,RedKnightToken: Time to block accounts has expired) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#539)
RedKnightToken.isInLaunch() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#666-674) uses timestamp for comparisons
	Dangerous comparisons:
	- _isLaunched && ((currentTimestamp - _launchStartTimestamp) < totalLaunchTime || (block.number - _launchBlockNumber) < _launch1.blocksInPeriod) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#669)
	- ! isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#667)
RedKnightToken._adjustTaxes(bool,bool,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#820-896) uses timestamp for comparisons
	Dangerous comparisons:
	- _isLaunched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#846)
	- _isLaunched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#877)
	- ! isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#822)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#140-146) uses assembly
	- INLINE ASM (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#142-144)
Address._verifyCallResult(bool,bytes,string) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#255-272) uses assembly
	- INLINE ASM (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#264-267)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

RedKnightToken.excludeFromDividends(address,bool) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#608-628) has costly operations inside a loop:
	- _excludedFromDividends.pop() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#622)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Context._msgData() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#280-283) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint 0.8.13 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- StorageWriteRemovalBeforeConditionalTermination
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- InlineAssemblyMemorySideEffects
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- 0.8.13 (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#148-159):
	- (success,None) = recipient.call{value: amount}() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#154)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#190-206):
	- (success,returndata) = target.call{value: value}(data) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#202-204)
Low level call in Address.functionStaticCall(address,bytes,string) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#221-230):
	- (success,returndata) = target.staticcall(data) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#228)
Low level call in Address.functionDelegateCall(address,bytes,string) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#244-253):
	- (success,returndata) = target.delegatecall(data) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#251)
Low level call in RedKnightToken.claimETHOverflow() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#634-641):
	- (success,None) = address(owner()).call{value: amount}() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#637)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IRouter.WETH() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#49) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnBuy(uint8,uint8,uint8,uint8,uint8)._liquidityFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#572) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnBuy(uint8,uint8,uint8,uint8,uint8)._marketingFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#572) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnBuy(uint8,uint8,uint8,uint8,uint8)._devFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#572) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnBuy(uint8,uint8,uint8,uint8,uint8)._buyBackFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#572) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnBuy(uint8,uint8,uint8,uint8,uint8)._holdersFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#572) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnSell(uint8,uint8,uint8,uint8,uint8)._liquidityFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#576) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnSell(uint8,uint8,uint8,uint8,uint8)._marketingFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#576) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnSell(uint8,uint8,uint8,uint8,uint8)._devFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#576) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnSell(uint8,uint8,uint8,uint8,uint8)._buyBackFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#576) is not in mixedCase
Parameter RedKnightToken.setBaseFeesOnSell(uint8,uint8,uint8,uint8,uint8)._holdersFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#576) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._liquidityFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#581) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._marketingFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#581) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._devFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#581) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._buyBackFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#581) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._holdersFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#581) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnSell(uint8,uint8,uint8,uint8,uint8)._liquidityFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#585) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnSell(uint8,uint8,uint8,uint8,uint8)._marketingFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#585) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnSell(uint8,uint8,uint8,uint8,uint8)._devFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#585) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnSell(uint8,uint8,uint8,uint8,uint8)._buyBackFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#585) is not in mixedCase
Parameter RedKnightToken.setLaunch2FeesOnSell(uint8,uint8,uint8,uint8,uint8)._holdersFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#585) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._liquidityFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#590) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._marketingFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#590) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._devFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#590) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._buyBackFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#590) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnBuy(uint8,uint8,uint8,uint8,uint8)._holdersFeeOnBuy (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#590) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnSell(uint8,uint8,uint8,uint8,uint8)._liquidityFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#594) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnSell(uint8,uint8,uint8,uint8,uint8)._marketingFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#594) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnSell(uint8,uint8,uint8,uint8,uint8)._devFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#594) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnSell(uint8,uint8,uint8,uint8,uint8)._buyBackFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#594) is not in mixedCase
Parameter RedKnightToken.setLaunch3FeesOnSell(uint8,uint8,uint8,uint8,uint8)._holdersFeeOnSell (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#594) is not in mixedCase
Constant RedKnightToken._name (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#325) is not in UPPER_CASE_WITH_UNDERSCORES
Constant RedKnightToken._symbol (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#326) is not in UPPER_CASE_WITH_UNDERSCORES
Constant RedKnightToken._decimals (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#327) is not in UPPER_CASE_WITH_UNDERSCORES
Constant RedKnightToken._tTotal (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#334) is not in UPPER_CASE_WITH_UNDERSCORES
Constant RedKnightToken._blockedTimeLimit (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#387) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#281)" inContext (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#275-284)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in RedKnightToken._swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#953-988):
	External calls:
	- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
	- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
	- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	External calls sending eth:
	- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
	- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
	- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
	State variables written after the call(s):
	- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
		- _allowances[owner][spender] = amount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#486)
	- _buyBackFee = buyBackFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#987)
	- _devFee = devFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#986)
	- _liquidityFee = liquidityFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#984)
	- _marketingFee = marketingFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#985)
	- _totalFee = totalFeePrior (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#983)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#487)
		- _addLiquidity(amountToLiquify,amountETHLiquidity) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#980)
	- SwapAndLiquify(amountToSwapForETH,amountETHLiquidity,amountToLiquify) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#981)
Reentrancy in RedKnightToken._transfer(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#701-752):
	External calls:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	External calls sending eth:
	- _swapAndLiquify() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#742)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _rOwned[address(this)] += rOther (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#818)
		- _rOwned[sender] = _rOwned[sender] - rAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#763)
		- _rOwned[recipient] = _rOwned[recipient] + rTransferAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#764)
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _rTotal -= rFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#770)
	- _swapping = false (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#743)
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _tFeeTotal += tFee (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#771)
	- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
		- _tOwned[address(this)] += tOther (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#816)
		- _tOwned[sender] = _tOwned[sender] - tAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#758)
		- _tOwned[recipient] = _tOwned[recipient] + tTransferAmount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#761)
	Event emitted after the call(s):
	- Transfer(sender,recipient,tTransferAmount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#767)
		- _tokenTransfer(from,to,amount,takeFee) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#751)
Reentrancy in RedKnightToken.transferFrom(address,address,uint256) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#470-474):
	External calls:
	- _transfer(sender,recipient,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#471)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#471)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#1004-1011)
		- address(marketingWallet).transfer(amountETHMarketing) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#975)
		- address(devWallet).transfer(amountETHDev) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#976)
		- address(buyBackWallet).transfer(amountETHBuyBack) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#977)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#472)
		- _allowances[owner][spender] = amount (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#486)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#487)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#472)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

RedKnightToken.slitherConstructorVariables() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#318-1014) uses literals with too many digits:
	- maxTxAmount = _tTotal * 530 / 100000 (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#345)
RedKnightToken.slitherConstructorVariables() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#318-1014) uses literals with too many digits:
	- minimumTokensBeforeSwap = _tTotal * 250 / 1000000 (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#350)
RedKnightToken.slitherConstructorConstantVariables() (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#318-1014) uses literals with too many digits:
	- _tTotal = 999000000000000 * 10 ** 18 (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#334)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

RedKnightToken._default (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#384) is never used in RedKnightToken (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#318-1014)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Loop condition i < _excludedFromDividends.length (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#803) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

RedKnightToken.dead (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#352) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

RedKnightToken.uniswapV2Router (0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol#322) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x1104080b3ca1f766a33c16aa890465d1a63e5078.sol analyzed (8 contracts with 94 detectors), 73 result(s) found

real	0m4.068s
user	0m3.843s
sys	0m0.227s
