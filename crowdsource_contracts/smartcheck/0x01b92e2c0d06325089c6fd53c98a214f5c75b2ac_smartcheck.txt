./0x01b92e2c0d06325089c6fd53c98a214f5c75b2ac.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: adc165
severity: 1
line: 101
column: 35
content: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 124
column: 44
content: 0xdead

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 125
column: 45
content: 0xdeaf

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 126
column: 44
content: 0xdeed

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 307
column: 23
content: (actionTo,0,0,actionValue,address(0),actionTokenAmount,address(0),details,flags,data)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 319
column: 23
content: (memberToKick,0,0,0,address(0),0,address(0),details,flags,"")

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 332
column: 23
content: (address(0),0,0,0,tokenToWhitelist,0,address(0),details,flags,"")

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 228
column: 8
content: for(uint256i=0;i<_summoner.length;i++){growGuild(_summoner[i],_summonerShares[i],0);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 651
column: 8
content: for(uint256i=0;i<approvedTokens.length;i++){uint256amountToRagequit=fairShare(userTokenBalances[GUILD][approvedTokens[i]],sharesAndLootToBurn,initialTotalSharesAndLoot);if(amountToRagequit>0){userTokenBalances[GUILD][approvedTokens[i]]-=amountToRagequit;userTokenBalances[memberAddress][approvedTokens[i]]+=amountToRagequit;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 228
column: 8
content: for(uint256i=0;i<_summoner.length;i++){growGuild(_summoner[i],_summonerShares[i],0);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 651
column: 8
content: for(uint256i=0;i<approvedTokens.length;i++){uint256amountToRagequit=fairShare(userTokenBalances[GUILD][approvedTokens[i]],sharesAndLootToBurn,initialTotalSharesAndLoot);if(amountToRagequit>0){userTokenBalances[GUILD][approvedTokens[i]]-=amountToRagequit;userTokenBalances[memberAddress][approvedTokens[i]]+=amountToRagequit;}}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 92
column: 0
content: contractMYSTICisReentrancyGuard{usingSafeERC20forIERC20;usingSafeMathforuint256;addresspublicdepositToken;addresspublicstakeToken;addresspublicconstantwETH=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;uint256publicproposalDeposit;uint256publicprocessingReward;uint256publicperiodDuration;uint256publicvotingPeriodLength;uint256publicgracePeriodLength;uint256publicdilutionBound;uint256publicsummoningTime;boolprivateinitialized;uint256constantMAX_GUILD_BOUND=10**36;uint256constantMAX_TOKEN_WHITELIST_COUNT=400;uint256constantMAX_TOKEN_GUILDBANK_COUNT=200;uint8publicconstantdecimals=18;stringpublicname;stringpublicconstantsymbol="DAO";addresspublicconstantGUILD=address(0xdead);addresspublicconstantESCROW=address(0xdeaf);addresspublicconstantTOTAL=address(0xdeed);uint256publicproposalCount;uint256publictotalShares;uint256publictotalLoot;uint256publictotalSupply;uint256publictotalGuildBankTokens;mapping(address=>uint256)publicbalanceOf;mapping(address=>mapping(address=>uint256))publicallowance;mapping(address=>mapping(address=>uint256))privateuserTokenBalances;address[]publicapprovedTokens;mapping(address=>bool)publictokenWhitelist;uint256[]publicproposalQueue;mapping(uint256=>bytes)publicactions;mapping(uint256=>Proposal)publicproposals;mapping(address=>bool)publicproposedToWhitelist;mapping(address=>bool)publicproposedToKick;mapping(address=>Member)publicmembers;mapping(address=>address)publicmemberAddressByDelegateKey;eventSubmitProposal(addressindexedapplicant,uint256sharesRequested,uint256lootRequested,uint256tributeOffered,addresstributeToken,uint256paymentRequested,addresspaymentToken,bytes32details,uint8[8]flags,bytesdata,uint256proposalId,addressindexeddelegateKey,addressindexedmemberAddress);eventCancelProposal(uint256indexedproposalId,addressapplicantAddress);eventSponsorProposal(addressindexeddelegateKey,addressindexedmemberAddress,uint256proposalId,uint256proposalIndex,uint256startingPeriod);eventSubmitVote(uint256proposalId,uint256indexedproposalIndex,addressindexeddelegateKey,addressindexedmemberAddress,uint8uintVote);eventProcessProposal(uint256indexedproposalIndex,uint256indexedproposalId,booldidPass);eventProcessActionProposal(uint256indexedproposalIndex,uint256indexedproposalId,booldidPass);eventProcessGuildKickProposal(uint256indexedproposalIndex,uint256indexedproposalId,booldidPass);eventProcessWhitelistProposal(uint256indexedproposalIndex,uint256indexedproposalId,booldidPass);eventUpdateDelegateKey(addressindexedmemberAddress,addressnewDelegateKey);eventRagequit(addressindexedmemberAddress,uint256sharesToBurn,uint256lootToBurn);eventTokensCollected(addressindexedtoken,uint256amountToCollect);eventWithdraw(addressindexedmemberAddress,addresstoken,uint256amount);eventConvertSharesToLoot(addressindexedmemberAddress,uint256amount);eventStakeTokenForShares(addressindexedmemberAddress,uint256amount);eventApproval(addressindexedowner,addressindexedspender,uint256amount);eventTransfer(addressindexedsender,addressindexedrecipient,uint256amount);enumVote{Null,Yes,No}structMember{addressdelegateKey;uint8exists;uint256shares;uint256loot;uint256highestIndexYesVote;uint256jailed;}structProposal{addressapplicant;addressproposer;addresssponsor;addresstributeToken;addresspaymentToken;uint8[8]flags;uint256sharesRequested;uint256lootRequested;uint256paymentRequested;uint256tributeOffered;uint256startingPeriod;uint256yesVotes;uint256noVotes;uint256maxTotalSharesAndLootAtYesVote;bytes32details;mapping(address=>Vote)votesByMember;}modifieronlyDelegate{require(members[memberAddressByDelegateKey[msg.sender]].shares>0,"!delegate");_;}functioninit(address_depositToken,address_stakeToken,address[]memory_summoner,uint256[]memory_summonerShares,uint256_summonerDeposit,uint256_proposalDeposit,uint256_processingReward,uint256_periodDuration,uint256_votingPeriodLength,uint256_gracePeriodLength,uint256_dilutionBound,stringmemory_guildName)external{require(!initialized,"initialized");require(_depositToken!=_stakeToken,"depositToken = stakeToken");require(_summoner.length==_summonerShares.length,"summoner != summonerShares");require(_proposalDeposit>=_processingReward,"_processingReward > _proposalDeposit");for(uint256i=0;i<_summoner.length;i++){growGuild(_summoner[i],_summonerShares[i],0);}require(totalShares<=MAX_GUILD_BOUND,"guild maxed");tokenWhitelist[_depositToken]=true;approvedTokens.push(_depositToken);if(_summonerDeposit>0){totalGuildBankTokens+=1;unsafeAddToBalance(GUILD,_depositToken,_summonerDeposit);}depositToken=_depositToken;stakeToken=_stakeToken;proposalDeposit=_proposalDeposit;processingReward=_processingReward;periodDuration=_periodDuration;votingPeriodLength=_votingPeriodLength;gracePeriodLength=_gracePeriodLength;dilutionBound=_dilutionBound;summoningTime=now;name=_guildName;initialized=true;}functionsubmitProposal(addressapplicant,uint256sharesRequested,uint256lootRequested,uint256tributeOffered,addresstributeToken,uint256paymentRequested,addresspaymentToken,bytes32details)externalnonReentrantpayablereturns(uint256proposalId){require(sharesRequested.add(lootRequested)<=MAX_GUILD_BOUND,"guild maxed");require(tokenWhitelist[tributeToken],"tributeToken != whitelist");require(tokenWhitelist[paymentToken],"paymentToken != whitelist");require(applicant!=GUILD&&applicant!=ESCROW&&applicant!=TOTAL,"applicant unreservable");require(members[applicant].jailed==0,"applicant jailed");if(tributeOffered>0&&userTokenBalances[GUILD][tributeToken]==0){require(totalGuildBankTokens<MAX_TOKEN_GUILDBANK_COUNT,"guildbank maxed");}if(msg.value>0){require(tributeToken==wETH&&msg.value==tributeOffered,"!ethBalance");(boolsuccess,)=wETH.call<missing ';'>{value:msg.value}("");require(success,"!ethCall");IERC20(wETH).safeTransfer(address(this),msg.value);}else{IERC20(tributeToken).safeTransferFrom(msg.sender,address(this),tributeOffered);}unsafeAddToBalance(ESCROW,tributeToken,tributeOffered);uint8[8]memoryflags;flags[7]=1;_submitProposal(applicant,sharesRequested,lootRequested,tributeOffered,tributeToken,paymentRequested,paymentToken,details,flags,"");returnproposalCount-1;}functionsubmitActionProposal(addressactionTo,uint256actionTokenAmount,uint256actionValue,bytes32details,bytescalldatadata)externalnonReentrantreturns(uint256proposalId){uint8[8]memoryflags;flags[6]=1;_submitProposal(actionTo,0,0,actionValue,address(0),actionTokenAmount,address(0),details,flags,data);returnproposalCount-1;}functionsubmitGuildKickProposal(addressmemberToKick,bytes32details)externalnonReentrantreturns(uint256proposalId){Membermemorymember=members[memberToKick];require(member.shares>0||member.loot>0,"!share||loot");require(members[memberToKick].jailed==0,"jailed");uint8[8]memoryflags;flags[5]=1;_submitProposal(memberToKick,0,0,0,address(0),0,address(0),details,flags,"");returnproposalCount-1;}functionsubmitWhitelistProposal(addresstokenToWhitelist,bytes32details)externalnonReentrantreturns(uint256proposalId){require(tokenToWhitelist!=address(0),"!token");require(tokenToWhitelist!=stakeToken,"tokenToWhitelist = stakeToken");require(!tokenWhitelist[tokenToWhitelist],"whitelisted");require(approvedTokens.length<MAX_TOKEN_WHITELIST_COUNT,"whitelist maxed");uint8[8]memoryflags;flags[4]=1;_submitProposal(address(0),0,0,0,tokenToWhitelist,0,address(0),details,flags,"");returnproposalCount-1;}function_submitProposal(addressapplicant,uint256sharesRequested,uint256lootRequested,uint256tributeOffered,addresstributeToken,uint256paymentRequested,addresspaymentToken,bytes32details,uint8[8]memoryflags,bytesmemorydata)internal{Proposalmemoryproposal=Proposal({applicant:applicant,proposer:msg.sender,sponsor:address(0),tributeToken:tributeToken,paymentToken:paymentToken,flags:flags,sharesRequested:sharesRequested,lootRequested:lootRequested,paymentRequested:paymentRequested,tributeOffered:tributeOffered,startingPeriod:0,yesVotes:0,noVotes:0,maxTotalSharesAndLootAtYesVote:0,details:details});if(proposal.flags[6]==1){actions[proposalCount]=data;}proposals[proposalCount]=proposal;emitSubmitProposal(applicant,sharesRequested,lootRequested,tributeOffered,tributeToken,paymentRequested,paymentToken,details,flags,data,proposalCount,msg.sender,memberAddressByDelegateKey[msg.sender]);proposalCount+=1;}functionsponsorProposal(uint256proposalId)externalnonReentrantonlyDelegate{IERC20(depositToken).safeTransferFrom(msg.sender,address(this),proposalDeposit);unsafeAddToBalance(ESCROW,depositToken,proposalDeposit);Proposalstorageproposal=proposals[proposalId];require(proposal.proposer!=address(0),"!proposed");require(proposal.flags[0]==0,"sponsored");require(proposal.flags[3]==0,"cancelled");require(members[proposal.applicant].jailed==0,"applicant jailed");if(proposal.tributeOffered>0&&userTokenBalances[GUILD][proposal.tributeToken]==0){require(totalGuildBankTokens<MAX_TOKEN_GUILDBANK_COUNT,"guildbank maxed");}if(proposal.flags[4]==1){require(!tokenWhitelist[address(proposal.tributeToken)],"whitelisted");require(!proposedToWhitelist[address(proposal.tributeToken)],"whitelist proposed");require(approvedTokens.length<MAX_TOKEN_WHITELIST_COUNT,"whitelist maxed");proposedToWhitelist[address(proposal.tributeToken)]=true;}elseif(proposal.flags[5]==1){require(!proposedToKick[proposal.applicant],"kick proposed");proposedToKick[proposal.applicant]=true;}uint256startingPeriod=max(getCurrentPeriod(),proposalQueue.length==0?0:proposals[proposalQueue[proposalQueue.length-1]].startingPeriod)+1;proposal.startingPeriod=startingPeriod;proposal.sponsor=memberAddressByDelegateKey[msg.sender];proposal.flags[0]=1;proposalQueue.push(proposalId);emitSponsorProposal(msg.sender,proposal.sponsor,proposalId,proposalQueue.length-1,startingPeriod);}functionsubmitVote(uint256proposalIndex,uint8uintVote)externalnonReentrantonlyDelegate{addressmemberAddress=memberAddressByDelegateKey[msg.sender];Memberstoragemember=members[memberAddress];require(proposalIndex<proposalQueue.length,"!proposed");uint256proposalId=proposalQueue[proposalIndex];Proposalstorageproposal=proposals[proposalId];require(uintVote<3,">2");Votevote=Vote(uintVote);require(getCurrentPeriod()>=proposal.startingPeriod,"pending");require(!hasVotingPeriodExpired(proposal.startingPeriod),"expired");require(proposal.votesByMember[memberAddress]==Vote.Null,"voted");require(vote==Vote.Yes||vote==Vote.No,"!Yes||No");proposal.votesByMember[memberAddress]=vote;if(vote==Vote.Yes){proposal.yesVotes+=member.shares;if(proposalIndex>member.highestIndexYesVote){member.highestIndexYesVote=proposalIndex;}if(totalSupply>proposal.maxTotalSharesAndLootAtYesVote){proposal.maxTotalSharesAndLootAtYesVote=totalSupply;}}elseif(vote==Vote.No){proposal.noVotes+=member.shares;}emitSubmitVote(proposalId,proposalIndex,msg.sender,memberAddress,uintVote);}functionprocessProposal(uint256proposalIndex)externalnonReentrant{_validateProposalForProcessing(proposalIndex);uint256proposalId=proposalQueue[proposalIndex];Proposalstorageproposal=proposals[proposalId];require(proposal.flags[7]==1,"!standard");proposal.flags[1]=1;booldidPass=_didPass(proposalIndex);if(totalSupply.add(proposal.sharesRequested).add(proposal.lootRequested)>MAX_GUILD_BOUND){didPass=false;}if(proposal.paymentRequested>userTokenBalances[GUILD][proposal.paymentToken]){didPass=false;}if(proposal.tributeOffered>0&&userTokenBalances[GUILD][proposal.tributeToken]==0&&totalGuildBankTokens>=MAX_TOKEN_GUILDBANK_COUNT){didPass=false;}if(didPass){proposal.flags[2]=1;growGuild(proposal.applicant,proposal.sharesRequested,proposal.lootRequested);if(userTokenBalances[GUILD][proposal.tributeToken]==0&&proposal.tributeOffered>0){totalGuildBankTokens+=1;}unsafeInternalTransfer(ESCROW,GUILD,proposal.tributeToken,proposal.tributeOffered);unsafeInternalTransfer(GUILD,proposal.applicant,proposal.paymentToken,proposal.paymentRequested);if(userTokenBalances[GUILD][proposal.paymentToken]==0&&proposal.paymentRequested>0){totalGuildBankTokens-=1;}}else{unsafeInternalTransfer(ESCROW,proposal.proposer,proposal.tributeToken,proposal.tributeOffered);}_returnDeposit(proposal.sponsor);emitProcessProposal(proposalIndex,proposalId,didPass);}functionprocessActionProposal(uint256proposalIndex)externalnonReentrantreturns(bool,bytesmemory){_validateProposalForProcessing(proposalIndex);uint256proposalId=proposalQueue[proposalIndex];bytesstorageaction=actions[proposalId];Proposalstorageproposal=proposals[proposalId];require(proposal.flags[6]==1,"!action");proposal.flags[1]=1;booldidPass=_didPass(proposalIndex);if(tokenWhitelist[proposal.applicant]&&proposal.paymentRequested>userTokenBalances[GUILD][proposal.applicant]){didPass=false;}if(proposal.tributeOffered>address(this).balance){didPass=false;}if(didPass){proposal.flags[2]=1;(boolsuccess,bytesmemoryreturnData)=proposal.applicant.call<missing ';'>{value:proposal.tributeOffered}(action);if(tokenWhitelist[proposal.applicant]){unsafeSubtractFromBalance(GUILD,proposal.applicant,proposal.paymentRequested);if(userTokenBalances[GUILD][proposal.applicant]==0&&proposal.paymentRequested>0){totalGuildBankTokens-=1;}}return(success,returnData);}_returnDeposit(proposal.sponsor);emitProcessActionProposal(proposalIndex,proposalId,didPass);}functionprocessGuildKickProposal(uint256proposalIndex)externalnonReentrant{_validateProposalForProcessing(proposalIndex);uint256proposalId=proposalQueue[proposalIndex];Proposalstorageproposal=proposals[proposalId];require(proposal.flags[5]==1,"!kick");proposal.flags[1]=1;booldidPass=_didPass(proposalIndex);if(didPass){proposal.flags[2]=1;Memberstoragemember=members[proposal.applicant];member.jailed=proposalIndex;member.loot=member.loot.add(member.shares);totalShares=totalShares.sub(member.shares);totalLoot=totalLoot.add(member.shares);member.shares=0;}proposedToKick[proposal.applicant]=false;_returnDeposit(proposal.sponsor);emitProcessGuildKickProposal(proposalIndex,proposalId,didPass);}functionprocessWhitelistProposal(uint256proposalIndex)externalnonReentrant{_validateProposalForProcessing(proposalIndex);uint256proposalId=proposalQueue[proposalIndex];Proposalstorageproposal=proposals[proposalId];require(proposal.flags[4]==1,"!whitelist");proposal.flags[1]=1;booldidPass=_didPass(proposalIndex);if(approvedTokens.length>=MAX_TOKEN_WHITELIST_COUNT){didPass=false;}if(didPass){proposal.flags[2]=1;tokenWhitelist[address(proposal.tributeToken)]=true;approvedTokens.push(proposal.tributeToken);}proposedToWhitelist[address(proposal.tributeToken)]=false;_returnDeposit(proposal.sponsor);emitProcessWhitelistProposal(proposalIndex,proposalId,didPass);}function_didPass(uint256proposalIndex)internalviewreturns(booldidPass){Proposalmemoryproposal=proposals[proposalQueue[proposalIndex]];if(proposal.yesVotes>proposal.noVotes){didPass=true;}if((totalSupply.mul(dilutionBound))<proposal.maxTotalSharesAndLootAtYesVote){didPass=false;}if(members[proposal.applicant].jailed!=0){didPass=false;}returndidPass;}function_validateProposalForProcessing(uint256proposalIndex)internalview{require(proposalIndex<proposalQueue.length,"!proposal");Proposalmemoryproposal=proposals[proposalQueue[proposalIndex]];require(getCurrentPeriod()>=proposal.startingPeriod.add(votingPeriodLength).add(gracePeriodLength),"!ready");require(proposal.flags[1]==0,"processed");require(proposalIndex==0||proposals[proposalQueue[proposalIndex-1]].flags[1]==1,"prior !processed");}function_returnDeposit(addresssponsor)internal{unsafeInternalTransfer(ESCROW,msg.sender,depositToken,processingReward);unsafeInternalTransfer(ESCROW,sponsor,depositToken,proposalDeposit-processingReward);}functionragequit(uint256sharesToBurn,uint256lootToBurn)externalnonReentrant{require(members[msg.sender].exists==1,"!member");_ragequit(msg.sender,sharesToBurn,lootToBurn);}function_ragequit(addressmemberAddress,uint256sharesToBurn,uint256lootToBurn)internal{uint256initialTotalSharesAndLoot=totalSupply;Memberstoragemember=members[memberAddress];require(member.shares>=sharesToBurn,"!shares");require(member.loot>=lootToBurn,"!loot");require(canRagequit(member.highestIndexYesVote),"!ragequit until highest index proposal member voted YES processes");uint256sharesAndLootToBurn=sharesToBurn.add(lootToBurn);balanceOf[memberAddress]=balanceOf[memberAddress].sub(sharesAndLootToBurn);member.shares=member.shares.sub(sharesToBurn);member.loot=member.loot.sub(lootToBurn);totalShares=totalShares.sub(sharesToBurn);totalLoot=totalLoot.sub(lootToBurn);totalSupply=totalShares.add(totalLoot);for(uint256i=0;i<approvedTokens.length;i++){uint256amountToRagequit=fairShare(userTokenBalances[GUILD][approvedTokens[i]],sharesAndLootToBurn,initialTotalSharesAndLoot);if(amountToRagequit>0){userTokenBalances[GUILD][approvedTokens[i]]-=amountToRagequit;userTokenBalances[memberAddress][approvedTokens[i]]+=amountToRagequit;}}emitRagequit(memberAddress,sharesToBurn,lootToBurn);emitTransfer(memberAddress,address(0),sharesAndLootToBurn);}functionragekick(addressmemberToKick)externalnonReentrantonlyDelegate{Memberstoragemember=members[memberToKick];require(member.jailed!=0,"!jailed");require(member.loot>0,"!loot");require(canRagequit(member.highestIndexYesVote),"!ragequit until highest index proposal member voted YES processes");_ragequit(memberToKick,0,member.loot);}functionwithdrawBalance(addresstoken,uint256amount)externalnonReentrant{_withdrawBalance(token,amount);}functionwithdrawBalances(address[]calldatatokens,uint256[]calldata<missing ')'>amounts,boolmax)externalnonReentrant{require(tokens.length==amounts.length,"tokens != amounts");for(uint256<missing ')'>i=0;i<tokens.length;i++){uint256withdrawAmount=amounts[i];if(max){withdrawAmount=userTokenBalances[msg.sender][tokens[i]];}

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 76
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 77
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 78
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 109
column: 9
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 135
column: 52
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 94
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 11
column: 4
content: functionisContract(addressaccount)internalviewreturns(bool){bytes32codehash;bytes32accountHash=0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;assembly{codehash:=extcodehash(account)}return(codehash!=accountHash&&codehash!=0x0);}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 509
column: 89
content: (bool,bytesmemory)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 23
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 27
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 32
column: 65
content: call(data)

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 14
column: 8
content: assembly{codehash:=extcodehash(account)}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 677
column: 4
content: functionwithdrawBalances(address[]calldatatokens,uint256[]calldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 112
column: 4
content: uint256constantMAX_GUILD_BOUND=10**36;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 113
column: 4
content: uint256constantMAX_TOKEN_WHITELIST_COUNT=400;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 114
column: 4
content: uint256constantMAX_TOKEN_GUILDBANK_COUNT=200;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 677
column: 76
content: amounts,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 677
column: 85
content: boolmax)external

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 677
column: 104
content: nonReentrant{require

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 678
column: 15
content: (tokens.length==amounts.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 678
column: 41
content: length,"tokens != amounts");for

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 679
column: 12
content: (uint256<missing ')'>i=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 679
column: 26
content: i<tokens.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 679
column: 37
content: length;i++){

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 680
column: 12
content: uint256withdrawAmount=amounts[i];

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 681
column: 15
content: (max){withdrawAmount=userTokenBalances[msg.sender][tokens[i]];

SOLIDITY_VISIBILITY :14
SOLIDITY_SAFEMATH :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :5
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_ADDRESS_HARDCODED :7
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
SOLIDITY_USING_INLINE_ASSEMBLY :1
SOLIDITY_UNCHECKED_CALL :3
SOLIDITY_SHOULD_RETURN_STRUCT :1
SOLIDITY_SHOULD_NOT_BE_VIEW :1
