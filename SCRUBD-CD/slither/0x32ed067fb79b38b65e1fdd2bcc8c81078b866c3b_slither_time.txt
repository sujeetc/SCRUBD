'solc --version' running
'solc ./0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

$BITCOINReflections.swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#610-655) sends eth to arbitrary user
	Dangerous calls:
	- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
	- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
$BITCOINReflections.buyTokens(uint256,address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#684-695) sends eth to arbitrary user
	Dangerous calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562):
	External calls:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#620-626)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	External calls sending eth:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
		- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#549)
	$BITCOINReflections._balances (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#424) can be used in cross function reentrancies:
	- $BITCOINReflections._basicTransfer(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#564-569)
	- $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562)
	- $BITCOINReflections.balanceOf(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#511)
	- $BITCOINReflections.constructor(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#474-501)
	- $BITCOINReflections.setIsDividendExempt(address,bool) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#728-736)
	- $BITCOINReflections.shouldSwapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#603-608)
	- $BITCOINReflections.takeFee(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#594-601)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#553)
	$BITCOINReflections._balances (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#424) can be used in cross function reentrancies:
	- $BITCOINReflections._basicTransfer(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#564-569)
	- $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562)
	- $BITCOINReflections.balanceOf(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#511)
	- $BITCOINReflections.constructor(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#474-501)
	- $BITCOINReflections.setIsDividendExempt(address,bool) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#728-736)
	- $BITCOINReflections.shouldSwapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#603-608)
	- $BITCOINReflections.takeFee(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#594-601)
	- amountReceived = takeFee(sender,recipient,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#551)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#597)
	$BITCOINReflections._balances (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#424) can be used in cross function reentrancies:
	- $BITCOINReflections._basicTransfer(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#564-569)
	- $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562)
	- $BITCOINReflections.balanceOf(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#511)
	- $BITCOINReflections.constructor(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#474-501)
	- $BITCOINReflections.setIsDividendExempt(address,bool) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#728-736)
	- $BITCOINReflections.shouldSwapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#603-608)
	- $BITCOINReflections.takeFee(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#594-601)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- inSwap = true (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#472)
		- inSwap = false (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#472)
	$BITCOINReflections.inSwap (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#471) can be used in cross function reentrancies:
	- $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562)
	- $BITCOINReflections.shouldAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#657-663)
	- $BITCOINReflections.shouldSwapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#603-608)
	- $BITCOINReflections.swapping() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#472)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373) ignores return value by BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

$BITCOINReflections.swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#610-655) performs a multiplication on the result of a division:
	- amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#634)
	- splitmarketfee = amountETHMarketing.mul(333).div(1000) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#635)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reentrancy in DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373):
	External calls:
	- BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#370)
	DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373)
	- DividendDistributor.getUnpaidEarnings(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#379-388)
	- DividendDistributor.setShare(address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#295-309)
	- DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#371)
	DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373)
	- DividendDistributor.getUnpaidEarnings(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#379-388)
	- DividendDistributor.setShare(address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#295-309)
	- DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259)
Reentrancy in DividendDistributor.process(uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#331-355):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#347)
		- BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
	State variables written after the call(s):
	- currentIndex = 0 (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#343)
	DividendDistributor.currentIndex (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#270) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#331-355)
	- currentIndex ++ (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#352)
	DividendDistributor.currentIndex (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#270) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#331-355)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#295-309):
	External calls:
	- distributeDividend(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#297)
		- BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#307)
	DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373)
	- DividendDistributor.getUnpaidEarnings(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#379-388)
	- DividendDistributor.setShare(address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#295-309)
	- DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#308)
	DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373)
	- DividendDistributor.getUnpaidEarnings(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#379-388)
	- DividendDistributor.setShare(address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#295-309)
	- DividendDistributor.shares (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#259)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

$BITCOINReflections.swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#610-655) ignores return value by router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

DividendDistributor.setDistributionCriteria(uint256,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#290-293) should emit an event for: 
	- minPeriod = _minPeriod (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#291) 
	- minDistribution = _minDistribution (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#292) 
$BITCOINReflections.setAutoBuybackSettings(bool,uint256,uint256,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#697-704) should emit an event for: 
	- autoBuybackCap = _cap (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#699) 
	- autoBuybackAmount = _amount (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#701) 
$BITCOINReflections.setBuybackMultiplierSettings(uint256,uint256,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#706-711) should emit an event for: 
	- buybackMultiplierNumerator = numerator (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#708) 
	- buybackMultiplierDenominator = denominator (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#709) 
	- buybackMultiplierLength = length (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#710) 
$BITCOINReflections.setFees(uint256,uint256,uint256,uint256,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#746-754) should emit an event for: 
	- liquidityFee = _liquidityFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#747) 
	- reflectionFee = _reflectionFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#749) 
	- marketingFee = _marketingFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#750) 
	- totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(_marketingFee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#751) 
	- feeDenominator = _feeDenominator (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#752) 
$BITCOINReflections.setSwapBackSettings(bool,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#761-764) should emit an event for: 
	- swapThreshold = _amount (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#763) 
$BITCOINReflections.setTargetLiquidity(uint256,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#766-769) should emit an event for: 
	- targetLiquidity = _target (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#767) 
	- targetLiquidityDenominator = _denominator (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#768) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Auth.transferOwnership(address).adr (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#171) lacks a zero-check on :
		- owner = adr (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#172)
$BITCOINReflections.setFeeReceivers(address,address)._autoLiquidityReceiver (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#756) lacks a zero-check on :
		- autoLiquidityReceiver = _autoLiquidityReceiver (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#757)
$BITCOINReflections.setFeeReceivers(address,address)._marketingFeeReceiver (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#756) lacks a zero-check on :
		- marketingFeeReceiver = _marketingFeeReceiver (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#758)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373) has external calls inside a loop: BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in DividendDistributor.deposit() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#311-329):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#318-323)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#328)
	- totalDividends = totalDividends.add(amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#327)
Reentrancy in DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373):
	External calls:
	- BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#369)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#295-309):
	External calls:
	- distributeDividend(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#297)
		- BITCOIN.transfer(shareholder,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#368)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#301)
		- shareholderIndexes[shareholder] = shareholders.length (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#395)
	- removeShareholder(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#303)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#401)
	- addShareholder(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#301)
		- shareholders.push(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#396)
	- removeShareholder(shareholder) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#303)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#400)
		- shareholders.pop() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#402)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#306)
Reentrancy in $BITCOINReflections.triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#677-682):
	External calls:
	- buyTokens(autoBuybackAmount,DEAD) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#678)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	State variables written after the call(s):
	- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#680)
	- autoBuybackBlockLast = block.number (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#679)
	- autoBuybackEnabled = false (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#681)
Reentrancy in $BITCOINReflections.triggerZeusBuyback(uint256,bool) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#665-671):
	External calls:
	- buyTokens(amount,DEAD) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#666)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	State variables written after the call(s):
	- buybackMultiplierTriggeredAt = block.timestamp (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#668)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562):
	External calls:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#620-626)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	- distributor.setShare(sender,_balances[sender]) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#555)
	- distributor.setShare(recipient,_balances[recipient]) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#556)
	- distributor.process(distributorGas) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#558)
	External calls sending eth:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
		- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#560)
Reentrancy in $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562):
	External calls:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#620-626)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	External calls sending eth:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
		- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#598)
		- amountReceived = takeFee(sender,recipient,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#551)
Reentrancy in $BITCOINReflections.swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#610-655):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#620-626)
	- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	External calls sending eth:
	- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
	- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
	- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	Event emitted after the call(s):
	- AutoLiquify(amountETHLiquidity,amountToLiquify) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#653)
Reentrancy in $BITCOINReflections.triggerZeusBuyback(uint256,bool) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#665-671):
	External calls:
	- buyTokens(amount,DEAD) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#666)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	Event emitted after the call(s):
	- BuybackMultiplierActive(buybackMultiplierLength) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#669)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

DividendDistributor.shouldDistribute(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#357-360) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#358-359)
$BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_maxWallet >= balanceOf(recipient).add(amount),ERC20: maxWallet >= amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#541)
$BITCOINReflections.getMultipliedFee() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#583-592) uses timestamp for comparisons
	Dangerous comparisons:
	- launchedAtTimestamp + 86400 > block.timestamp (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#584)
	- buybackMultiplierTriggeredAt.add(buybackMultiplierLength) > block.timestamp (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#586)
$BITCOINReflections.shouldSwapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#603-608) uses timestamp for comparisons
	Dangerous comparisons:
	- msg.sender != pair && ! inSwap && swapEnabled && _balances[address(this)] >= swapThreshold (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#604-607)
$BITCOINReflections.isOverLiquified(uint256,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#792-794) uses timestamp for comparisons
	Dangerous comparisons:
	- getLiquidityBacking(accuracy) > target (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#793)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

$BITCOINReflections.onlyBuybacker() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#510) compares to a boolean constant:
	-require(bool,string)(buyBacker[msg.sender] == true,) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#510)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

DividendDistributor.process(uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#331-355) has costly operations inside a loop:
	- currentIndex = 0 (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#343)
DividendDistributor.distributeDividend(address) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#362-373) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#367)
DividendDistributor.process(uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#331-355) has costly operations inside a loop:
	- currentIndex ++ (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#352)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

$BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562) has a high cyclomatic complexity (13).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

$BITCOINReflections.launched() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#713-715) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

$BITCOINReflections.swapThreshold (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#470) is set pre-construction with a non-constant function or state variable:
	- _totalSupply / 2000000
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#10)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function IDEXRouter.WETH() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#186) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#290) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDistribution (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#290) is not in mixedCase
Variable DividendDistributor.BITCOIN (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#251) is not in mixedCase
Variable DividendDistributor.WETH (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#252) is not in mixedCase
Contract $BITCOINReflections (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#406-799) is not in CapWords
Parameter $BITCOINReflections.setAutoBuybackSettings(bool,uint256,uint256,uint256)._enabled (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#697) is not in mixedCase
Parameter $BITCOINReflections.setAutoBuybackSettings(bool,uint256,uint256,uint256)._cap (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#697) is not in mixedCase
Parameter $BITCOINReflections.setAutoBuybackSettings(bool,uint256,uint256,uint256)._amount (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#697) is not in mixedCase
Parameter $BITCOINReflections.setAutoBuybackSettings(bool,uint256,uint256,uint256)._period (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#697) is not in mixedCase
Parameter $BITCOINReflections.setFees(uint256,uint256,uint256,uint256,uint256)._liquidityFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#746) is not in mixedCase
Parameter $BITCOINReflections.setFees(uint256,uint256,uint256,uint256,uint256)._buybackFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#746) is not in mixedCase
Parameter $BITCOINReflections.setFees(uint256,uint256,uint256,uint256,uint256)._reflectionFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#746) is not in mixedCase
Parameter $BITCOINReflections.setFees(uint256,uint256,uint256,uint256,uint256)._marketingFee (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#746) is not in mixedCase
Parameter $BITCOINReflections.setFees(uint256,uint256,uint256,uint256,uint256)._feeDenominator (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#746) is not in mixedCase
Parameter $BITCOINReflections.setFeeReceivers(address,address)._autoLiquidityReceiver (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#756) is not in mixedCase
Parameter $BITCOINReflections.setFeeReceivers(address,address)._marketingFeeReceiver (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#756) is not in mixedCase
Parameter $BITCOINReflections.setSwapBackSettings(bool,uint256)._enabled (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#761) is not in mixedCase
Parameter $BITCOINReflections.setSwapBackSettings(bool,uint256)._amount (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#761) is not in mixedCase
Parameter $BITCOINReflections.setTargetLiquidity(uint256,uint256)._target (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#766) is not in mixedCase
Parameter $BITCOINReflections.setTargetLiquidity(uint256,uint256)._denominator (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#766) is not in mixedCase
Parameter $BITCOINReflections.setDistributionCriteria(uint256,uint256)._minPeriod (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#771) is not in mixedCase
Parameter $BITCOINReflections.setDistributionCriteria(uint256,uint256)._minDistribution (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#771) is not in mixedCase
Variable $BITCOINReflections.BITCOIN (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#410) is not in mixedCase
Variable $BITCOINReflections.WETH (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#411) is not in mixedCase
Variable $BITCOINReflections.DEAD (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#412) is not in mixedCase
Variable $BITCOINReflections.ZERO (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#413) is not in mixedCase
Variable $BITCOINReflections.DEAD_NON_CHECKSUM (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#414) is not in mixedCase
Constant $BITCOINReflections._name (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#416) is not in UPPER_CASE_WITH_UNDERSCORES
Constant $BITCOINReflections._symbol (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#417) is not in UPPER_CASE_WITH_UNDERSCORES
Constant $BITCOINReflections._decimals (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#418) is not in UPPER_CASE_WITH_UNDERSCORES
Variable $BITCOINReflections._maxTxAmount (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#421) is not in mixedCase
Variable $BITCOINReflections._maxWallet (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#422) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in $BITCOINReflections._transferFrom(address,address,uint256) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#536-562):
	External calls:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
		- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
	External calls sending eth:
	- swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#544)
		- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
		- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
		- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#689-694)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#549)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#553)
	- amountReceived = takeFee(sender,recipient,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#551)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#597)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#680)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- autoBuybackBlockLast = block.number (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#679)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- autoBuybackEnabled = false (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#681)
	- triggerAutoBuyback() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#545)
		- inSwap = true (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#472)
		- inSwap = false (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#472)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#598)
		- amountReceived = takeFee(sender,recipient,amount) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#551)
	- Transfer(sender,recipient,amountReceived) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#560)
Reentrancy in $BITCOINReflections.swapBack() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#610-655):
	External calls:
	- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
	- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
	External calls sending eth:
	- distributor.deposit{value: amountETHReflection}() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#638)
	- address(harryLiquiditypool).transfer(splitmarketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#639)
	- address(marketingFeeReceiver).transfer(finialmatketfee) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#640)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#645-652)
	Event emitted after the call(s):
	- AutoLiquify(amountETHLiquidity,amountToLiquify) (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#653)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

$BITCOINReflections.slitherConstructorVariables() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#406-799) uses literals with too many digits:
	- _maxTxAmount = 2500000e9 (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#421)
$BITCOINReflections.slitherConstructorVariables() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#406-799) uses literals with too many digits:
	- distributorGas = 500000 (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#467)
$BITCOINReflections.slitherConstructorVariables() (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#406-799) uses literals with too many digits:
	- swapThreshold = _totalSupply / 2000000 (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#470)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

$BITCOINReflections.BITCOIN (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#410) is never used in $BITCOINReflections (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#406-799)
$BITCOINReflections.DEAD_NON_CHECKSUM (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#414) is never used in $BITCOINReflections (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#406-799)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

$BITCOINReflections.BITCOIN (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#410) should be constant 
$BITCOINReflections.DEAD (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#412) should be constant 
$BITCOINReflections.DEAD_NON_CHECKSUM (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#414) should be constant 
$BITCOINReflections.ZERO (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#413) should be constant 
$BITCOINReflections._totalSupply (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#420) should be constant 
DividendDistributor.BITCOIN (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#251) should be constant 
DividendDistributor.WETH (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#252) should be constant 
DividendDistributor.dividendsPerShareAccuracyFactor (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#265) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

$BITCOINReflections.WETH (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#411) should be immutable 
$BITCOINReflections.distributor (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#464) should be immutable 
$BITCOINReflections.distributorAddress (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#465) should be immutable 
$BITCOINReflections.harryLiquiditypool (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#440) should be immutable 
$BITCOINReflections.pair (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#446) should be immutable 
$BITCOINReflections.router (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#445) should be immutable 
DividendDistributor._token (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#243) should be immutable 
DividendDistributor.router (0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol#253) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x32ed067fb79b38b65e1fdd2bcc8c81078b866c3b.sol analyzed (8 contracts with 94 detectors), 97 result(s) found

real	0m3.416s
user	0m3.212s
sys	0m0.206s
