'solc --version' running
'solc ./0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598):
	External calls:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#626-632)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	External calls sending eth:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- address(marketingWallet).transfer(ethForMarketing) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#660)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#582)
	SaylorsLastHope._balances (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#356) can be used in cross function reentrancies:
	- SaylorsLastHope._basicTransfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#600-605)
	- SaylorsLastHope._setIsDividendExempt(address,bool) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#515-523)
	- SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598)
	- SaylorsLastHope.balanceOf(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#542)
	- SaylorsLastHope.constructor(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#406-434)
	- SaylorsLastHope.swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#646-668)
	- SaylorsLastHope.takeFee(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#607-616)
	- _balances[recipient] = _balances[recipient].add(finalAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#585)
	SaylorsLastHope._balances (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#356) can be used in cross function reentrancies:
	- SaylorsLastHope._basicTransfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#600-605)
	- SaylorsLastHope._setIsDividendExempt(address,bool) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#515-523)
	- SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598)
	- SaylorsLastHope.balanceOf(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#542)
	- SaylorsLastHope.constructor(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#406-434)
	- SaylorsLastHope.swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#646-668)
	- SaylorsLastHope.takeFee(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#607-616)
	- finalAmount = takeFee(sender,recipient,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#584)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#612)
	SaylorsLastHope._balances (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#356) can be used in cross function reentrancies:
	- SaylorsLastHope._basicTransfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#600-605)
	- SaylorsLastHope._setIsDividendExempt(address,bool) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#515-523)
	- SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598)
	- SaylorsLastHope.balanceOf(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#542)
	- SaylorsLastHope.constructor(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#406-434)
	- SaylorsLastHope.swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#646-668)
	- SaylorsLastHope.takeFee(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#607-616)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311) ignores return value by IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311):
	External calls:
	- IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#308)
	MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191) can be used in cross function reentrancies:
	- MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311)
	- MoneyPrinter.getUnpaidEarnings(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#318-327)
	- MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249)
	- MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#309)
	MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191) can be used in cross function reentrancies:
	- MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311)
	- MoneyPrinter.getUnpaidEarnings(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#318-327)
	- MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249)
	- MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191)
Reentrancy in MoneyPrinter.process(uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#271-293):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#285)
		- IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
	State variables written after the call(s):
	- currentIndex = 0 (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#282)
	MoneyPrinter.currentIndex (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#202) can be used in cross function reentrancies:
	- MoneyPrinter.currentIndex (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#202)
	- MoneyPrinter.process(uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#271-293)
	- currentIndex ++ (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#290)
	MoneyPrinter.currentIndex (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#202) can be used in cross function reentrancies:
	- MoneyPrinter.currentIndex (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#202)
	- MoneyPrinter.process(uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#271-293)
Reentrancy in MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249):
	External calls:
	- distributeDividend(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#237)
		- IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#247)
	MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191) can be used in cross function reentrancies:
	- MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311)
	- MoneyPrinter.getUnpaidEarnings(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#318-327)
	- MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249)
	- MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#248)
	MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191) can be used in cross function reentrancies:
	- MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311)
	- MoneyPrinter.getUnpaidEarnings(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#318-327)
	- MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249)
	- MoneyPrinter.shares (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#191)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

SaylorsLastHope.addLiquidity(uint256,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#635-644) ignores return value by router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

MoneyPrinter.setDistributionCriteria(uint256,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#229-232) should emit an event for: 
	- minPeriod = newMinPeriod (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#230) 
	- minDistribution = newMinDistribution (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#231) 
MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249) should emit an event for: 
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#246) 
SaylorsLastHope.changeTotalFees(uint256,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#459-466) should emit an event for: 
	- buyFee = newBuyFee (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#461) 
	- sellFee = newSellFee (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#462) 
SaylorsLastHope.changeFeeAllocation(uint256,uint256,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#468-472) should emit an event for: 
	- toReflections = newRewardFee (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#469) 
	- toLiquidity = newLpFee (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#470) 
	- toMarketing = newMarketingFee (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#471) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

MoneyPrinter.setDigitalGold(address).goldAddress (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#225) lacks a zero-check on :
		- DigitalGold = goldAddress (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#226)
Auth.transferOwnership(address).adr (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#102) lacks a zero-check on :
		- owner = adr (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#103)
SaylorsLastHope.setDigitalGold(address).goldAddress (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#442) lacks a zero-check on :
		- DigitalGold = goldAddress (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#443)
SaylorsLastHope.setMarketingWallet(address).newMarketingWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#490) lacks a zero-check on :
		- marketingWallet = address(newMarketingWallet) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#491)
SaylorsLastHope.setLpWallet(address).newLpWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#494) lacks a zero-check on :
		- lpWallet = newLpWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#495)
SaylorsLastHope.setOwnerWallet(address).newOwnerWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#498) lacks a zero-check on :
		- tokenOwner = newOwnerWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#499)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311) has external calls inside a loop: IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in MoneyPrinter.deposit() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#251-269):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#259-264)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#268)
	- totalDividends = totalDividends.add(amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#267)
Reentrancy in MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311):
	External calls:
	- IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#307)
Reentrancy in MoneyPrinter.setShare(address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#234-249):
	External calls:
	- distributeDividend(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#237)
		- IERC20(DigitalGold).transfer(shareholder,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#306)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#241)
		- shareholderIndexes[shareholder] = shareholders.length (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#334)
	- removeShareholder(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#243)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#340)
	- addShareholder(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#241)
		- shareholders.push(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#335)
	- removeShareholder(shareholder) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#243)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#339)
		- shareholders.pop() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#341)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#246)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598):
	External calls:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#626-632)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	- moneyPrinter.setShare(sender,_balances[sender]) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#589)
	- moneyPrinter.setShare(recipient,_balances[recipient]) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#593)
	External calls sending eth:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- address(marketingWallet).transfer(ethForMarketing) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#660)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	Event emitted after the call(s):
	- Transfer(sender,recipient,finalAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#596)
Reentrancy in SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598):
	External calls:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#626-632)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	External calls sending eth:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- address(marketingWallet).transfer(ethForMarketing) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#660)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#613)
		- finalAmount = takeFee(sender,recipient,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#584)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

MoneyPrinter.shouldDistribute(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#295-298) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#296-297)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

MoneyPrinter.process(uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#271-293) has costly operations inside a loop:
	- currentIndex = 0 (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#282)
MoneyPrinter.distributeDividend(address) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#300-311) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#305)
MoneyPrinter.process(uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#271-293) has costly operations inside a loop:
	- currentIndex ++ (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#290)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

SaylorsLastHope.lpWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#372) is set pre-construction with a non-constant function or state variable:
	- DEAD
SaylorsLastHope.maxTx (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#402) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(100)
SaylorsLastHope.maxWallet (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#403) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(50)
SaylorsLastHope.swapThreshold (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#404) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(200)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint 0.8.13 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- StorageWriteRemovalBeforeConditionalTermination
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- InlineAssemblyMemorySideEffects
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- 0.8.13 (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function IDEXRouter.WETH() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#116) is not in mixedCase
Variable MoneyPrinter.DigitalGold (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#178) is not in mixedCase
Variable SaylorsLastHope.DigitalGold (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#348) is not in mixedCase
Constant SaylorsLastHope._name (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#350) is not in UPPER_CASE_WITH_UNDERSCORES
Constant SaylorsLastHope._symbol (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#351) is not in UPPER_CASE_WITH_UNDERSCORES
Constant SaylorsLastHope._decimals (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#352) is not in UPPER_CASE_WITH_UNDERSCORES
Variable SaylorsLastHope.WETH (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#360) is not in mixedCase
Variable SaylorsLastHope.DEAD (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#361) is not in mixedCase
Variable SaylorsLastHope.ZERO (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#362) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in SaylorsLastHope._transfer(address,address,uint256) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#567-598):
	External calls:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- address(marketingWallet).transfer(ethForMarketing) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#660)
	External calls sending eth:
	- swapBack() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#580)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#636-643)
		- address(marketingWallet).transfer(ethForMarketing) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#660)
		- moneyPrinter.deposit{value: ethForDigitalGold}() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#663)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#582)
	- _balances[recipient] = _balances[recipient].add(finalAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#585)
	- finalAmount = takeFee(sender,recipient,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#584)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#612)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#613)
		- finalAmount = takeFee(sender,recipient,amount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#584)
	- Transfer(sender,recipient,finalAmount) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#596)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

SaylorsLastHope.slitherConstructorVariables() (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#345-693) uses literals with too many digits:
	- _totalSupply = 1000000 * (10 ** _decimals) (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#354)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

MoneyPrinter.michaelSaylor (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#176) is never used in MoneyPrinter (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#172-343)
SaylorsLastHope.cooldown (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#358) is never used in SaylorsLastHope (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#345-693)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

MoneyPrinter.dividendsPerShareAccuracyFactor (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#197) should be constant 
MoneyPrinter.michaelSaylor (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#176) should be constant 
SaylorsLastHope.DEAD (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#361) should be constant 
SaylorsLastHope.ZERO (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#362) should be constant 
SaylorsLastHope._totalSupply (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#354) should be constant 
SaylorsLastHope.allocationSum (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#381) should be constant 
SaylorsLastHope.antiBot (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#364) should be constant 
SaylorsLastHope.factory (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#385) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

MoneyPrinter._token (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#175) should be immutable 
MoneyPrinter.router (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#180) should be immutable 
SaylorsLastHope.WETH (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#360) should be immutable 
SaylorsLastHope.moneyPrinter (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#393) should be immutable 
SaylorsLastHope.pair (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#384) should be immutable 
SaylorsLastHope.router (0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol#383) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x08cce68cfe23bbf13e3151c2a43dcc02623710d6.sol analyzed (8 contracts with 94 detectors), 58 result(s) found

real	0m2.748s
user	0m2.510s
sys	0m0.240s
