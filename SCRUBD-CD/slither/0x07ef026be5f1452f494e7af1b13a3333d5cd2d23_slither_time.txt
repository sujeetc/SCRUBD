'solc --version' running
'solc ./0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

IceMachine.swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#610-652) sends eth to arbitrary user
	Dangerous calls:
	- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556):
	External calls:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#620-626)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	External calls sending eth:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#543)
	IceMachine._balances (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#413) can be used in cross function reentrancies:
	- IceMachine._basicTransfer(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#558-563)
	- IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556)
	- IceMachine.balanceOf(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#496)
	- IceMachine.constructor() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#463-485)
	- IceMachine.setIsDividendExempt(address,bool) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#728-736)
	- IceMachine.shouldSwapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#603-608)
	- IceMachine.takeFee(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#594-601)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#547)
	IceMachine._balances (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#413) can be used in cross function reentrancies:
	- IceMachine._basicTransfer(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#558-563)
	- IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556)
	- IceMachine.balanceOf(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#496)
	- IceMachine.constructor() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#463-485)
	- IceMachine.setIsDividendExempt(address,bool) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#728-736)
	- IceMachine.shouldSwapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#603-608)
	- IceMachine.takeFee(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#594-601)
	- amountReceived = takeFee(sender,recipient,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#545)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#597)
	IceMachine._balances (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#413) can be used in cross function reentrancies:
	- IceMachine._basicTransfer(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#558-563)
	- IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556)
	- IceMachine.balanceOf(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#496)
	- IceMachine.constructor() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#463-485)
	- IceMachine.setIsDividendExempt(address,bool) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#728-736)
	- IceMachine.shouldSwapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#603-608)
	- IceMachine.takeFee(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#594-601)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- inSwap = true (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#461)
		- inSwap = false (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#461)
	IceMachine.inSwap (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#460) can be used in cross function reentrancies:
	- IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556)
	- IceMachine.shouldAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#654-660)
	- IceMachine.shouldSwapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#603-608)
	- IceMachine.swapping() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#461)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360) ignores return value by EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360):
	External calls:
	- EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#357)
	DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360)
	- DividendDistributor.getUnpaidEarnings(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#368-377)
	- DividendDistributor.setShare(address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#282-296)
	- DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#358)
	DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360)
	- DividendDistributor.getUnpaidEarnings(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#368-377)
	- DividendDistributor.setShare(address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#282-296)
	- DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246)
Reentrancy in DividendDistributor.process(uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#318-342):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#334)
		- EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
	State variables written after the call(s):
	- currentIndex = 0 (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#330)
	DividendDistributor.currentIndex (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#257) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#318-342)
	- currentIndex ++ (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#339)
	DividendDistributor.currentIndex (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#257) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#318-342)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#282-296):
	External calls:
	- distributeDividend(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#284)
		- EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#294)
	DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360)
	- DividendDistributor.getUnpaidEarnings(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#368-377)
	- DividendDistributor.setShare(address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#282-296)
	- DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#295)
	DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360)
	- DividendDistributor.getUnpaidEarnings(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#368-377)
	- DividendDistributor.setShare(address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#282-296)
	- DividendDistributor.shares (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#246)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

IceMachine.swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#610-652) ignores return value by router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

DividendDistributor.setDistributionCriteria(uint256,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#277-280) should emit an event for: 
	- minPeriod = _minPeriod (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#278) 
	- minDistribution = _minDistribution (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#279) 
IceMachine.setAutoBuybackSettings(bool,uint256,uint256,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#692-699) should emit an event for: 
	- autoBuybackCap = _cap (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#694) 
	- autoBuybackAmount = _amount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#696) 
IceMachine.setTxLimit(uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#723-726) should emit an event for: 
	- _maxTxAmount = amount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#725) 
IceMachine.setFees(uint256,uint256,uint256,uint256,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#758-766) should emit an event for: 
	- liquidityFee = _liquidityFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#759) 
	- reflectionFee = _reflectionFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#761) 
	- marketingFee = _marketingFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#762) 
	- totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(_marketingFee) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#763) 
	- feeDenominator = _feeDenominator (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#764) 
IceMachine.setSwapBackSettings(bool,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#773-776) should emit an event for: 
	- swapThreshold = _amount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#775) 
IceMachine.setTargetLiquidity(uint256,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#778-781) should emit an event for: 
	- targetLiquidity = _target (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#779) 
	- targetLiquidityDenominator = _denominator (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#780) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Auth.transferOwnership(address).adr (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#162) lacks a zero-check on :
		- owner = adr (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#163)
IceMachine.setFeeReceivers(address,address)._autoLiquidityReceiver (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#768) lacks a zero-check on :
		- autoLiquidityReceiver = _autoLiquidityReceiver (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#769)
IceMachine.setFeeReceivers(address,address)._marketingFeeReceiver (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#768) lacks a zero-check on :
		- marketingFeeReceiver = _marketingFeeReceiver (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#770)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360) has external calls inside a loop: EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in DividendDistributor.deposit() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#298-316):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#305-310)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#315)
	- totalDividends = totalDividends.add(amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#314)
Reentrancy in DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360):
	External calls:
	- EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#356)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#282-296):
	External calls:
	- distributeDividend(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#284)
		- EP.transfer(shareholder,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#355)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#288)
		- shareholderIndexes[shareholder] = shareholders.length (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#384)
	- removeShareholder(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#290)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#390)
	- addShareholder(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#288)
		- shareholders.push(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#385)
	- removeShareholder(shareholder) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#290)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#389)
		- shareholders.pop() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#391)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#293)
Reentrancy in IceMachine.triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#666-671):
	External calls:
	- buyTokens(autoBuybackAmount,DEAD) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#667)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	State variables written after the call(s):
	- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#669)
	- autoBuybackBlockLast = block.number (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#668)
	- autoBuybackEnabled = false (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#670)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556):
	External calls:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#620-626)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	- distributor.setShare(sender,_balances[sender]) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#549)
	- distributor.setShare(recipient,_balances[recipient]) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#550)
	- distributor.process(distributorGas) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#552)
	External calls sending eth:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#554)
Reentrancy in IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556):
	External calls:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#620-626)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	External calls sending eth:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#598)
		- amountReceived = takeFee(sender,recipient,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#545)
Reentrancy in IceMachine.swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#610-652):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#620-626)
	- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	External calls sending eth:
	- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
	- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	Event emitted after the call(s):
	- AutoLiquify(amountETHLiquidity,amountToLiquify) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#650)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

DividendDistributor.shouldDistribute(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#344-347) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#345-346)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

IceMachine.onlyBuybacker() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#495) compares to a boolean constant:
	-require(bool,string)(buyBacker[msg.sender] == true,) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#495)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

DividendDistributor.process(uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#318-342) has costly operations inside a loop:
	- currentIndex = 0 (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#330)
DividendDistributor.distributeDividend(address) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#349-360) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#354)
DividendDistributor.process(uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#318-342) has costly operations inside a loop:
	- currentIndex ++ (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#339)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556) has a high cyclomatic complexity (14).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

IceMachine.launched() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#708-710) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

IceMachine._maxTxAmount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#410) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(50)
IceMachine._maxWallet (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#411) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(50)
IceMachine.swapThreshold (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#459) is set pre-construction with a non-constant function or state variable:
	- _totalSupply / 1000
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.8.7 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- ^0.8.7 (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function IUniswapV2Router.WETH() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#177) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#277) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDistribution (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#277) is not in mixedCase
Variable DividendDistributor.EP (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#238) is not in mixedCase
Variable DividendDistributor.WETH (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#239) is not in mixedCase
Function IceMachine.Sweep() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#686-689) is not in mixedCase
Parameter IceMachine.setAutoBuybackSettings(bool,uint256,uint256,uint256)._enabled (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#692) is not in mixedCase
Parameter IceMachine.setAutoBuybackSettings(bool,uint256,uint256,uint256)._cap (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#692) is not in mixedCase
Parameter IceMachine.setAutoBuybackSettings(bool,uint256,uint256,uint256)._amount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#692) is not in mixedCase
Parameter IceMachine.setAutoBuybackSettings(bool,uint256,uint256,uint256)._period (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#692) is not in mixedCase
Parameter IceMachine.setFees(uint256,uint256,uint256,uint256,uint256)._liquidityFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#758) is not in mixedCase
Parameter IceMachine.setFees(uint256,uint256,uint256,uint256,uint256)._buybackFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#758) is not in mixedCase
Parameter IceMachine.setFees(uint256,uint256,uint256,uint256,uint256)._reflectionFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#758) is not in mixedCase
Parameter IceMachine.setFees(uint256,uint256,uint256,uint256,uint256)._marketingFee (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#758) is not in mixedCase
Parameter IceMachine.setFees(uint256,uint256,uint256,uint256,uint256)._feeDenominator (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#758) is not in mixedCase
Parameter IceMachine.setFeeReceivers(address,address)._autoLiquidityReceiver (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#768) is not in mixedCase
Parameter IceMachine.setFeeReceivers(address,address)._marketingFeeReceiver (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#768) is not in mixedCase
Parameter IceMachine.setSwapBackSettings(bool,uint256)._enabled (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#773) is not in mixedCase
Parameter IceMachine.setSwapBackSettings(bool,uint256)._amount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#773) is not in mixedCase
Parameter IceMachine.setTargetLiquidity(uint256,uint256)._target (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#778) is not in mixedCase
Parameter IceMachine.setTargetLiquidity(uint256,uint256)._denominator (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#778) is not in mixedCase
Parameter IceMachine.setDistributionCriteria(uint256,uint256)._minPeriod (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#783) is not in mixedCase
Parameter IceMachine.setDistributionCriteria(uint256,uint256)._minDistribution (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#783) is not in mixedCase
Variable IceMachine.EP (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#399) is not in mixedCase
Variable IceMachine.WETH (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#400) is not in mixedCase
Variable IceMachine.DEAD (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#401) is not in mixedCase
Variable IceMachine.ZERO (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#402) is not in mixedCase
Variable IceMachine.DEAD_NON_CHECKSUM (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#403) is not in mixedCase
Constant IceMachine._name (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#405) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IceMachine._symbol (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#406) is not in UPPER_CASE_WITH_UNDERSCORES
Constant IceMachine._decimals (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#407) is not in UPPER_CASE_WITH_UNDERSCORES
Variable IceMachine._maxTxAmount (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#410) is not in mixedCase
Variable IceMachine._maxWallet (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#411) is not in mixedCase
Variable IceMachine._isFree (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#419) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in IceMachine._transferFrom(address,address,uint256) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#521-556):
	External calls:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
	External calls sending eth:
	- swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#538)
		- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
		- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#678-683)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#543)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#547)
	- amountReceived = takeFee(sender,recipient,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#545)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#597)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#669)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- autoBuybackBlockLast = block.number (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#668)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- autoBuybackEnabled = false (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#670)
	- triggerAutoBuyback() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#539)
		- inSwap = true (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#461)
		- inSwap = false (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#461)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#598)
		- amountReceived = takeFee(sender,recipient,amount) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#545)
	- Transfer(sender,recipient,amountReceived) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#554)
Reentrancy in IceMachine.swapBack() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#610-652):
	External calls:
	- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
	External calls sending eth:
	- distributor.deposit{value: amountETHReflection}() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#636)
	- address(marketingFeeReceiver).transfer(amountETHMarketing) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#637)
	- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#642-649)
	Event emitted after the call(s):
	- AutoLiquify(amountETHLiquidity,amountToLiquify) (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#650)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

IceMachine.slitherConstructorVariables() (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#395-807) uses literals with too many digits:
	- distributorGas = 500000 (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#456)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

IceMachine.EP (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#399) is never used in IceMachine (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#395-807)
IceMachine.DEAD_NON_CHECKSUM (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#403) is never used in IceMachine (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#395-807)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

DividendDistributor.EP (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#238) should be constant 
DividendDistributor.WETH (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#239) should be constant 
DividendDistributor.dividendsPerShareAccuracyFactor (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#252) should be constant 
IceMachine.DEAD (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#401) should be constant 
IceMachine.DEAD_NON_CHECKSUM (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#403) should be constant 
IceMachine.EP (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#399) should be constant 
IceMachine.ZERO (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#402) should be constant 
IceMachine._totalSupply (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#409) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

DividendDistributor._token (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#230) should be immutable 
DividendDistributor.router (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#240) should be immutable 
IceMachine.WETH (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#400) should be immutable 
IceMachine.distributor (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#453) should be immutable 
IceMachine.distributorAddress (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#454) should be immutable 
IceMachine.pair (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#435) should be immutable 
IceMachine.router (0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol#434) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x07ef026be5f1452f494e7af1b13a3333d5cd2d23.sol analyzed (8 contracts with 94 detectors), 89 result(s) found

real	0m3.673s
user	0m3.339s
sys	0m0.335s
