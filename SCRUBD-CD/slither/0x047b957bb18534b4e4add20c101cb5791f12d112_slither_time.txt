'solc --version' running
'solc ./0x047b957bb18534b4e4add20c101cb5791f12d112.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x047b957bb18534b4e4add20c101cb5791f12d112.sol:
Warning: Contract code size is 26408 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> 0x047b957bb18534b4e4add20c101cb5791f12d112.sol:680:1:
    |
680 | contract NEKOLAND is Context, IERC20, Ownable {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in NEKOLAND._transfer(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#987-1035):
	External calls:
	- swapAndLiquify(contractTokenBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1030)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1030)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _devFee = _previousdevFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#972)
		- _devFee = 0 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#964)
	NEKOLAND._devFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#717) can be used in cross function reentrancies:
	- NEKOLAND._devFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#717)
	- NEKOLAND.removeAllFee() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#954-966)
	- NEKOLAND.restoreAllFee() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#968-973)
	- NEKOLAND.setFeePercent(uint256,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1234-1239)
	- NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067)
	- NEKOLAND.takeTeam(address,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1184-1195)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _liquidityFee = _previousLiquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#970)
		- _liquidityFee = 0 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#963)
	NEKOLAND._liquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#707) can be used in cross function reentrancies:
	- NEKOLAND._liquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#707)
	- NEKOLAND.calculateLiquidityFee(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#948-952)
	- NEKOLAND.removeAllFee() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#954-966)
	- NEKOLAND.restoreAllFee() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#968-973)
	- NEKOLAND.setFeePercent(uint256,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1234-1239)
	- NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _marketingFee = _previousMarketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#971)
		- _marketingFee = 0 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#965)
	NEKOLAND._marketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#711) can be used in cross function reentrancies:
	- NEKOLAND._marketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#711)
	- NEKOLAND.removeAllFee() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#954-966)
	- NEKOLAND.restoreAllFee() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#968-973)
	- NEKOLAND.setFeePercent(uint256,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1234-1239)
	- NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067)
	- NEKOLAND.takeMarketing(address,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1170-1181)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#937)
		- _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1178)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1200)
		- _rOwned[address(this)] = _rOwned[address(this)].add(rTeam) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1192)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1211)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#878)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1202)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1212)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1162)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1163)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#880)
	NEKOLAND._rOwned (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#684) can be used in cross function reentrancies:
	- NEKOLAND._getCurrentSupply() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#922-932)
	- NEKOLAND._takeLiquidity(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#934-940)
	- NEKOLAND._transferBothExcluded(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#875-884)
	- NEKOLAND._transferFromExcluded(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1208-1216)
	- NEKOLAND._transferStandard(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1157-1167)
	- NEKOLAND._transferToExcluded(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1198-1206)
	- NEKOLAND.balanceOf(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#784-787)
	- NEKOLAND.constructor() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#747-766)
	- NEKOLAND.deliver(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#827-834)
	- NEKOLAND.excludeFromReward(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#853-860)
	- NEKOLAND.takeMarketing(address,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1170-1181)
	- NEKOLAND.takeTeam(address,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1184-1195)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _rTotal = _rTotal.sub(rFee) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#892)
	NEKOLAND._rTotal (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#697) can be used in cross function reentrancies:
	- NEKOLAND._getCurrentSupply() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#922-932)
	- NEKOLAND._reflectFee(uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#891-894)
	- NEKOLAND.constructor() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#747-766)
	- NEKOLAND.deliver(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#827-834)
	- NEKOLAND.tokenFromReflection(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#847-851)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#939)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1210)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#877)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1201)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#879)
	NEKOLAND._tOwned (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#685) can be used in cross function reentrancies:
	- NEKOLAND._getCurrentSupply() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#922-932)
	- NEKOLAND._takeLiquidity(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#934-940)
	- NEKOLAND._transferBothExcluded(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#875-884)
	- NEKOLAND._transferFromExcluded(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1208-1216)
	- NEKOLAND._transferToExcluded(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1198-1206)
	- NEKOLAND.balanceOf(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#784-787)
	- NEKOLAND.excludeFromReward(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#853-860)
	- NEKOLAND.includeInReward(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#862-873)
Reentrancy in NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067):
	External calls:
	- swapTokensForEth(half) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1053)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	- swapTokensForWallets(marketingTokenShare,marketingWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1061)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	- swapTokensForWallets(teamTokenShare,devWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1062)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	State variables written after the call(s):
	- swapTokensForWallets(teamTokenShare,devWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1062)
		- _allowances[owner][spender] = amount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#983)
	NEKOLAND._allowances (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#686) can be used in cross function reentrancies:
	- NEKOLAND._approve(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#979-985)
	- NEKOLAND.allowance(address,address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#794-796)
	- NEKOLAND.decreaseAllowance(address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#814-817)
	- NEKOLAND.increaseAllowance(address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#809-812)
	- NEKOLAND.transferFrom(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#803-807)
Reentrancy in NEKOLAND.transferFrom(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#803-807):
	External calls:
	- _transfer(sender,recipient,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#804)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#804)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#805)
		- _allowances[owner][spender] = amount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#983)
	NEKOLAND._allowances (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#686) can be used in cross function reentrancies:
	- NEKOLAND._approve(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#979-985)
	- NEKOLAND.allowance(address,address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#794-796)
	- NEKOLAND.decreaseAllowance(address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#814-817)
	- NEKOLAND.increaseAllowance(address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#809-812)
	- NEKOLAND.transferFrom(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#803-807)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

NEKOLAND.takeMarketing(address,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1170-1181) performs a multiplication on the result of a division:
	- tMarketing = tAmount.div(100).mul(_marketingFee) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1174)
NEKOLAND.takeTeam(address,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1184-1195) performs a multiplication on the result of a division:
	- tTeam = tAmount.div(100).mul(_devFee) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1188)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

NEKOLAND.addLiquidity(uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1110-1123) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

NEKOLAND.allowance(address,address).owner (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#794) shadows:
	- Ownable.owner() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#47-49) (function)
NEKOLAND._approve(address,address,uint256).owner (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#979) shadows:
	- Ownable.owner() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#47-49) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

NEKOLAND.setFeePercent(uint256,uint256,uint256,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1234-1239) should emit an event for: 
	- _taxFee = taxFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1235) 
	- _liquidityFee = liquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1236) 
	- _devFee = devFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1237) 
	- _marketingFee = marketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1238) 
NEKOLAND.setSwapTokensAtAmount(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1241-1243) should emit an event for: 
	- swapTokensAtAmount = newAmount * 10 ** 9 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1242) 
NEKOLAND.setMaxTxAmount(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1245-1248) should emit an event for: 
	- _maxTxAmount = maxTxAmount * 10 ** 9 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1247) 
NEKOLAND.setMaxBuytx(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1250-1252) should emit an event for: 
	- maxBuyTransactionAmount = _maxBuyTxAmount * 10 ** 9 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1251) 
NEKOLAND.setMaxWalletTokens(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1254-1256) should emit an event for: 
	- maxWalletToken = _maxToken * (10 ** 9) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1255) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

NEKOLAND.setMarketingWallet(address).newWallet (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1226) lacks a zero-check on :
		- marketingWallet = newWallet (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1227)
NEKOLAND.setdevWallet(address).newWallet (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1230) lacks a zero-check on :
		- devWallet = newWallet (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1231)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in NEKOLAND._transfer(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#987-1035):
	External calls:
	- swapAndLiquify(contractTokenBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1030)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1030)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _previousLiquidityFee = _liquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#958)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _previousMarketingFee = _marketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#959)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _previousTaxFee = _taxFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#957)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _previousdevFee = _devFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#960)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _tFeeTotal = _tFeeTotal.add(tFee) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#893)
	- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
		- _taxFee = _previousTaxFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#969)
		- _taxFee = 0 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#962)
Reentrancy in NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067):
	External calls:
	- swapTokensForEth(half) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1053)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	State variables written after the call(s):
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- _allowances[owner][spender] = amount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#983)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in NEKOLAND._transfer(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#987-1035):
	External calls:
	- swapAndLiquify(contractTokenBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1030)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1030)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	Event emitted after the call(s):
	- Transfer(sender,address(this),tTeam) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1193)
		- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
	- Transfer(sender,address(this),tMarketing) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1179)
		- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
	- Transfer(sender,recipient,tTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1215)
		- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
	- Transfer(sender,recipient,tTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1205)
		- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
	- Transfer(sender,recipient,tTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#883)
		- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
	- Transfer(sender,recipient,tTransferAmount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1166)
		- _tokenTransfer(from,to,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1034)
Reentrancy in NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067):
	External calls:
	- swapTokensForEth(half) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1053)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#984)
		- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
Reentrancy in NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067):
	External calls:
	- swapTokensForEth(half) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1053)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	- swapTokensForWallets(marketingTokenShare,marketingWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1061)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#984)
		- swapTokensForWallets(marketingTokenShare,marketingWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1061)
Reentrancy in NEKOLAND.swapAndLiquify(uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1037-1067):
	External calls:
	- swapTokensForEth(half) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1053)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	- swapTokensForWallets(marketingTokenShare,marketingWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1061)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	- swapTokensForWallets(teamTokenShare,devWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1062)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1059)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#984)
		- swapTokensForWallets(teamTokenShare,devWallet) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1062)
	- SwapAndLiquify(half,newBalance,otherHalf) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1066)
Reentrancy in NEKOLAND.transferFrom(address,address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#803-807):
	External calls:
	- _transfer(sender,recipient,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#804)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1101-1107)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,_to,block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1082-1088)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#804)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1115-1122)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#984)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#805)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Ownable.unlock() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#94-99) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > _lockTime,Contract is locked until 7 days) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#96)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#351-360) uses assembly
	- INLINE ASM (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#358)
Address._functionCallWithValue(address,bytes,uint256,string) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#444-465) uses assembly
	- INLINE ASM (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#457-460)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

NEKOLAND.includeInReward(address) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#862-873) has costly operations inside a loop:
	- _excluded.pop() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#869)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Context._msgData() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#10-13) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

NEKOLAND._rTotal (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#697) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
NEKOLAND._previousTaxFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#705) is set pre-construction with a non-constant function or state variable:
	- _taxFee
NEKOLAND._previousLiquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#708) is set pre-construction with a non-constant function or state variable:
	- _liquidityFee
NEKOLAND._previousMarketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#712) is set pre-construction with a non-constant function or state variable:
	- _marketingFee
NEKOLAND._previousdevFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#719) is set pre-construction with a non-constant function or state variable:
	- _devFee
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint 0.8.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- 0.8.10 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#378-384):
	- (success,None) = recipient.call{value: amount}() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#382)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#444-465):
	- (success,returndata) = target.call{value: weiValue}(data) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#448)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#504) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#505) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#521) is not in mixedCase
Function IUniswapV2Router01.WETH() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#542) is not in mixedCase
Parameter NEKOLAND.calculateTaxFee(uint256)._amount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#942) is not in mixedCase
Parameter NEKOLAND.calculateLiquidityFee(uint256)._amount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#948) is not in mixedCase
Parameter NEKOLAND.swapTokensForWallets(uint256,address)._to (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1069) is not in mixedCase
Parameter NEKOLAND.setMaxBuytx(uint256)._maxBuyTxAmount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1250) is not in mixedCase
Parameter NEKOLAND.setMaxWalletTokens(uint256)._maxToken (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1254) is not in mixedCase
Parameter NEKOLAND.setSwapAndLiquifyEnabled(bool)._enabled (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#1258) is not in mixedCase
Variable NEKOLAND._taxFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#704) is not in mixedCase
Variable NEKOLAND._liquidityFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#707) is not in mixedCase
Variable NEKOLAND._marketingFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#711) is not in mixedCase
Variable NEKOLAND._devFee (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#717) is not in mixedCase
Variable NEKOLAND._maxTxAmount (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#728) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#11)" inContext (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#5-14)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

NEKOLAND.slitherConstructorVariables() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#680-1264) uses literals with too many digits:
	- _tTotal = 1000000000 * (10 ** 9) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#696)
NEKOLAND.slitherConstructorVariables() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#680-1264) uses literals with too many digits:
	- swapTokensAtAmount = 5000000 * 10 ** 9 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#727)
NEKOLAND.slitherConstructorVariables() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#680-1264) uses literals with too many digits:
	- _maxTxAmount = 100000000 * 10 ** 9 (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#728)
NEKOLAND.slitherConstructorVariables() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#680-1264) uses literals with too many digits:
	- maxWalletToken = 10000000 * (10 ** 9) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#730)
NEKOLAND.slitherConstructorVariables() (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#680-1264) uses literals with too many digits:
	- maxBuyTransactionAmount = 10000000 * (10 ** 9) (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#731)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

NEKOLAND.bots (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#693) is never used in NEKOLAND (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#680-1264)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Loop condition i < _excluded.length (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#925) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

NEKOLAND._decimals (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#702) should be constant 
NEKOLAND._name (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#700) should be constant 
NEKOLAND._symbol (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#701) should be constant 
NEKOLAND._tTotal (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#696) should be constant 
NEKOLAND.deadAddress (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#715) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

NEKOLAND.uniswapV2Pair (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#722) should be immutable 
NEKOLAND.uniswapV2Router (0x047b957bb18534b4e4add20c101cb5791f12d112.sol#721) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x047b957bb18534b4e4add20c101cb5791f12d112.sol analyzed (10 contracts with 94 detectors), 65 result(s) found

real	0m4.968s
user	0m4.719s
sys	0m0.250s
