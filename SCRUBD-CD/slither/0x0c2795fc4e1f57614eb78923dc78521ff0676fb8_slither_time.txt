'solc --version' running
'solc ./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:109:5: Warning: No visibility specified. Defaulting to "public".
    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);
    ^---------------------------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:110:5: Warning: No visibility specified. Defaulting to "public".
    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);
    ^--------------------------------------------------------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:111:5: Warning: No visibility specified. Defaulting to "public".
    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);
    ^-------------------------------------------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:112:5: Warning: No visibility specified. Defaulting to "public".
    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);
    ^------------------------------------------------------------------------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:113:5: Warning: No visibility specified. Defaulting to "public".
    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);
    ^----------------------------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:114:5: Warning: No visibility specified. Defaulting to "public".
    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);
    ^---------------------------------------------------------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:115:5: Warning: No visibility specified. Defaulting to "public".
    function getPrice(string _datasource) returns (uint _dsprice);
    ^------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:116:5: Warning: No visibility specified. Defaulting to "public".
    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);
    ^---------------------------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:117:5: Warning: No visibility specified. Defaulting to "public".
    function useCoupon(string _coupon);
    ^---------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:118:5: Warning: No visibility specified. Defaulting to "public".
    function setProofType(byte _proofType);
    ^-------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:119:5: Warning: No visibility specified. Defaulting to "public".
    function setConfig(bytes32 _config);
    ^----------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:120:5: Warning: No visibility specified. Defaulting to "public".
    function setCustomGasPrice(uint _gasPrice);
    ^-----------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:121:5: Warning: No visibility specified. Defaulting to "public".
    function randomDS_getSessionPubKeyHash() returns(bytes32);
    ^--------------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:124:5: Warning: No visibility specified. Defaulting to "public".
    function getAddress() returns (address _addr);
    ^--------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:192:5: Warning: No visibility specified. Defaulting to "public".
    function __callback(bytes32 myid, string result) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:195:5: Warning: No visibility specified. Defaulting to "public".
    function __callback(bytes32 myid, string result, bytes proof) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:836:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if ((_nbytes == 0)||(_nbytes > 32)) throw;
                                            ^---^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:926:71: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if ((_proof[0] != "L")||(_proof[1] != "P")||(_proof[2] != 1)) throw;
                                                                      ^---^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:929:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (proofVerified == false) throw;
                                    ^---^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:947:14: Warning: Use of the "var" keyword is deprecated.
        for (var i=0; i<prefix.length; i++){
             ^---^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:1010:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw; // Should be a better way?
            ^---^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:850:50: Warning: "sha3" has been deprecated in favour of "keccak256"
        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));
                                                 ^-----------------------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:882:21: Warning: "sha3" has been deprecated in favour of "keccak256"
        if (address(sha3(pubkey)) == signer) return true;
                    ^----------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:885:29: Warning: "sha3" has been deprecated in favour of "keccak256"
            return (address(sha3(pubkey)) == signer);
                            ^----------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:900:22: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.
        tosign2[0] = 1; //role
                     ^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:947:14: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.
        for (var i=0; i<prefix.length; i++){
             ^-----^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:962:20: Warning: "sha3" has been deprecated in favour of "keccak256"
        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));
                   ^-----------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:962:37: Warning: "sha3" has been deprecated in favour of "keccak256"
        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));
                                    ^---------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:984:48: Warning: "sha3" has been deprecated in favour of "keccak256"
        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match
                                               ^---------------------------------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:156:34: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function oraclize_setNetwork(uint8 networkID) internal returns(bool){
                                 ^-------------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:195:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function __callback(bytes32 myid, string result, bytes proof) {
                        ^----------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:195:39: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function __callback(bytes32 myid, string result, bytes proof) {
                                      ^-----------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:195:54: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function __callback(bytes32 myid, string result, bytes proof) {
                                                     ^---------^
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:195:5: Warning: Function state mutability can be restricted to pure
    function __callback(bytes32 myid, string result, bytes proof) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:606:5: Warning: Function state mutability can be restricted to pure
    function parseAddr(string _a) internal returns (address){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:626:5: Warning: Function state mutability can be restricted to pure
    function strCompare(string _a, string _b) internal returns (int) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:644:5: Warning: Function state mutability can be restricted to pure
    function indexOf(string _haystack, string _needle) internal returns (int) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:671:5: Warning: Function state mutability can be restricted to pure
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:706:5: Warning: Function state mutability can be restricted to pure
    function parseInt(string _a, uint _b) internal returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:724:5: Warning: Function state mutability can be restricted to pure
    function uint2str(uint i) internal returns (string){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:741:5: Warning: Function state mutability can be restricted to pure
    function stra2cbor(string[] arr) internal returns (bytes) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:783:5: Warning: Function state mutability can be restricted to pure
    function ba2cbor(bytes[] arr) internal returns (bytes) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:831:5: Warning: Function state mutability can be restricted to view
    function oraclize_getNetworkName() internal returns (string) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:944:5: Warning: Function state mutability can be restricted to pure
    function matchBytes32Prefix(bytes32 content, bytes prefix) internal returns (bool){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol:1005:5: Warning: Function state mutability can be restricted to pure
    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {
    ^ (Relevant source part starts here and spans across multiple lines).


Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1218)
	External calls sending eth:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1219)
	State variables written after the call(s):
	- stage_1_TokensSold = stage_1_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1223)
	BitChordCrowdsale.stage_1_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1181) can be used in cross function reentrancies:
	- BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315)
	- BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354)
	- BitChordCrowdsale.stage_1_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1181)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1233)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1234)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1235)
	State variables written after the call(s):
	- stage_1_TokensSold = STAGE_1_MAXCAP (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1240)
	BitChordCrowdsale.stage_1_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1181) can be used in cross function reentrancies:
	- BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315)
	- BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354)
	- BitChordCrowdsale.stage_1_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1181)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1255)
	External calls sending eth:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1256)
	State variables written after the call(s):
	- stage_2_TokensSold = stage_2_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1260)
	BitChordCrowdsale.stage_2_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1182) can be used in cross function reentrancies:
	- BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315)
	- BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354)
	- BitChordCrowdsale.stage_2_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1182)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1269)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1270)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1271)
	State variables written after the call(s):
	- stage_2_TokensSold = stage_2_maxcap (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1276)
	BitChordCrowdsale.stage_2_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1182) can be used in cross function reentrancies:
	- BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315)
	- BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354)
	- BitChordCrowdsale.stage_2_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1182)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1286)
	External calls sending eth:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1287)
	State variables written after the call(s):
	- stage_3_TokensSold = stage_3_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1291)
	BitChordCrowdsale.stage_3_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1183) can be used in cross function reentrancies:
	- BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315)
	- BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354)
	- BitChordCrowdsale.stage_3_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1183)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1301)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1302)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1303)
	State variables written after the call(s):
	- stage_3_TokensSold = STAGE_3_MAXCAP (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1308)
	BitChordCrowdsale.stage_3_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1183) can be used in cross function reentrancies:
	- BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315)
	- BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354)
	- BitChordCrowdsale.stage_3_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1183)
Reentrancy in BitChordCrowdsale.startOraclize(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1384-1391):
	External calls:
	- oraclize_query(_time,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1389)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#216)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1390)
		- oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#203)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(_time,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1389)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	State variables written after the call(s):
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1390)
		- OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#158)
		- OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#163)
		- OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#168)
		- OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#173)
		- OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#178)
		- OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#182)
		- OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#186)
	usingOraclize.OAR (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#142) can be used in cross function reentrancies:
	- BitChordCrowdsale.BitChordCrowdsale(address,address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1132-1156)
	- usingOraclize.oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#145-149)
	- usingOraclize.oraclize_setNetwork(uint8) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#156-190)
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1390)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	usingOraclize.oraclize (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#144) can be used in cross function reentrancies:
	- BitChordCrowdsale.BitChordCrowdsale(address,address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1132-1156)
	- usingOraclize.oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#145-149)
	- usingOraclize.oraclize_cbAddress() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#583-585)
	- usingOraclize.oraclize_getPrice(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#202-204)
	- usingOraclize.oraclize_query(uint256,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#215-219)
Reentrancy in BitChordCrowdsale.update() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1377-1382):
	External calls:
	- oraclize_query(86400,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1378)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#216)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1381)
		- oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#203)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(86400,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1378)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	State variables written after the call(s):
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1381)
		- OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#158)
		- OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#163)
		- OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#168)
		- OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#173)
		- OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#178)
		- OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#182)
		- OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#186)
	usingOraclize.OAR (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#142) can be used in cross function reentrancies:
	- BitChordCrowdsale.BitChordCrowdsale(address,address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1132-1156)
	- usingOraclize.oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#145-149)
	- usingOraclize.oraclize_setNetwork(uint8) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#156-190)
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1381)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	usingOraclize.oraclize (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#144) can be used in cross function reentrancies:
	- BitChordCrowdsale.BitChordCrowdsale(address,address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1132-1156)
	- usingOraclize.oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#145-149)
	- usingOraclize.oraclize_cbAddress() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#583-585)
	- usingOraclize.oraclize_getPrice(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#202-204)
	- usingOraclize.oraclize_query(uint256,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#215-219)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

usingOraclize.getCodeSize(address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#600-604) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

BitChordCrowdsale.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1411-1427) performs a multiplication on the result of a division:
	- price = 10 ** 23 / parseInt(result,5) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1414)
	- stage_1_price = price * 11 / 100 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1418)
BitChordCrowdsale.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1411-1427) performs a multiplication on the result of a division:
	- price = 10 ** 23 / parseInt(result,5) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1414)
	- stage_2_price = price * 16 / 100 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1419)
BitChordCrowdsale.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1411-1427) performs a multiplication on the result of a division:
	- price = 10 ** 23 / parseInt(result,5) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1414)
	- stage_3_price = price * 21 / 100 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1420)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

TokenContract (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1112-1116) has incorrect ERC20 function interface:TokenContract.transfer(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1113)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

BitChordCrowdsale.getPhase(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1185-1199) uses a dangerous strict equality:
	- _time == 0 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1186)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Ownable.transferTechSupport(address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#69-72) should emit an event for: 
	- techSupport = _address (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#71) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

BitChordCrowdsale.BitChordCrowdsale(address,address)._distribution (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1132) lacks a zero-check on :
		- distributionAddress = _distribution (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1138)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: tokensToSend = _value.mul(uint256(10).pow(decimals)) / stage_2_price (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1252)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: stage_2_TokensSold.add(tokensToSend) <= stage_2_maxcap (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1253)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1255)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: OnSuccessfullyBought(_address,_value,false,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1258)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: stage_2_TokensSold = stage_2_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1260)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: availableTokens = stage_2_maxcap.sub(stage_2_TokensSold) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1267)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: ethRequire = availableTokens.mul(stage_2_price) / (uint256(10).pow(decimals)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1268)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: ethRequire = availableTokens.mul(stage_2_price) / (uint256(10).pow(decimals)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1268)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1269)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1270)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1273)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1273)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1275)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: tokensToSend = _value.mul(uint256(10).pow(decimals)) / stage_3_price (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1282)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: stage_3_TokensSold.add(tokensToSend) <= STAGE_3_MAXCAP (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1284)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1286)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: OnSuccessfullyBought(_address,_value,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1289)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).tokensToSend (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1215)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: stage_3_TokensSold = stage_3_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1291)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: availableTokens = STAGE_3_MAXCAP.sub(stage_3_TokensSold) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1299)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: ethRequire = availableTokens.mul(stage_3_price) / (uint256(10).pow(decimals)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1300)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: ethRequire = availableTokens.mul(stage_3_price) / (uint256(10).pow(decimals)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1300)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1301)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1302)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1305)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).availableTokens (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1231)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1305)
Variable 'BitChordCrowdsale.buy(address,uint256,uint256).ethRequire (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1232)' in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315) potentially used before declaration: ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1307)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables

Reentrancy in BitChordCrowdsale.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1411-1427):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1412)
		- oraclize.cbAddress() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#584)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	State variables written after the call(s):
	- priceUpdateAt = block.timestamp (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1422)
	- stage_1_price = price * 11 / 100 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1418)
	- stage_2_price = price * 16 / 100 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1419)
	- stage_3_price = price * 21 / 100 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1420)
Reentrancy in BitChordCrowdsale.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1411-1427):
	External calls:
	- require(bool)(msg.sender == oraclize_cbAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1412)
		- oraclize.cbAddress() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#584)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	- update() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1425)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#216)
		- oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#203)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	External calls sending eth:
	- update() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1425)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	State variables written after the call(s):
	- update() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1425)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1233)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1234)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1235)
	State variables written after the call(s):
	- ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1239)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1269)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1270)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1271)
	State variables written after the call(s):
	- ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1275)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1301)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1302)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1303)
	State variables written after the call(s):
	- ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1307)
Reentrancy in usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835-852):
	External calls:
	- sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#841)
		- oraclize.randomDS_getSessionPubKeyHash() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#597)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	- queryId = oraclize_query(_delay,random,args,_customGasLimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#849)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#429)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	External calls sending eth:
	- queryId = oraclize_query(_delay,random,args,_customGasLimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#849)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	State variables written after the call(s):
	- queryId = oraclize_query(_delay,random,args,_customGasLimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#849)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
	- oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2])) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#850)
		- oraclize_randomDS_args[queryId] = commitment (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#855)
Reentrancy in usingOraclize.oraclize_query(string,string[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#274-278):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#277)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#251)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#274)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#277)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#277)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#279-283):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#282)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#257)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#279)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#282)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#282)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#284-288):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#287)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#263)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#284)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#287)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#287)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#289-293):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#292)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#269)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#289)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#292)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#292)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#295-300):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#299)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#251)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#295)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#299)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#299)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#301-306):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#305)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#257)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#301)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#305)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#305)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#307-312):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#311)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#263)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#307)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#311)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#311)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#313-318):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#317)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#269)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#313)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#317)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#317)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#319-325):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#324)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#251)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#319)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#324)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#324)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#326-332):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#331)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#257)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#326)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#331)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#331)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#333-339):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#338)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#263)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#333)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#338)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#338)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#340-346):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#345)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#269)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#340)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#345)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#345)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#348-355):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#354)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#251)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#348)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#354)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#354)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#356-363):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#362)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#257)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#356)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#362)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#362)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#364-371):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#370)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#263)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#364)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#370)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#370)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#372-379):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#378)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#269)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#372)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#378)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#378)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#380-388):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#387)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#251)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#380)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#387)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#254)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#387)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#389-397):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#396)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#257)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#389)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#396)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#260)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#396)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#398-406):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#405)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#263)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#398)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#405)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#266)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#405)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,string[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#407-415):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#414)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#269)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#407)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#414)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#272)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#414)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#440-444):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#443)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#417)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#440)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#443)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#443)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#445-449):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#448)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#423)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#445)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#448)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#448)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#450-454):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#453)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#429)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#450)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#453)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#453)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#455-459):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#458)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#435)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#455)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#458)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#458)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#461-466):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#465)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#417)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#461)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#465)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#465)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#467-472):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#471)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#423)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#467)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#471)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#471)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#473-478):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#477)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#429)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#473)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#477)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#477)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#479-484):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#483)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#435)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#479)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#483)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#483)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#485-491):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#490)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#417)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#485)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#490)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#490)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#492-498):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#497)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#423)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#492)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#497)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#497)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#499-505):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#504)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#429)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#499)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#504)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#504)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#506-512):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#511)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#435)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#506)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#511)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#511)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#514-521):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#520)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#417)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#514)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#520)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#520)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#522-529):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#528)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#423)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#522)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#528)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#528)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#530-537):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#536)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#429)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#530)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#536)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#536)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#538-545):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#544)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#435)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#538)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#544)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#544)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#546-554):
	External calls:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#553)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#417)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#546)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#553)
		- oraclize.queryN.value(price)(0,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#420)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#553)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#555-563):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#562)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#423)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#555)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#562)
		- oraclize.queryN.value(price)(timestamp,datasource,args) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#426)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#562)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#564-572):
	External calls:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#571)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#429)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#564)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#571)
		- oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#432)
	State variables written after the call(s):
	- oraclize_query(timestamp,datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#571)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#573-581):
	External calls:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#580)
		- price = oraclize.getPrice(datasource,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#435)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	- oraclizeAPI() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#573)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#580)
		- oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#438)
	State variables written after the call(s):
	- oraclize_query(datasource,dynargs,gaslimit) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#580)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in BitChordCrowdsale.startOraclize(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1384-1391):
	External calls:
	- oraclize_query(_time,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1389)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#216)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1390)
		- oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#203)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(_time,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1389)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	State variables written after the call(s):
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1390)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reentrancy in BitChordCrowdsale.update() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1377-1382):
	External calls:
	- oraclize_query(86400,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1378)
		- price = oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#216)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1381)
		- oraclize.getPrice(datasource) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#203)
		- oraclize = OraclizeI(OAR.getAddress()) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#147)
	External calls sending eth:
	- oraclize_query(86400,URL,json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1378)
		- oraclize.query.value(price)(timestamp,datasource,arg) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#218)
	State variables written after the call(s):
	- oraclizeBalance = oraclizeBalance.sub(oraclize_getPrice(URL)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1381)
		- oraclize_network_name = _network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#828)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1218)
	External calls sending eth:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1219)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,_value,false,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1221)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1233)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1234)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1235)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1237)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1255)
	External calls sending eth:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1256)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,_value,false,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1258)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1269)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1270)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1271)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1273)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1286)
	External calls sending eth:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1287)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,_value,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1289)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- token.transfer(_address,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1301)
	External calls sending eth:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1302)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1303)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1305)
Reentrancy in BitChordCrowdsale.sendTokensManually(address,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334-1354):
	External calls:
	- token.transfer(_address,_value) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1352)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,0,true,_value) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1353)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

BitChordCrowdsale.getPhase(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1185-1199) uses timestamp for comparisons
	Dangerous comparisons:
	- _time == 0 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1186)
	- STAGE_1_START <= _time && _time < STAGE_1_FINISH (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1189)
	- STAGE_2_START <= _time && _time < STAGE_2_FINISH (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1192)
	- STAGE_3_START <= _time && _time < STAGE_3_FINISH (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1195)
BitChordCrowdsale.fallback() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1201-1204) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(buy(msg.sender,msg.value,now)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1202)
BitChordCrowdsale.findTenAmUtc(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1367-1375) uses timestamp for comparisons
	Dangerous comparisons:
	- ten > now (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1369)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

usingOraclize.getCodeSize(address) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#600-604) uses assembly
	- INLINE ASM (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#601-604)
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835-852) uses assembly
	- INLINE ASM (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#842-848)
usingOraclize.verifySig(bytes32,bytes,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#861-887) uses assembly
	- INLINE ASM (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#875-881)
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1005-1027) uses assembly
	- INLINE ASM (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1018-1022)
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1031-1056) uses assembly
	- INLINE ASM (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1042-1055)
usingOraclize.ecrecovery(bytes32,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1059-1097) uses assembly
	- INLINE ASM (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1070-1090)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#889-922) compares to a boolean constant:
	-sigok == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#906)
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#934-942) compares to a boolean constant:
	-proofVerified == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#939)
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954-1001) compares to a boolean constant:
	-checkok == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#993)
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954-1001) compares to a boolean constant:
	-checkok == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#971)
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954-1001) compares to a boolean constant:
	-checkok == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#963)
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954-1001) compares to a boolean constant:
	-oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#996)
usingOraclize.oraclize_randomDS_proofVerify(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#924-932) compares to a boolean constant:
	-proofVerified == false (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#929)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

usingOraclize.ba2cbor(bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#783-823) is never used and should be removed
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1005-1027) is never used and should be removed
usingOraclize.ecrecovery(bytes32,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1059-1097) is never used and should be removed
usingOraclize.indexOf(string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#644-669) is never used and should be removed
usingOraclize.matchBytes32Prefix(bytes32,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#944-952) is never used and should be removed
usingOraclize.oraclize_getNetworkName() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#831-833) is never used and should be removed
usingOraclize.oraclize_getPrice(string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#206-208) is never used and should be removed
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835-852) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#440-444) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#455-459) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#461-466) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#479-484) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#485-491) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#506-512) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#514-521) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#538-545) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#546-554) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#573-581) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#416-421) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#434-439) is never used and should be removed
usingOraclize.oraclize_query(string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#210-214) is never used and should be removed
usingOraclize.oraclize_query(string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#230-234) is never used and should be removed
usingOraclize.oraclize_query(string,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#245-249) is never used and should be removed
usingOraclize.oraclize_query(string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#225-229) is never used and should be removed
usingOraclize.oraclize_query(string,string[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#274-278) is never used and should be removed
usingOraclize.oraclize_query(string,string[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#289-293) is never used and should be removed
usingOraclize.oraclize_query(string,string[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#295-300) is never used and should be removed
usingOraclize.oraclize_query(string,string[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#313-318) is never used and should be removed
usingOraclize.oraclize_query(string,string[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#319-325) is never used and should be removed
usingOraclize.oraclize_query(string,string[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#340-346) is never used and should be removed
usingOraclize.oraclize_query(string,string[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#348-355) is never used and should be removed
usingOraclize.oraclize_query(string,string[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#372-379) is never used and should be removed
usingOraclize.oraclize_query(string,string[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#380-388) is never used and should be removed
usingOraclize.oraclize_query(string,string[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#407-415) is never used and should be removed
usingOraclize.oraclize_query(string,string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#250-255) is never used and should be removed
usingOraclize.oraclize_query(string,string[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#268-273) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#445-449) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#450-454) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#467-472) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#473-478) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#492-498) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#499-505) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#522-529) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#530-537) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#555-563) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#564-572) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#422-427) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#428-433) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#235-239) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#240-244) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#220-224) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#279-283) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#284-288) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#301-306) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#307-312) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#326-332) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#333-339) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#356-363) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#364-371) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#389-397) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#398-406) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#256-261) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#262-267) is never used and should be removed
usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#596-598) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954-1001) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#934-942) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#889-922) is never used and should be removed
usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#854-856) is never used and should be removed
usingOraclize.oraclize_setConfig(bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#592-594) is never used and should be removed
usingOraclize.oraclize_setCustomGasPrice(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#589-591) is never used and should be removed
usingOraclize.oraclize_setProof(bytes1) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#586-588) is never used and should be removed
usingOraclize.oraclize_useCoupon(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#198-200) is never used and should be removed
usingOraclize.parseAddr(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#606-624) is never used and should be removed
usingOraclize.parseInt(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#701-703) is never used and should be removed
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1031-1056) is never used and should be removed
usingOraclize.strCompare(string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#626-642) is never used and should be removed
usingOraclize.strConcat(string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#696-698) is never used and should be removed
usingOraclize.strConcat(string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#692-694) is never used and should be removed
usingOraclize.strConcat(string,string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#688-690) is never used and should be removed
usingOraclize.strConcat(string,string,string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#671-686) is never used and should be removed
usingOraclize.stra2cbor(string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#741-781) is never used and should be removed
usingOraclize.uint2str(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#724-739) is never used and should be removed
usingOraclize.verifySig(bytes32,bytes,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#861-887) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Deprecated standard detected THROW (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#836):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2])) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#850):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected address(sha3()(pubkey)) == signer (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#882):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected (address(sha3()(pubkey)) == signer) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#885):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId))) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#962):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#984):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected THROW (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1010):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#926):
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected THROW (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#929):
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards

Version constraint ^0.4.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.20 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1)
solc-0.4.21 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Ownable.transferOwnership(address)._newOwner (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#58) is not in mixedCase
Parameter Ownable.transferTechSupport(address)._address (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#69) is not in mixedCase
Function OraclizeI.query_withGasLimit(uint256,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#110) is not in mixedCase
Function OraclizeI.query2_withGasLimit(uint256,string,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#112) is not in mixedCase
Function OraclizeI.queryN_withGasLimit(uint256,string,bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#114) is not in mixedCase
Function OraclizeI.randomDS_getSessionPubKeyHash() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#121) is not in mixedCase
Contract usingOraclize (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#126-1099) is not in CapWords
Function usingOraclize.oraclize_setNetwork(uint8) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#156-190) is not in mixedCase
Function usingOraclize.__callback(bytes32,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#192-194) is not in mixedCase
Function usingOraclize.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#195-196) is not in mixedCase
Function usingOraclize.oraclize_useCoupon(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#198-200) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#202-204) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#206-208) is not in mixedCase
Function usingOraclize.oraclize_query(string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#210-214) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#215-219) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#220-224) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#225-229) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#230-234) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#235-239) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#240-244) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#245-249) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#250-255) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#256-261) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#262-267) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#268-273) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#274-278) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#279-283) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#284-288) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#289-293) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#295-300) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#301-306) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#307-312) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#313-318) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#319-325) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#326-332) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#333-339) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#340-346) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#348-355) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#356-363) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#364-371) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#372-379) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#380-388) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#389-397) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#398-406) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#407-415) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#416-421) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#422-427) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#428-433) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#434-439) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#440-444) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#445-449) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#450-454) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#455-459) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#461-466) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#467-472) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#473-478) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#479-484) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#485-491) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#492-498) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#499-505) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#506-512) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#514-521) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#522-529) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#530-537) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#538-545) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#546-554) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#555-563) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#564-572) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5],uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#573-581) is not in mixedCase
Function usingOraclize.oraclize_cbAddress() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#583-585) is not in mixedCase
Function usingOraclize.oraclize_setProof(bytes1) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#586-588) is not in mixedCase
Function usingOraclize.oraclize_setCustomGasPrice(uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#589-591) is not in mixedCase
Function usingOraclize.oraclize_setConfig(bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#592-594) is not in mixedCase
Function usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#596-598) is not in mixedCase
Parameter usingOraclize.parseAddr(string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#606) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#626) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._b (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#626) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._haystack (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#644) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._needle (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#644) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#671) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._b (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#671) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._c (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#671) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._d (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#671) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._e (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#671) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#688) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._b (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#688) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._c (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#688) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._d (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#688) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#692) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._b (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#692) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._c (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#692) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#696) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._b (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#696) is not in mixedCase
Parameter usingOraclize.parseInt(string)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#701) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._a (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#706) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._b (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#706) is not in mixedCase
Function usingOraclize.oraclize_setNetworkName(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#827-829) is not in mixedCase
Parameter usingOraclize.oraclize_setNetworkName(string)._network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#827) is not in mixedCase
Function usingOraclize.oraclize_getNetworkName() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#831-833) is not in mixedCase
Function usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835-852) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._delay (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._nbytes (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._customGasLimit (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#835) is not in mixedCase
Function usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#854-856) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#889-922) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#934-942) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._queryId (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#934) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._result (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#934) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._proof (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#934) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954-1001) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string).context_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#954) is not in mixedCase
Function usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1031-1056) is not in mixedCase
Constant usingOraclize.day (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#127) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.week (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#128) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.month (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#129) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_NONE (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#130) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_TLSNotary (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#131) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Android (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#132) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Ledger (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#133) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Native (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#134) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofStorage_IPFS (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#135) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_auto (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#136) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_mainnet (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#137) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_testnet (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#138) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_morden (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#139) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_consensys (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#140) is not in UPPER_CASE_WITH_UNDERSCORES
Variable usingOraclize.OAR (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#142) is not in mixedCase
Variable usingOraclize.oraclize_network_name (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#826) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_args (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#858) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_sessionKeysHashVerified (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#859) is not in mixedCase
Modifier usingOraclize.oraclize_randomDS_proofVerify(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#924-932) is not in mixedCase
Parameter BitChordCrowdsale.getPhase(uint256)._time (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1185) is not in mixedCase
Parameter BitChordCrowdsale.buy(address,uint256,uint256)._address (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210) is not in mixedCase
Parameter BitChordCrowdsale.buy(address,uint256,uint256)._value (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210) is not in mixedCase
Parameter BitChordCrowdsale.buy(address,uint256,uint256)._time (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210) is not in mixedCase
Parameter BitChordCrowdsale.tokenCalculate(uint256,uint256)._value (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1317) is not in mixedCase
Parameter BitChordCrowdsale.tokenCalculate(uint256,uint256)._time (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1317) is not in mixedCase
Parameter BitChordCrowdsale.sendTokensManually(address,uint256)._address (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334) is not in mixedCase
Parameter BitChordCrowdsale.sendTokensManually(address,uint256)._value (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1334) is not in mixedCase
Parameter BitChordCrowdsale.startOraclize(uint256)._time (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1384) is not in mixedCase
Function BitChordCrowdsale.__callback(bytes32,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1411-1427) is not in mixedCase
Variable BitChordCrowdsale.stage_1_price (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1161) is not in mixedCase
Variable BitChordCrowdsale.stage_2_price (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1167) is not in mixedCase
Variable BitChordCrowdsale.stage_2_maxcap (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1168) is not in mixedCase
Variable BitChordCrowdsale.stage_3_price (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1174) is not in mixedCase
Variable BitChordCrowdsale.stage_1_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1181) is not in mixedCase
Variable BitChordCrowdsale.stage_2_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1182) is not in mixedCase
Variable BitChordCrowdsale.stage_3_TokensSold (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1183) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1219)
	State variables written after the call(s):
	- stage_1_TokensSold = stage_1_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1223)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,_value,false,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1221)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1234)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1235)
	State variables written after the call(s):
	- ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1239)
	- stage_1_TokensSold = STAGE_1_MAXCAP (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1240)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1237)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1256)
	State variables written after the call(s):
	- stage_2_TokensSold = stage_2_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1260)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,_value,false,tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1258)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1270)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1271)
	State variables written after the call(s):
	- ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1275)
	- stage_2_TokensSold = stage_2_maxcap (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1276)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1273)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1287)
	State variables written after the call(s):
	- stage_3_TokensSold = stage_3_TokensSold.add(tokensToSend) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1291)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,_value,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1289)
Reentrancy in BitChordCrowdsale.buy(address,uint256,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1210-1315):
	External calls:
	- msg.sender.transfer(_value.sub(ethRequire)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1302)
	- distributionAddress.transfer(address(this).balance.sub(oraclizeBalance)) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1303)
	State variables written after the call(s):
	- ethCollected = ethCollected.add(ethRequire) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1307)
	- stage_3_TokensSold = STAGE_3_MAXCAP (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1308)
	Event emitted after the call(s):
	- OnSuccessfullyBought(_address,ethRequire,false,availableTokens) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1305)
Reentrancy in BitChordCrowdsale.requestOraclizeBalance() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1397-1405):
	External calls:
	- owner.transfer(oraclizeBalance) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1400)
	- owner.transfer(address(this).balance) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1402)
	State variables written after the call(s):
	- oraclizeBalance = 0 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1404)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

usingOraclize.oraclize_query(string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#210-214) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#212)
usingOraclize.oraclize_query(uint256,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#215-219) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#217)
usingOraclize.oraclize_query(string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#230-234) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#232)
usingOraclize.oraclize_query(uint256,string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#235-239) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#237)
usingOraclize.oraclize_query(string,string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#250-255) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#252)
usingOraclize.oraclize_query(uint256,string,string[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#256-261) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#258)
usingOraclize.oraclize_query(string,bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#416-421) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#418)
usingOraclize.oraclize_query(uint256,string,bytes[]) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#422-427) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#424)
BitChordCrowdsale.slitherConstructorVariables() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431) uses literals with too many digits:
	- stage_2_maxcap = 9000000000000000000000000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1168)
BitChordCrowdsale.slitherConstructorConstantVariables() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431) uses literals with too many digits:
	- STAGE_1_MAXCAP = 3100000000000000000000000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1162)
BitChordCrowdsale.slitherConstructorConstantVariables() (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431) uses literals with too many digits:
	- STAGE_3_MAXCAP = 67100000000000000000000000 (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1175)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

usingOraclize.day (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#127) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.week (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#128) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.month (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#129) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.proofType_NONE (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#130) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.proofType_TLSNotary (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#131) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.proofType_Android (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#132) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.proofType_Ledger (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#133) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.proofType_Native (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#134) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.proofStorage_IPFS (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#135) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.networkID_mainnet (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#137) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.networkID_testnet (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#138) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.networkID_morden (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#139) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
usingOraclize.networkID_consensys (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#140) is never used in BitChordCrowdsale (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1119-1431)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

BitChordCrowdsale.decimals (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1123) should be constant 
BitChordCrowdsale.startingExchangePrice (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#1129) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

query(uint256,string,string) should be declared external:
	- OraclizeI.query(uint256,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#109)
query_withGasLimit(uint256,string,string,uint256) should be declared external:
	- OraclizeI.query_withGasLimit(uint256,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#110)
query2(uint256,string,string,string) should be declared external:
	- OraclizeI.query2(uint256,string,string,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#111)
query2_withGasLimit(uint256,string,string,string,uint256) should be declared external:
	- OraclizeI.query2_withGasLimit(uint256,string,string,string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#112)
queryN(uint256,string,bytes) should be declared external:
	- OraclizeI.queryN(uint256,string,bytes) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#113)
queryN_withGasLimit(uint256,string,bytes,uint256) should be declared external:
	- OraclizeI.queryN_withGasLimit(uint256,string,bytes,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#114)
getPrice(string) should be declared external:
	- OraclizeI.getPrice(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#115)
getPrice(string,uint256) should be declared external:
	- OraclizeI.getPrice(string,uint256) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#116)
useCoupon(string) should be declared external:
	- OraclizeI.useCoupon(string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#117)
__callback(bytes32,string) should be declared external:
	- usingOraclize.__callback(bytes32,string) (0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol#192-194)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x0c2795fc4e1f57614eb78923dc78521ff0676fb8.sol analyzed (7 contracts with 94 detectors), 398 result(s) found

real	0m15.921s
user	0m15.518s
sys	0m0.401s
