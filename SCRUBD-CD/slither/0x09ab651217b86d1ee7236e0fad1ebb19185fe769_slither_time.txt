'solc --version' running
'solc ./0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol:
./0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol:1086:27: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function managePlayer(uint256 _pID, LDdatasets.EventReturns memory _eventData_)
                          ^----------^
./0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol:1086:5: Warning: Function state mutability can be restricted to pure
    function managePlayer(uint256 _pID, LDdatasets.EventReturns memory _eventData_)
    ^ (Relevant source part starts here and spans across multiple lines).


Reentrancy in MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#769)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	State variables written after the call(s):
	- plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#792)
	MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280)
	- MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242)
	- MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379)
	- MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358-393)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329-356)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395-430)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
	- MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
	- MonkeyScam.withdrawEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1335-1352)
Reentrancy in MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951):
	External calls:
	- _eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#945)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
	State variables written after the call(s):
	- _eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#946)
		- airDropPot_ = airDropPot_.add(_air) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1278)
	MonkeyScam.airDropPot_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#130) can be used in cross function reentrancies:
	- MonkeyScam.airDropPot_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#130)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269-1297)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- _eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#946)
		- plyrRnds_[_pID].mask = (((round_.mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID].mask) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1325)
	MonkeyScam.plyrRnds_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#138) can be used in cross function reentrancies:
	- MonkeyScam.calcUnMaskedEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#960-966)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.getPlayerVaultsHelper(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#666-672)
	- MonkeyScam.plyrRnds_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#138)
	- MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170)
	- MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329)
	- _eventData_ = distributeInternal(_pID,_eth,_keys,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#946)
		- round_.mask = _ppt.add(round_.mask) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1320)
		- round_.pot = _pot.add(_dust).add(round_.pot) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1290)
	MonkeyScam.round_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#143) can be used in cross function reentrancies:
	- MonkeyScam.activate() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1385-1404)
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.calcKeysReceived(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#974-987)
	- MonkeyScam.calcUnMaskedEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#960-966)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269-1297)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.getBuyPrice() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#580-593)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.getPlayerVaultsHelper(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#666-672)
	- MonkeyScam.getTimeLeft() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#601-616)
	- MonkeyScam.iWantXKeys(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#995-1008)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.round_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#143)
	- MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329)
	- MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
Reentrancy in MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154):
	External calls:
	- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
	- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	State variables written after the call(s):
	- round_.mask = _ppt.add(round_.mask) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1142)
	MonkeyScam.round_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#143) can be used in cross function reentrancies:
	- MonkeyScam.activate() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1385-1404)
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.calcKeysReceived(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#974-987)
	- MonkeyScam.calcUnMaskedEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#960-966)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269-1297)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.getBuyPrice() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#580-593)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.getPlayerVaultsHelper(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#666-672)
	- MonkeyScam.getTimeLeft() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#601-616)
	- MonkeyScam.iWantXKeys(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#995-1008)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.round_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#143)
	- MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329)
	- MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
Reentrancy in MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#458)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	State variables written after the call(s):
	- _eth = withdrawEarnings(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#461)
		- plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1166)
		- plyr_[_pID].win = 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1346)
		- plyr_[_pID].gen = 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1347)
		- plyr_[_pID].aff = 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1348)
	MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280)
	- MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242)
	- MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379)
	- MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358-393)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329-356)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395-430)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
	- MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
	- MonkeyScam.withdrawEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1335-1352)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

NameFilter.nameFilter(string) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1550-1612) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

MonkeyScam.getPlayerVaultsHelper(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#666-672) performs a multiplication on the result of a division:
	- (((((round_.mask).add(((((round_.pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_.keys))).mul(plyrRnds_[_pID].keys)) / 1000000000000000000)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#671)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) performs a multiplication on the result of a division:
	- _gen = (_pot.mul(20)) / 100 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1114)
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1117)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) performs a multiplication on the result of a division:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1117)
	- _dust = _gen.sub((_ppt.mul(round_.keys)) / 1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1118)
MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193) performs a multiplication on the result of a division:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_.end) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1186)
MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193) performs a multiplication on the result of a division:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1184)
MonkeyScam.airdrop() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1200-1219) performs a multiplication on the result of a division:
	- (seed - ((seed / 1000) * 1000)) < airDropTracker_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1215)
MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264) performs a multiplication on the result of a division:
	- _aff = _eth * 25 / 100 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1232)
	- _com += (_aff * 80 / 100) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1243)
MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264) performs a multiplication on the result of a division:
	- _aff = _eth * 25 / 100 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1232)
	- _toqueen += (_aff * 20 / 100) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1244)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329) performs a multiplication on the result of a division:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1319)
	- _pearn = (_ppt.mul(_keys)) / (1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1324)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329) performs a multiplication on the result of a division:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1319)
	- (_gen.sub((_ppt.mul(round_.keys)) / (1000000000000000000))) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1328)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#757)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794) uses a dangerous strict equality:
	- _now > round_.end && round_.ended == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#765)
MonkeyScam.calcKeysReceived(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#974-987) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#983)
MonkeyScam.getBuyPrice() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#580-593) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#589)
MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661) uses a dangerous strict equality:
	- now > round_.end && round_.ended == false && round_.plyr != 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#631)
MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661) uses a dangerous strict equality:
	- round_.plyr == _pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#634)
MonkeyScam.iWantXKeys(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#995-1008) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1004)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841) uses a dangerous strict equality:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#807)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841) uses a dangerous strict equality:
	- _now > round_.end && round_.ended == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#818)
MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193) uses a dangerous strict equality:
	- _now > round_.end && round_.plyr == 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#252)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	State variables written after the call(s):
	- plyr_[_pID].laff = _affID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#274)
	MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280)
	- MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242)
	- MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379)
	- MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358-393)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329-356)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395-430)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
	- MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
	- MonkeyScam.withdrawEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1335-1352)
Reentrancy in MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#222)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	State variables written after the call(s):
	- plyr_[_pID].laff = _affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#237)
	MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280)
	- MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242)
	- MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379)
	- MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358-393)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329-356)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395-430)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
	- MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
	- MonkeyScam.withdrawEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1335-1352)
Reentrancy in MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#290)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	State variables written after the call(s):
	- plyr_[_pID].laff = _affID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#312)
	MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137) can be used in cross function reentrancies:
	- MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794)
	- MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280)
	- MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242)
	- MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318)
	- MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080)
	- MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264)
	- MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154)
	- MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379)
	- MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205)
	- MonkeyScam.getCurrentRoundInfo() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#687-704)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661)
	- MonkeyScam.plyr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#137)
	- MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358-393)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329-356)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395-430)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
	- MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
	- MonkeyScam.withdrawEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1335-1352)
Reentrancy in MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080):
	External calls:
	- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
	- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
	- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	State variables written after the call(s):
	- pIDxAddr_[msg.sender] = _pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1063)
	MonkeyScam.pIDxAddr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#135) can be used in cross function reentrancies:
	- MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280)
	- MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242)
	- MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318)
	- MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080)
	- MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205)
	- MonkeyScam.getPlayerInfoByAddress(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719-740)
	- MonkeyScam.pIDxAddr_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#135)
	- MonkeyScam.reLoadXaddr(address,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358-393)
	- MonkeyScam.reLoadXid(uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329-356)
	- MonkeyScam.reLoadXname(bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395-430)
	- MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032)
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
	- MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

MonkeyScam.reLoadXid(uint256,uint256)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#336) is a local variable never initialized
MonkeyScam.reLoadXaddr(address,uint256)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#365) is a local variable never initialized
MonkeyScam.reLoadXname(bytes32,uint256)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#402) is a local variable never initialized
MonkeyScam.withdraw()._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#454) is a local variable never initialized
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._prize (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#890) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Reentrancy in MonkeyScam.determinePID(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049-1080):
	External calls:
	- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
	- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
	- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	State variables written after the call(s):
	- pIDxName_[_name] = _pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1068)
	- plyrNames_[_pID][_name] = true (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1070)
	- plyr_[_pID].addr = msg.sender (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1064)
	- plyr_[_pID].name = _name (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1069)
	- plyr_[_pID].laff = _laff (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1074)
Reentrancy in MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#458)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	State variables written after the call(s):
	- _eth = withdrawEarnings(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#461)
		- plyrRnds_[_pID].mask = _earnings.add(plyrRnds_[_pID].mask) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1168)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#769)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	Event emitted after the call(s):
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#776-788)
Reentrancy in MonkeyScam.buyXaddr(address) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244-280):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#252)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#279)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	External calls sending eth:
	- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#279)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1240)
		- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#279)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#776-788)
		- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#279)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1363-1378)
		- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#279)
Reentrancy in MonkeyScam.buyXid(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214-242):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#222)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	- buyCore(_pID,_affCode,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#241)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	External calls sending eth:
	- buyCore(_pID,_affCode,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#241)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1240)
		- buyCore(_pID,_affCode,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#241)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#776-788)
		- buyCore(_pID,_affCode,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#241)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1363-1378)
		- buyCore(_pID,_affCode,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#241)
Reentrancy in MonkeyScam.buyXname(bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282-318):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#290)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#317)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	External calls sending eth:
	- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#317)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1240)
		- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#317)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#776-788)
		- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#317)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1363-1378)
		- buyCore(_pID,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#317)
Reentrancy in MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951):
	External calls:
	- _eventData_ = distributeExternal(_pID,_eth,_affID,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#945)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
	Event emitted after the call(s):
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1363-1378)
		- endTx(_pID,_eth,_keys,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#949)
Reentrancy in MonkeyScam.fallback() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#190-205):
	External calls:
	- _eventData_ = determinePID(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#198)
		- _pID = PlayerBook.getPlayerID(msg.sender) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1058)
		- _name = PlayerBook.getPlayerName(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1059)
		- _laff = PlayerBook.getPlayerLAff(_pID) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1060)
	- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#204)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	External calls sending eth:
	- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#204)
		- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	Event emitted after the call(s):
	- MonkeyEvents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_pID,_aff,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1240)
		- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#204)
	- MonkeyEvents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#776-788)
		- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#204)
	- MonkeyEvents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount,_eventData_.potAmount,airDropPot_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1363-1378)
		- buyCore(_pID,plyr_[_pID].laff,_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#204)
Reentrancy in MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#821)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	Event emitted after the call(s):
	- MonkeyEvents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#828-839)
Reentrancy in MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538):
	External calls:
	- (_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#532)
	Event emitted after the call(s):
	- MonkeyEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#537)
Reentrancy in MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554):
	External calls:
	- (_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#548)
	Event emitted after the call(s):
	- MonkeyEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#553)
Reentrancy in MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570):
	External calls:
	- (_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#564)
	Event emitted after the call(s):
	- MonkeyEvents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#569)
Reentrancy in MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498):
	External calls:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#458)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	External calls sending eth:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#458)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	- plyr_[_pID].addr.transfer(_eth) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#465)
	Event emitted after the call(s):
	- MonkeyEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#472-484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.end && round_.ended == false && round_.plyr != 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#451)
MonkeyScam.getBuyPrice() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#580-593) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#589)
MonkeyScam.getTimeLeft() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#601-616) uses timestamp for comparisons
	Dangerous comparisons:
	- _now < round_.end (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#609)
	- _now > round_.strt + rndGap_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#610)
MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661) uses timestamp for comparisons
	Dangerous comparisons:
	- now > round_.end && round_.ended == false && round_.plyr != 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#631)
	- round_.plyr == _pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#634)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#757)
	- _now > round_.end && round_.ended == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#765)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#807)
	- _now > round_.end && round_.ended == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#818)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses timestamp for comparisons
	Dangerous comparisons:
	- round_.plyr != _pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#876)
MonkeyScam.calcKeysReceived(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#974-987) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#983)
MonkeyScam.iWantXKeys(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#995-1008) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.strt + rndGap_ && (_now <= round_.end || (_now > round_.end && round_.plyr == 0)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1004)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) uses timestamp for comparisons
	Dangerous comparisons:
	- _dust > 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1119)
MonkeyScam.updateGenVault(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159-1170) uses timestamp for comparisons
	Dangerous comparisons:
	- _earnings > 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1163)
MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193) uses timestamp for comparisons
	Dangerous comparisons:
	- _now > round_.end && round_.plyr == 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1183)
	- _newTime < (rndMax_).add(_now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1189)
MonkeyScam.airdrop() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1200-1219) uses timestamp for comparisons
	Dangerous comparisons:
	- (seed - ((seed / 1000) * 1000)) < airDropTracker_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1215)
MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269-1297) uses timestamp for comparisons
	Dangerous comparisons:
	- _dust > 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1286)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

NameFilter.nameFilter(string) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1550-1612) uses assembly
	- INLINE ASM (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1608-1611)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498) compares to a boolean constant:
	-_now > round_.end && round_.ended == false && round_.plyr != 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#451)
MonkeyScam.getPlayerVaults(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625-661) compares to a boolean constant:
	-now > round_.end && round_.ended == false && round_.plyr != 0 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#631)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794) compares to a boolean constant:
	-_now > round_.end && round_.ended == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#765)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841) compares to a boolean constant:
	-_now > round_.end && round_.ended == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#818)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) compares to a boolean constant:
	-airdrop() == true (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#887)
MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016-1032) compares to a boolean constant:
	-plyrNames_[_pID][_name] == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1030)
MonkeyScam.receivePlayerNameList(uint256,bytes32) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1037-1043) compares to a boolean constant:
	-plyrNames_[_pID][_name] == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1041)
MonkeyScam.activate() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1385-1404) compares to a boolean constant:
	-require(bool,string)(activated_ == false,dogscam already activated) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1397)
MonkeyScam.isActivated() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#157-160) compares to a boolean constant:
	-require(bool,string)(activated_ == true,its not ready yet) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#158)
NameFilter.nameFilter(string) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1550-1612) compares to a boolean constant:
	-_hasNonNumber == false (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1582)
NameFilter.nameFilter(string) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1550-1612) compares to a boolean constant:
	-_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1600)
NameFilter.nameFilter(string) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1550-1612) compares to a boolean constant:
	-require(bool,string)(_hasNonNumber == true,string cannot be only numbers) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1605)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Version constraint ^0.4.24 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- ^0.4.24 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1)
solc-0.4.24 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154):
	- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
	- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
Low level call in MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224-1264):
	- ! address(monkeyQueue).call.value(_toqueen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1248)
	- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1253)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Event MonkeyEvents.onNewName(uint256,address,bytes32,bool,uint256,address,bytes32,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#6-17) is not in CapWords
Event MonkeyEvents.onEndTx(uint256,uint256,bytes32,address,uint256,uint256,address,bytes32,uint256,uint256,uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#20-35) is not in CapWords
Event MonkeyEvents.onWithdraw(uint256,address,bytes32,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#38-45) is not in CapWords
Event MonkeyEvents.onWithdrawAndDistribute(address,bytes32,uint256,uint256,uint256,address,bytes32,uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#48-60) is not in CapWords
Event MonkeyEvents.onBuyAndDistribute(address,bytes32,uint256,uint256,uint256,address,bytes32,uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#64-76) is not in CapWords
Event MonkeyEvents.onReLoadAndDistribute(address,bytes32,uint256,uint256,address,bytes32,uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#80-91) is not in CapWords
Event MonkeyEvents.onAffiliatePayout(uint256,address,bytes32,uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#94-102) is not in CapWords
Contract modularMonkeyScam (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#105) is not in CapWords
Parameter MonkeyScam.buyXid(uint256)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#214) is not in mixedCase
Parameter MonkeyScam.buyXaddr(address)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#244) is not in mixedCase
Parameter MonkeyScam.buyXname(bytes32)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#282) is not in mixedCase
Parameter MonkeyScam.reLoadXid(uint256,uint256)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329) is not in mixedCase
Parameter MonkeyScam.reLoadXid(uint256,uint256)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#329) is not in mixedCase
Parameter MonkeyScam.reLoadXaddr(address,uint256)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358) is not in mixedCase
Parameter MonkeyScam.reLoadXaddr(address,uint256)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#358) is not in mixedCase
Parameter MonkeyScam.reLoadXname(bytes32,uint256)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395) is not in mixedCase
Parameter MonkeyScam.reLoadXname(bytes32,uint256)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#395) is not in mixedCase
Parameter MonkeyScam.registerNameXID(string,uint256,bool)._nameString (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524) is not in mixedCase
Parameter MonkeyScam.registerNameXID(string,uint256,bool)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524) is not in mixedCase
Parameter MonkeyScam.registerNameXID(string,uint256,bool)._all (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524) is not in mixedCase
Parameter MonkeyScam.registerNameXaddr(string,address,bool)._nameString (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540) is not in mixedCase
Parameter MonkeyScam.registerNameXaddr(string,address,bool)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540) is not in mixedCase
Parameter MonkeyScam.registerNameXaddr(string,address,bool)._all (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540) is not in mixedCase
Parameter MonkeyScam.registerNameXname(string,bytes32,bool)._nameString (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556) is not in mixedCase
Parameter MonkeyScam.registerNameXname(string,bytes32,bool)._affCode (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556) is not in mixedCase
Parameter MonkeyScam.registerNameXname(string,bytes32,bool)._all (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556) is not in mixedCase
Parameter MonkeyScam.getPlayerVaults(uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#625) is not in mixedCase
Parameter MonkeyScam.getPlayerVaultsHelper(uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#666) is not in mixedCase
Parameter MonkeyScam.getPlayerInfoByAddress(address)._addr (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#719) is not in mixedCase
Parameter MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750) is not in mixedCase
Parameter MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns)._affID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750) is not in mixedCase
Parameter MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._affID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800) is not in mixedCase
Parameter MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._affID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847) is not in mixedCase
Parameter MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847) is not in mixedCase
Parameter MonkeyScam.calcUnMaskedEarnings(uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#960) is not in mixedCase
Parameter MonkeyScam.calcKeysReceived(uint256)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#974) is not in mixedCase
Parameter MonkeyScam.iWantXKeys(uint256)._keys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#995) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._addr (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._name (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016) is not in mixedCase
Parameter MonkeyScam.receivePlayerInfo(uint256,address,bytes32,uint256)._laff (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1016) is not in mixedCase
Parameter MonkeyScam.receivePlayerNameList(uint256,bytes32)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1037) is not in mixedCase
Parameter MonkeyScam.receivePlayerNameList(uint256,bytes32)._name (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1037) is not in mixedCase
Parameter MonkeyScam.determinePID(LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1049) is not in mixedCase
Parameter MonkeyScam.managePlayer(uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1086) is not in mixedCase
Parameter MonkeyScam.endRound(LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099) is not in mixedCase
Parameter MonkeyScam.updateGenVault(uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1159) is not in mixedCase
Parameter MonkeyScam.updateTimer(uint256)._keys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._affID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224) is not in mixedCase
Parameter MonkeyScam.distributeExternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1224) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._keys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269) is not in mixedCase
Parameter MonkeyScam.distributeInternal(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1269) is not in mixedCase
Parameter MonkeyScam.updateMasks(uint256,uint256,uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303) is not in mixedCase
Parameter MonkeyScam.updateMasks(uint256,uint256,uint256)._gen (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303) is not in mixedCase
Parameter MonkeyScam.updateMasks(uint256,uint256,uint256)._keys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303) is not in mixedCase
Parameter MonkeyScam.withdrawEarnings(uint256)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1335) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._pID (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._keys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357) is not in mixedCase
Parameter MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns)._eventData_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357) is not in mixedCase
Constant MonkeyScam.PlayerBook (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#113) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.rndInit_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#123) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.rndInc_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#124) is not in UPPER_CASE_WITH_UNDERSCORES
Constant MonkeyScam.rndMax_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#125) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter LDKeysCalc.keysRec(uint256,uint256)._curEth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1478) is not in mixedCase
Parameter LDKeysCalc.keysRec(uint256,uint256)._newEth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1478) is not in mixedCase
Parameter LDKeysCalc.ethRec(uint256,uint256)._curKeys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1492) is not in mixedCase
Parameter LDKeysCalc.ethRec(uint256,uint256)._sellKeys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1492) is not in mixedCase
Parameter LDKeysCalc.keys(uint256)._eth (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1505) is not in mixedCase
Parameter LDKeysCalc.eth(uint256)._keys (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1518) is not in mixedCase
Parameter NameFilter.nameFilter(string)._input (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1550) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498):
	External calls:
	- plyr_[_pID].addr.transfer(_eth) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#465)
	External calls sending eth:
	- _eventData_ = endRound(_eventData_) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#458)
		- ! address(monkeyKing).call.value(_com)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1129)
		- ! address(monkeyQueue).call.value(_queen)() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1135)
	- plyr_[_pID].addr.transfer(_eth) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#465)
	Event emitted after the call(s):
	- MonkeyEvents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.genAmount) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#472-484)
Reentrancy in MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498):
	External calls:
	- plyr_[_pID].addr.transfer(_eth) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#493)
	Event emitted after the call(s):
	- MonkeyEvents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#496)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

MonkeyScam.withdraw() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#436-498) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#468)
MonkeyScam.getBuyPrice() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#580-593) uses literals with too many digits:
	- ((round_.keys.add(1000000000000000000)).ethRec(1000000000000000000)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#590)
MonkeyScam.getBuyPrice() (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#580-593) uses literals with too many digits:
	- (75000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#592)
MonkeyScam.getPlayerVaultsHelper(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#666-672) uses literals with too many digits:
	- (((((round_.mask).add(((((round_.pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_.keys))).mul(plyrRnds_[_pID].keys)) / 1000000000000000000)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#671)
MonkeyScam.buyCore(uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#750-794) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#772)
MonkeyScam.reLoadCore(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#800-841) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#824)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- round_.eth < 100000000000000000000 && plyrRnds_[_pID].eth.add(_eth) > 10000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#855)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _availableLimit = (10000000000000000000).sub(plyrRnds_[_pID].eth) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#857)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eth > 1000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#864)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _keys >= 1000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#871)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eth >= 100000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#884)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eth >= 10000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#891)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eventData_.compressedData += 300000000000000000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#901)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eth >= 1000000000000000000 && _eth < 10000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#902)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eventData_.compressedData += 200000000000000000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#911)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eth >= 100000000000000000 && _eth < 1000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#912)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eventData_.compressedData += 100000000000000000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#921)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eventData_.compressedData += 10000000000000000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#924)
MonkeyScam.core(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#847-951) uses literals with too many digits:
	- _eventData_.compressedData += _prize * 1000000000000000000000000000000000 (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#926)
MonkeyScam.calcUnMaskedEarnings(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#960-966) uses literals with too many digits:
	- ((((round_.mask).mul(plyrRnds_[_pID].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID].mask)) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#965)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) uses literals with too many digits:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1117)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) uses literals with too many digits:
	- _dust = _gen.sub((_ppt.mul(round_.keys)) / 1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1118)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (round_.end * 1000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1145)
MonkeyScam.endRound(LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1099-1154) uses literals with too many digits:
	- _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1146)
MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193) uses literals with too many digits:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1184)
MonkeyScam.updateTimer(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1175-1193) uses literals with too many digits:
	- _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_.end) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1186)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329) uses literals with too many digits:
	- _ppt = (_gen.mul(1000000000000000000)) / (round_.keys) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1319)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329) uses literals with too many digits:
	- _pearn = (_ppt.mul(_keys)) / (1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1324)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329) uses literals with too many digits:
	- plyrRnds_[_pID].mask = (((round_.mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID].mask) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1325)
MonkeyScam.updateMasks(uint256,uint256,uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1303-1329) uses literals with too many digits:
	- (_gen.sub((_ppt.mul(round_.keys)) / (1000000000000000000))) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1328)
MonkeyScam.endTx(uint256,uint256,uint256,LDdatasets.EventReturns) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1357-1379) uses literals with too many digits:
	- _eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1360)
LDKeysCalc.keys(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1505-1511) uses literals with too many digits:
	- ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1510)
LDKeysCalc.eth(uint256) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1518-1524) uses literals with too many digits:
	- ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq()) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#1523)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

MonkeyScam.fees_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#147) should be constant 
MonkeyScam.monkeyKing (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#115) should be constant 
MonkeyScam.monkeyQueue (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#116) should be constant 
MonkeyScam.potSplit_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#148) should be constant 
MonkeyScam.rndGap_ (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#120) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

registerNameXID(string,uint256,bool) should be declared external:
	- MonkeyScam.registerNameXID(string,uint256,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#524-538)
registerNameXaddr(string,address,bool) should be declared external:
	- MonkeyScam.registerNameXaddr(string,address,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#540-554)
registerNameXname(string,bytes32,bool) should be declared external:
	- MonkeyScam.registerNameXname(string,bytes32,bool) (0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol#556-570)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x09ab651217b86d1ee7236e0fad1ebb19185fe769.sol analyzed (8 contracts with 94 detectors), 202 result(s) found

real	0m11.358s
user	0m10.978s
sys	0m0.374s
