'solc --version' running
'solc ./0x0043a4a809be33afa17c1e3e37e19977622e4700.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0043a4a809be33afa17c1e3e37e19977622e4700.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> ./0x0043a4a809be33afa17c1e3e37e19977622e4700.sol:1842:1:
     |
1842 | contract BlockersContract is RamppERC721A {
     | ^ (Relevant source part starts here and spans across multiple lines).



RamppERC721A.mintToMultipleERC20(address,uint256,address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751-1773) uses arbitrary from in transferFrom: transferComplete = payableToken.transferFrom(_to,address(this),tokensQtyToTransfer) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1768)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom

Reentrancy in WithdrawableV2._withdrawAllSurcharges() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1505-1516):
	External calls:
	- _widthdraw(surchargePayableAddresses[i],(balance * surchargePayableFees[i]) / 100) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1510-1513)
		- (success,None) = _address.call{value: _amount}() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1497)
	State variables written after the call(s):
	- ramppSurchargeBalance = 0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1515)
	WithdrawableV2.ramppSurchargeBalance (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1462) can be used in cross function reentrancies:
	- WithdrawableV2._withdrawAllSurcharges() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1505-1516)
	- WithdrawableV2.calcAvailableBalance() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1471-1473)
	- WithdrawableV2.ramppSurchargeBalance (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1462)
	- WithdrawableV2.resetRamppSurchargeBalance() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1636-1638)
	- WithdrawableV2.withdrawRamppSurcharges() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1536-1539)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

WithdrawableV2.withdrawERC20(address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1525-1531) ignores return value by tokenContract.transfer(erc20Payable,_amountToWithdraw) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1529)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in ERC721A._safeMint(address,uint256,bool,bytes) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1208-1246):
	External calls:
	- require(bool,string)(_checkOnERC721Received(address(0),to,updatedIndex,_data),ERC721A: transfer to non ERC721Receiver implementer) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1237-1240)
		- retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,_data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1364-1376)
	State variables written after the call(s):
	- currentIndex = updatedIndex (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1244)
	ERC721A.currentIndex (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#870) can be used in cross function reentrancies:
	- ERC721A._exists(uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1189-1191)
	- ERC721A._totalMinted() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#942-946)
	- ERC721A.constructor(string,string,uint256,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#899-915)
	- ERC721A.ownershipOf(uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1019-1048)
Reentrancy in RamppERC721A.mintToMultipleERC20(address,uint256,address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751-1773):
	External calls:
	- transferComplete = payableToken.transferFrom(_to,address(this),tokensQtyToTransfer) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1768)
	- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
		- retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,_data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1364-1376)
	State variables written after the call(s):
	- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
		- _addressData[to] = AddressData(addressData.balance + uint128(quantity),addressData.numberMinted + 0) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1227-1230)
		- _addressData[to] = AddressData(addressData.balance + uint128(quantity),addressData.numberMinted + uint128(quantity)) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1227-1230)
	ERC721A._addressData (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#886) can be used in cross function reentrancies:
	- ERC721A._numberMinted(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1011-1017)
	- ERC721A._safeMint(address,uint256,bool,bytes) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1208-1246)
	- ERC721A._transfer(address,address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1258-1303)
	- ERC721A.balanceOf(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1006-1009)
	- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
		- currentIndex = updatedIndex (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1244)
	ERC721A.currentIndex (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#870) can be used in cross function reentrancies:
	- ERC721A._exists(uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1189-1191)
	- ERC721A._safeMint(address,uint256,bool,bytes) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1208-1246)
	- ERC721A._totalMinted() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#942-946)
	- ERC721A.constructor(string,string,uint256,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#899-915)
	- ERC721A.ownershipOf(uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1019-1048)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

WithdrawableV2.setRamppAddress(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1646-1650) should emit an event for: 
	- RAMPPADDRESS = _newAddress (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1648) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Reentrancy in RamppERC721A.mintToMultipleERC20(address,uint256,address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751-1773):
	External calls:
	- transferComplete = payableToken.transferFrom(_to,address(this),tokensQtyToTransfer) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1768)
	- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
		- retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,_data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1364-1376)
	State variables written after the call(s):
	- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
		- _ownerships[startTokenId] = TokenOwnership(to,uint64(block.timestamp)) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1231)
	- addSurcharge() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1772)
		- ramppSurchargeBalance += ramppSurchargeFee (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1545)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in ERC721A._safeMint(address,uint256,bool,bytes) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1208-1246):
	External calls:
	- require(bool,string)(_checkOnERC721Received(address(0),to,updatedIndex,_data),ERC721A: transfer to non ERC721Receiver implementer) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1237-1240)
		- retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,_data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1364-1376)
	Event emitted after the call(s):
	- Transfer(address(0),to,updatedIndex) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1236)
Reentrancy in RamppERC721A.mintToMultipleERC20(address,uint256,address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751-1773):
	External calls:
	- transferComplete = payableToken.transferFrom(_to,address(this),tokensQtyToTransfer) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1768)
	- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
		- retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,_data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1364-1376)
	Event emitted after the call(s):
	- Transfer(address(0),to,updatedIndex) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1236)
		- _safeMint(_to,_amount,false) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1771)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

ERC721A._transfer(address,address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1258-1303) uses timestamp for comparisons
	Dangerous comparisons:
	- _ownerships[nextTokenId].addr == address(0) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1292)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.verifyCallResult(bool,bytes,string) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#218-238) uses assembly
	- INLINE ASM (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#230-233)
ERC721A._checkOnERC721Received(address,address,uint256,bytes) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1357-1380) uses assembly
	- INLINE ASM (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1372-1374)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Teams.inTeam(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#817-824) compares to a boolean constant:
	-team[_address] == true (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#823)
ERC721A._safeMint(address,uint256,bool,bytes) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1208-1246) compares to a boolean constant:
	-isAdminMint == false (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1220)
WithdrawableV2.isApprovedForERC20Payments(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1567-1569) compares to a boolean constant:
	-allowedTokenContracts[_erc20TokenContract].isActive == true (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1568)
RamppERC721A.mintTo(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1714-1723) compares to a boolean constant:
	-require(bool,string)(onlyERC20MintingMode == false,Only minting with ERC-20 tokens is enabled.) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1715)
RamppERC721A.mintTo(address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1714-1723) compares to a boolean constant:
	-require(bool,string)(mintingOpen == true,Minting is not open right now!) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1717)
RamppERC721A.mintToMultiple(address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1731-1742) compares to a boolean constant:
	-require(bool,string)(mintingOpen == true,Minting is not open right now!) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1735)
RamppERC721A.mintToMultiple(address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1731-1742) compares to a boolean constant:
	-require(bool,string)(onlyERC20MintingMode == false,Only minting with ERC-20 tokens is enabled.) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1732)
RamppERC721A.mintToMultipleERC20(address,uint256,address) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751-1773) compares to a boolean constant:
	-require(bool,string)(mintingOpen == true,Minting is not open right now!) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1755)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

2 different versions of Solidity are used:
	- Version constraint ^0.8.1 is used by:
		-^0.8.1 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#21)
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#246)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#276)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#304)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#335)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#480)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#511)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#540)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#610)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#676)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#703)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#781)
		-^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1840)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Context._msgData() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#693-695) is never used and should be removed
ERC721A._baseURI() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1093-1095) is never used and should be removed
ERC721A._setOwnersExplicit(uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1324-1345) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

WithdrawableV2.payableAddresses (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1455) is set pre-construction with a non-constant function or state variable:
	- (RAMPPADDRESS,0x7885205b0E1275978F8cEE160A81aDFEaE4517C1)
WithdrawableV2.surchargePayableAddresses (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1456) is set pre-construction with a non-constant function or state variable:
	- (RAMPPADDRESS)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.1 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#21)
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#246)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#276)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#304)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#335)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#480)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#511)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#540)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#610)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#676)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#703)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#781)
	- ^0.8.0 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1840)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#77-82):
	- (success,None) = recipient.call{value: amount}() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#80)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#145-156):
	- (success,returndata) = target.call{value: value}(data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#154)
Low level call in Address.functionStaticCall(address,bytes,string) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#174-183):
	- (success,returndata) = target.staticcall(data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#181)
Low level call in Address.functionDelegateCall(address,bytes,string) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#201-210):
	- (success,returndata) = target.delegatecall(data) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#208)
Low level call in WithdrawableV2._widthdraw(address,uint256) (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1496-1499):
	- (success,None) = _address.call{value: _amount}() (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1497)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Teams.addToTeam(address)._address (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#795) is not in mixedCase
Parameter Teams.removeFromTeam(address)._address (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#806) is not in mixedCase
Parameter Teams.inTeam(address)._address (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#817) is not in mixedCase
Parameter ERC721A.safeTransferFrom(address,address,uint256,bytes)._data (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1173) is not in mixedCase
Variable Ramppable.RAMPPADDRESS (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1425) is not in mixedCase
Struct WithdrawableV2.acceptedERC20 (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1449-1452) is not in CapWords
Parameter WithdrawableV2.withdrawERC20(address,uint256)._tokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1525) is not in mixedCase
Parameter WithdrawableV2.withdrawERC20(address,uint256)._amountToWithdraw (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1525) is not in mixedCase
Parameter WithdrawableV2.setRamppSurcharge(uint256)._newSurcharge (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1559) is not in mixedCase
Parameter WithdrawableV2.isApprovedForERC20Payments(address)._erc20TokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1567) is not in mixedCase
Parameter WithdrawableV2.chargeAmountForERC20(address)._erc20TokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1575) is not in mixedCase
Parameter WithdrawableV2.addOrUpdateERC20ContractAsPayment(address,bool,uint256)._erc20TokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1586) is not in mixedCase
Parameter WithdrawableV2.addOrUpdateERC20ContractAsPayment(address,bool,uint256)._isActive (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1586) is not in mixedCase
Parameter WithdrawableV2.addOrUpdateERC20ContractAsPayment(address,bool,uint256)._chargeAmountInTokens (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1586) is not in mixedCase
Parameter WithdrawableV2.enableERC20ContractAsPayment(address)._erc20TokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1596) is not in mixedCase
Parameter WithdrawableV2.disableERC20ContractAsPayment(address)._erc20TokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1605) is not in mixedCase
Parameter WithdrawableV2.setERC20PayableAddress(address)._newErc20Payable (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1627) is not in mixedCase
Parameter WithdrawableV2.setRamppAddress(address)._newAddress (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1646) is not in mixedCase
Parameter Feeable.setPrice(uint256)._feeInWei (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1659) is not in mixedCase
Parameter Feeable.getPrice(uint256)._count (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1663) is not in mixedCase
Variable Feeable.PRICE (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1657) is not in mixedCase
Parameter RamppERC721A.mintToAdminV2(address,uint256)._to (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1701) is not in mixedCase
Parameter RamppERC721A.mintToAdminV2(address,uint256)._qty (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1701) is not in mixedCase
Parameter RamppERC721A.mintTo(address)._to (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1714) is not in mixedCase
Parameter RamppERC721A.mintToMultiple(address,uint256)._to (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1731) is not in mixedCase
Parameter RamppERC721A.mintToMultiple(address,uint256)._amount (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1731) is not in mixedCase
Parameter RamppERC721A.mintToMultipleERC20(address,uint256,address)._to (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751) is not in mixedCase
Parameter RamppERC721A.mintToMultipleERC20(address,uint256,address)._amount (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751) is not in mixedCase
Parameter RamppERC721A.mintToMultipleERC20(address,uint256,address)._erc20TokenContract (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1751) is not in mixedCase
Parameter RamppERC721A.canMintAmount(address,uint256)._address (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1790) is not in mixedCase
Parameter RamppERC721A.canMintAmount(address,uint256)._amount (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1790) is not in mixedCase
Parameter RamppERC721A.setWalletMax(uint256)._newWalletMax (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1799) is not in mixedCase
Parameter RamppERC721A.setMaxMint(uint256)._newMaxMint (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1810) is not in mixedCase
Variable RamppERC721A.CONTRACT_VERSION (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1685) is not in mixedCase
Variable RamppERC721A._baseTokenURI (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1686) is not in mixedCase
Variable RamppERC721A.MAX_WALLET_MINTS (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1691) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

RamppERC721A.CONTRACT_VERSION (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1685) should be constant 
WithdrawableV2.payableAddressCount (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1460) should be constant 
WithdrawableV2.surchargePayableAddressCount (0x0043a4a809be33afa17c1e3e37e19977622e4700.sol#1461) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x0043a4a809be33afa17c1e3e37e19977622e4700.sol analyzed (19 contracts with 94 detectors), 72 result(s) found

real	0m5.649s
user	0m5.334s
sys	0m0.316s
