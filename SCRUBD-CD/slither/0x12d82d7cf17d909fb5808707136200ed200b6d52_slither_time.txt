'solc --version' running
'solc ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol

Warning: Return value of low-level calls not used.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3279:13:
     |
3279 |             _userActions[indexOfOrder].user.call{value: _transactionFee}("");
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3404:21:
     |
3404 |                     userActionsSnapshot[i].user.call{value: WETHRecieved * (userActionsSnapshot[i].amount * 10**18 / processingInfo.tokensWithdrawn) / 10**18}("");
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3411:9:
     |
3411 |         owner().call{value: address(this).balance}("");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3455:9:
     |
3455 |         msg.sender.call{value: amountToPayToUser}("");
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3068:80:
     |
3068 |     function getInAndOutTokenAndPack(bytes memory v3Path) public view returns (address, address, bytes memory) {
     |                                                                                ^^^^^^^

Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3068:89:
     |
3068 |     function getInAndOutTokenAndPack(bytes memory v3Path) public view returns (address, address, bytes memory) {
     |                                                                                         ^^^^^^^

Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3068:98:
     |
3068 |     function getInAndOutTokenAndPack(bytes memory v3Path) public view returns (address, address, bytes memory) {
     |                                                                                                  ^^^^^^^^^^^^

Warning: Unused local variable.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3475:13:
     |
3475 |             uint256 WETHRecieved =  _swapTokens(inTokenPathToWethV2, inTokenPathToWethV3, feeAmount, 0);
     |             ^^^^^^^^^^^^^^^^^^^^

Warning: Function state mutability can be restricted to pure
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3068:5:
     |
3068 |     function getInAndOutTokenAndPack(bytes memory v3Path) public view returns (address, address, bytes memory) {
     |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> ./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol:3176:1:
     |
3176 | contract Investment is ERC20, ERC20Burnable, Ownable {
     | ^ (Relevant source part starts here and spans across multiple lines).



Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) uses arbitrary from in transferFrom: IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom

FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inv = (3 * denominator) ^ 2 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation

Reentrancy in Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415):
	External calls:
	- IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
	- ERC20Burnable(address(this)).burnFrom(userActionsSnapshot[i].user,userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3336)
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	External calls sending eth:
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	State variables written after the call(s):
	- _totalHolders ++ (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3329)
	Investment._totalHolders (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3213) can be used in cross function reentrancies:
	- Investment._totalHolders (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3213)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459)
	- _totalHolders -- (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3340)
	Investment._totalHolders (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3213) can be used in cross function reentrancies:
	- Investment._totalHolders (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3213)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459)
Reentrancy in Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415):
	External calls:
	- IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
	- ERC20Burnable(address(this)).burnFrom(userActionsSnapshot[i].user,userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3336)
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	- amountRecieved = _swapTokens(swapInfo[i_scope_0].pathFromWETHV2,swapInfo[i_scope_0].pathFromWETHV3,processingInfo.valueDeposited * (value * 10 ** 18 / totalPoolValue) / 10 ** 18,swapInfo[i_scope_0].fromWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3364)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	External calls sending eth:
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	State variables written after the call(s):
	- _mint(userActionsSnapshot[i_scope_1].user,amountToMint * (userActionsSnapshot[i_scope_1].amount * 10 ** 18 / processingInfo.valueDeposited) / 10 ** 18) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3379)
		- _balances[account] += amount (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2808)
	ERC20._balances (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2581) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2825-2840)
	- ERC20._mint(address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2802-2812)
	- ERC20._transfer(address,address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2771-2791)
	- ERC20.balanceOf(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2646-2648)
	- amountRecieved = _swapTokens(swapInfo[i_scope_0].pathFromWETHV2,swapInfo[i_scope_0].pathFromWETHV3,processingInfo.valueDeposited * (value * 10 ** 18 / totalPoolValue) / 10 ** 18,swapInfo[i_scope_0].fromWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3364)
		- _tokensHeld[i] = _tokensHeld[_tokensHeld.length - 1] (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3254)
		- _tokensHeld.pop() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3255)
		- _tokensHeld.push(tokenOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3495)
	Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203) can be used in cross function reentrancies:
	- Investment._removeAddressFromTokensHeld(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247-3258)
	- Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520)
	- Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203)
	- Investment.getAllTokensHeld() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3232-3234)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459)
	- _mint(userActionsSnapshot[i_scope_1].user,amountToMint * (userActionsSnapshot[i_scope_1].amount * 10 ** 18 / processingInfo.valueDeposited) / 10 ** 18) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3379)
		- _totalSupply += amount (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2807)
	ERC20._totalSupply (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2585) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2825-2840)
	- ERC20._mint(address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2802-2812)
	- ERC20.totalSupply() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2639-2641)
Reentrancy in Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415):
	External calls:
	- IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
	- ERC20Burnable(address(this)).burnFrom(userActionsSnapshot[i].user,userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3336)
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	- amountRecieved = _swapTokens(swapInfo[i_scope_0].pathFromWETHV2,swapInfo[i_scope_0].pathFromWETHV3,processingInfo.valueDeposited * (value * 10 ** 18 / totalPoolValue) / 10 ** 18,swapInfo[i_scope_0].fromWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3364)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	- WETHRecieved += _swapTokens(swapInfo[i_scope_2].pathToWETHV2,swapInfo[i_scope_2].pathToWETHV3,IERC20(tokensHeldSnapshot[i_scope_2]).balanceOf(address(this)) * (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) / 10 ** 18,swapInfo[i_scope_2].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3391)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	External calls sending eth:
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	State variables written after the call(s):
	- WETHRecieved += _swapTokens(swapInfo[i_scope_2].pathToWETHV2,swapInfo[i_scope_2].pathToWETHV3,IERC20(tokensHeldSnapshot[i_scope_2]).balanceOf(address(this)) * (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) / 10 ** 18,swapInfo[i_scope_2].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3391)
		- _tokensHeld[i] = _tokensHeld[_tokensHeld.length - 1] (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3254)
		- _tokensHeld.pop() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3255)
		- _tokensHeld.push(tokenOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3495)
	Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203) can be used in cross function reentrancies:
	- Investment._removeAddressFromTokensHeld(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247-3258)
	- Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520)
	- Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203)
	- Investment.getAllTokensHeld() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3232-3234)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459)
Reentrancy in Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287):
	External calls:
	- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	State variables written after the call(s):
	- _userActions[i] = _userActions[i + 1] (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3284)
	Investment._userActions (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3214) can be used in cross function reentrancies:
	- Investment._userActions (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3214)
	- Investment.getUserActionsLength() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3236-3238)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287)
	- Investment.submitOrder(uint256,uint256,bool) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3293-3306)
	- _userActions.pop() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3286)
	Investment._userActions (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3214) can be used in cross function reentrancies:
	- Investment._userActions (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3214)
	- Investment.getUserActionsLength() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3236-3238)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287)
	- Investment.submitOrder(uint256,uint256,bool) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3293-3306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Investment.submitOrder(uint256,uint256,bool) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3293-3306) ignores return value by IERC20(WETHAddress).transfer(msg.sender,msg.value - _transactionFee) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3299)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) ignores return value by IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) ignores return value by IERC20(WETHAddress).transfer(owner(),poolOwnerFeeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3451)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#933)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#932)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#931)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#930)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#929)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#928)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#927)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#926)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#925)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#924)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#923)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#922)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#921)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#920)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#919)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#918)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#917)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#916)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#915)
	- ratio = type()(uint256).max / ratio (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#935)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv = (3 * denominator) ^ 2 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1185)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv *= 2 - denominator * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1189)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv *= 2 - denominator * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1190)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv *= 2 - denominator * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1191)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv *= 2 - denominator * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1192)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv *= 2 - denominator * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1193)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- denominator = denominator / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1165)
	- inv *= 2 - denominator * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1194)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1170)
	- result = prod0 * inv (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1202)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) performs a multiplication on the result of a division:
	- price = (reserve0 * 10 ** (18 - IERC20Metadata(outToken).decimals()) * 10 ** 18) / (reserve1 * 10 ** (18 - IERC20Metadata(inToken).decimals())) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3118)
	- amountOut = amountOut * price / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3120)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- WETHRecieved = (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) * IERC20(WETHAddress).balanceOf(address(this)) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3386)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- WETHRecieved = (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) * IERC20(WETHAddress).balanceOf(address(this)) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3386)
	- processingInfo.platformFeeAmount += (WETHRecieved * _factoryFee / 10 ** 18) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3395)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- WETHRecieved = (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) * IERC20(WETHAddress).balanceOf(address(this)) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3386)
	- processingInfo.ownerFeeAmount += WETHRecieved * _poolFee / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3396)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- WETHRecieved = (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) * IERC20(WETHAddress).balanceOf(address(this)) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3386)
	- WETHRecieved = WETHRecieved - (WETHRecieved * _poolFee / 10 ** 18) - (WETHRecieved * _factoryFee / 10 ** 18) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3397)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- WETHRecieved = (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) * IERC20(WETHAddress).balanceOf(address(this)) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3386)
	- userActionsSnapshot[i_scope_3].user.call{value: WETHRecieved * (userActionsSnapshot[i_scope_3].amount * 10 ** 18 / processingInfo.tokensWithdrawn) / 10 ** 18}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3404)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- WETHRecieved += _swapTokens(swapInfo[i_scope_2].pathToWETHV2,swapInfo[i_scope_2].pathToWETHV3,IERC20(tokensHeldSnapshot[i_scope_2]).balanceOf(address(this)) * (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) / 10 ** 18,swapInfo[i_scope_2].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3391)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- _mint(userActionsSnapshot[i_scope_1].user,amountToMint * (userActionsSnapshot[i_scope_1].amount * 10 ** 18 / processingInfo.valueDeposited) / 10 ** 18) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3379)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- amountToMint = (totalSupply() + processingInfo.tokensWithdrawn) * ((IERC20(WETHAddress).balanceOf(address(this)) - totalPoolValue - processingInfo.ownerFeeAmount - processingInfo.platformFeeAmount) * 10 ** 18 / totalPoolValue) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3371)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- amountToMint = (totalSupply() + processingInfo.tokensWithdrawn) * (valueIncreasePercentage / tokensProcessed) / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3369)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) performs a multiplication on the result of a division:
	- amountRecieved = _swapTokens(swapInfo[i_scope_0].pathFromWETHV2,swapInfo[i_scope_0].pathFromWETHV3,processingInfo.valueDeposited * (value * 10 ** 18 / totalPoolValue) / 10 ** 18,swapInfo[i_scope_0].fromWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3364)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) performs a multiplication on the result of a division:
	- userShare = amountToRemove * 10 ** 18 / (totalSupply() + amountToRemove) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3429)
	- wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3430)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) performs a multiplication on the result of a division:
	- wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3430)
	- poolOwnerFeeAmount = wethPayout * _poolFee / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3446)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) performs a multiplication on the result of a division:
	- wethPayout = IERC20(WETHAddress).balanceOf(address(this)) * userShare / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3430)
	- factoryFeeAmount = wethPayout * _factoryFee / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3447)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) performs a multiplication on the result of a division:
	- userShare = amountToRemove * 10 ** 18 / (totalSupply() + amountToRemove) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3429)
	- wethRecieved = _swapTokens(swapInfo[i].pathToWETHV2,swapInfo[i].pathToWETHV3,tokenContract.balanceOf(address(this)) * userShare / 10 ** 18,swapInfo[i].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3436-3441)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) uses a dangerous strict equality:
	- tokenIn != WETHAddress && IERC20(tokenIn).balanceOf(address(this)) - amountIn == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenIn) == true (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3491)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) uses a dangerous strict equality:
	- tokenOut != WETHAddress && IERC20(tokenOut).balanceOf(address(this)) == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenOut) == false (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3494)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) uses a dangerous strict equality:
	- balanceOf(userActionsSnapshot[i].user) == 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3328)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) uses a dangerous strict equality:
	- balanceOf(userActionsSnapshot[i].user) == 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3339)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) uses a dangerous strict equality:
	- balanceOf(msg.sender) == 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3426)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in Investment.swapTokens(address[],bytes,address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3469-3479):
	External calls:
	- processFee(feeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3473)
		- feeHandlerAddress = IFactory(_factoryAddress)._feeHandlerAddress() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3464)
		- IERC20(WETHAddress).approve(feeHandlerAddress,amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3465)
		- IFeeHandler(feeHandlerAddress).collectFees(amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3466)
	- WETHRecieved = _swapTokens(inTokenPathToWethV2,inTokenPathToWethV3,feeAmount,0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3475)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	- _swapTokens(v2Path,v3Path,amountIn - feeAmount,amountOutMinimum) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3478)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	State variables written after the call(s):
	- _swapTokens(v2Path,v3Path,amountIn - feeAmount,amountOutMinimum) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3478)
		- _tokensHeld[i] = _tokensHeld[_tokensHeld.length - 1] (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3254)
		- _tokensHeld.pop() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3255)
		- _tokensHeld.push(tokenOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3495)
	Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203) can be used in cross function reentrancies:
	- Investment._removeAddressFromTokensHeld(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247-3258)
	- Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520)
	- Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203)
	- Investment.getAllTokensHeld() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3232-3234)
	- Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415)
	- Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287) ignores return value by _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) ignores return value by userActionsSnapshot[i_scope_3].user.call{value: WETHRecieved * (userActionsSnapshot[i_scope_3].amount * 10 ** 18 / processingInfo.tokensWithdrawn) / 10 ** 18}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3404)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) ignores return value by owner().call{value: address(this).balance}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3411)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) ignores return value by msg.sender.call{value: amountToPayToUser}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3455)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

Investment._swapTokens(address[],bytes,uint256,uint256).packedBytes (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3484) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

OracleLibrary.getOldestObservationSecondsAgo(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1300-1317) ignores return value by (None,None,observationIndex,observationCardinality,None,None,None) = IUniswapV3Pool(pool).slot0() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1301)
OracleLibrary.getOldestObservationSecondsAgo(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1300-1317) ignores return value by (observationTimestamp,None,None,initialized) = IUniswapV3Pool(pool).observations((observationIndex + 1) % observationCardinality) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1304-1306)
OracleLibrary.getOldestObservationSecondsAgo(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1300-1317) ignores return value by (observationTimestamp,None,None,None) = IUniswapV3Pool(pool).observations(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1311)
OracleLibrary.getBlockStartingTickAndLiquidity(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1322-1358) ignores return value by (None,tick,observationIndex,observationCardinality,None,None,None) = IUniswapV3Pool(pool).slot0() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1323)
OracleLibrary.getBlockStartingTickAndLiquidity(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1322-1358) ignores return value by (observationTimestamp,tickCumulative,secondsPerLiquidityCumulativeX128,None) = IUniswapV3Pool(pool).observations(observationIndex) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1331-1336)
UniswapV2Library.getReserves(address,address,address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2264-2268) ignores return value by (reserve0,reserve1,None) = IUniswapV2Pair(pairFor(factory,tokenA,tokenB)).getReserves() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2266)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) ignores return value by (reserve0,reserve1,None) = pair.getReserves() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3113)
InvestmentLibrary.getQuoteV3(bytes,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3128-3149) ignores return value by (sqrtPriceX96,None,None,None,None,None,None) = pool.slot0() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3135)
Investment.processFee(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3463-3467) ignores return value by IERC20(WETHAddress).approve(feeHandlerAddress,amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3465)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) ignores return value by IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) ignores return value by IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Investment.constructor(string,string,string,uint256,uint256,address).factoryAddress_ (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3219) lacks a zero-check on :
		- _factoryAddress = factoryAddress_ (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3223)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

InvestmentLibrary.getContractTotalBalance(swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3041-3053) has external calls inside a loop: contractValue += getQuoteV2(_tokensHeld[i].pathToWETHV2,(IERC20(_tokensHeld[i].token).balanceOf(address(this)) * 10 ** (18 - IERC20Metadata(_tokensHeld[i].token).decimals()))) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3046)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) has external calls inside a loop: pair = IUniswapV2Pair(v2Factory.getPair(inToken,outToken)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3111)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) has external calls inside a loop: token0 = pair.token0() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3112)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) has external calls inside a loop: (reserve0,reserve1,None) = pair.getReserves() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3113)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) has external calls inside a loop: price = (reserve1 * 10 ** (18 - IERC20Metadata(outToken).decimals()) * 10 ** 18) / (reserve0 * 10 ** (18 - IERC20Metadata(inToken).decimals())) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3116)
InvestmentLibrary.getQuoteV2(address[],uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3105-3126) has external calls inside a loop: price = (reserve0 * 10 ** (18 - IERC20Metadata(outToken).decimals()) * 10 ** 18) / (reserve1 * 10 ** (18 - IERC20Metadata(inToken).decimals())) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3118)
InvestmentLibrary.getContractTotalBalance(swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3041-3053) has external calls inside a loop: contractValue += getQuoteV3(_tokensHeld[i].pathToWETHV3,(IERC20(_tokensHeld[i].token).balanceOf(address(this)) * 10 ** (18 - IERC20Metadata(_tokensHeld[i].token).decimals()))) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3048)
InvestmentLibrary.getQuoteV3(bytes,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3128-3149) has external calls inside a loop: pool = IUniswapV3Pool(v3Factory.getPool(inToken,outToken,fee)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3133)
InvestmentLibrary.getQuoteV3(bytes,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3128-3149) has external calls inside a loop: token0 = pool.token0() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3134)
InvestmentLibrary.getQuoteV3(bytes,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3128-3149) has external calls inside a loop: (sqrtPriceX96,None,None,None,None,None,None) = pool.slot0() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3135)
InvestmentLibrary.getQuoteV3(bytes,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3128-3149) has external calls inside a loop: uintPrice = sqrtPriceX96ToUint(sqrtPriceX96,IERC20Metadata(token0).decimals()) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3136)
InvestmentLibrary.getQuoteV3(bytes,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3128-3149) has external calls inside a loop: uintPrice = uintPrice * 10 ** (18 - IERC20Metadata(pool.token1()).decimals()) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3137)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: tokenIn != WETHAddress && IERC20(tokenIn).balanceOf(address(this)) - amountIn == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenIn) == true (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3491)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: tokenOut != WETHAddress && IERC20(tokenOut).balanceOf(address(this)) == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenOut) == false (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3494)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: balanceOfTokenBeforeSwap = IERC20(v2Path[v2Path.length - 1]).balanceOf(address(this)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3499)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: IERC20(v2Path[v2Path.length - 1]).balanceOf(address(this)) - balanceOfTokenBeforeSwap (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3508)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) has external calls inside a loop: swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: userActionsSnapshot[i].deadline >= block.timestamp && IERC20(WETHAddress).allowance(userActionsSnapshot[i].user,address(this)) >= userActionsSnapshot[i].amount && IERC20(WETHAddress).balanceOf(userActionsSnapshot[i].user) >= userActionsSnapshot[i].amount (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3319-3321)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287) has external calls inside a loop: _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: ERC20Burnable(address(this)).burnFrom(userActionsSnapshot[i].user,userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3336)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: value = InvestmentLibrary.getQuoteV2(swapInfo[i_scope_0].pathToWETHV2,IERC20(_tokensHeld[i_scope_0]).balanceOf(address(this)) * 10 ** (18 - IERC20Metadata(_tokensHeld[i_scope_0]).decimals())) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3360)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: valueIncreasePercentage += amountRecieved * 10 ** 18 / (IERC20(_tokensHeld[i_scope_0]).balanceOf(address(this)) - amountRecieved) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3365)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: value = InvestmentLibrary.getQuoteV3(swapInfo[i_scope_0].pathToWETHV3,IERC20(_tokensHeld[i_scope_0]).balanceOf(address(this)) * 10 ** (18 - IERC20Metadata(_tokensHeld[i_scope_0]).decimals())) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3362)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: WETHRecieved += _swapTokens(swapInfo[i_scope_2].pathToWETHV2,swapInfo[i_scope_2].pathToWETHV3,IERC20(tokensHeldSnapshot[i_scope_2]).balanceOf(address(this)) * (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) / 10 ** 18,swapInfo[i_scope_2].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3391)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has external calls inside a loop: userActionsSnapshot[i_scope_3].user.call{value: WETHRecieved * (userActionsSnapshot[i_scope_3].amount * 10 ** 18 / processingInfo.tokensWithdrawn) / 10 ** 18}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3404)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) has external calls inside a loop: wethRecieved = _swapTokens(swapInfo[i].pathToWETHV2,swapInfo[i].pathToWETHV3,tokenContract.balanceOf(address(this)) * userShare / 10 ** 18,swapInfo[i].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3436-3441)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in Investment.submitOrder(uint256,uint256,bool) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3293-3306):
	External calls:
	- WETHContract.deposit{value: msg.value - _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3298)
	- IERC20(WETHAddress).transfer(msg.sender,msg.value - _transactionFee) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3299)
	External calls sending eth:
	- WETHContract.deposit{value: msg.value - _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3298)
	State variables written after the call(s):
	- _userActions.push(userInteractionInfo(msg.sender,msg.value - _transactionFee,deposit,deadline)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3305)
	- _userActions.push(userInteractionInfo(msg.sender,amount,deposit,deadline)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3305)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415):
	External calls:
	- IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
	- ERC20Burnable(address(this)).burnFrom(userActionsSnapshot[i].user,userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3336)
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	- amountRecieved = _swapTokens(swapInfo[i_scope_0].pathFromWETHV2,swapInfo[i_scope_0].pathFromWETHV3,processingInfo.valueDeposited * (value * 10 ** 18 / totalPoolValue) / 10 ** 18,swapInfo[i_scope_0].fromWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3364)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	External calls sending eth:
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2809)
		- _mint(userActionsSnapshot[i_scope_1].user,amountToMint * (userActionsSnapshot[i_scope_1].amount * 10 ** 18 / processingInfo.valueDeposited) / 10 ** 18) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3379)
Reentrancy in Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415):
	External calls:
	- IERC20(WETHAddress).transferFrom(userActionsSnapshot[i].user,address(this),userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3323)
	- ERC20Burnable(address(this)).burnFrom(userActionsSnapshot[i].user,userActionsSnapshot[i].amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3336)
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	- amountRecieved = _swapTokens(swapInfo[i_scope_0].pathFromWETHV2,swapInfo[i_scope_0].pathFromWETHV3,processingInfo.valueDeposited * (value * 10 ** 18 / totalPoolValue) / 10 ** 18,swapInfo[i_scope_0].fromWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3364)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	- WETHRecieved += _swapTokens(swapInfo[i_scope_2].pathToWETHV2,swapInfo[i_scope_2].pathToWETHV3,IERC20(tokensHeldSnapshot[i_scope_2]).balanceOf(address(this)) * (processingInfo.tokensWithdrawn * 10 ** 18 / (totalSupply() + processingInfo.tokensWithdrawn)) / 10 ** 18,swapInfo[i_scope_2].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3391)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	- IWETH(WETHAddress).withdraw(WETHRecieved) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3400)
	- userActionsSnapshot[i_scope_3].user.call{value: WETHRecieved * (userActionsSnapshot[i_scope_3].amount * 10 ** 18 / processingInfo.tokensWithdrawn) / 10 ** 18}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3404)
	- WETHContract.withdraw(processingInfo.ownerFeeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3410)
	- owner().call{value: address(this).balance}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3411)
	- processFee(processingInfo.platformFeeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3412)
		- feeHandlerAddress = IFactory(_factoryAddress)._feeHandlerAddress() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3464)
		- IERC20(WETHAddress).approve(feeHandlerAddress,amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3465)
		- IFeeHandler(feeHandlerAddress).collectFees(amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3466)
	External calls sending eth:
	- removeOrder(0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3347)
		- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
	- userActionsSnapshot[i_scope_3].user.call{value: WETHRecieved * (userActionsSnapshot[i_scope_3].amount * 10 ** 18 / processingInfo.tokensWithdrawn) / 10 ** 18}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3404)
	- owner().call{value: address(this).balance}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3411)
	Event emitted after the call(s):
	- transactionsProcessed(processingInfo) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3414)
Reentrancy in Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459):
	External calls:
	- wethRecieved = _swapTokens(swapInfo[i].pathToWETHV2,swapInfo[i].pathToWETHV3,tokenContract.balanceOf(address(this)) * userShare / 10 ** 18,swapInfo[i].toWETHMinimumAmountOut) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3436-3441)
		- IERC20(v2Path[0]).approve(address(uniswapV2Router),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3500)
		- uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,amountOutMinimum,v2Path,address(this),block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3501-3507)
		- IERC20(tokenIn).approve(address(swapRouter),amountIn) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3510)
		- swapRouter.exactInput(params) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3518)
	- IERC20(WETHAddress).transfer(owner(),poolOwnerFeeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3451)
	- processFee(factoryFeeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3452)
		- feeHandlerAddress = IFactory(_factoryAddress)._feeHandlerAddress() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3464)
		- IERC20(WETHAddress).approve(feeHandlerAddress,amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3465)
		- IFeeHandler(feeHandlerAddress).collectFees(amount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3466)
	- WETHContract.withdraw(amountToPayToUser) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3454)
	- msg.sender.call{value: amountToPayToUser}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3455)
	External calls sending eth:
	- msg.sender.call{value: amountToPayToUser}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3455)
	Event emitted after the call(s):
	- feePaidToOwner(msg.sender,owner(),poolOwnerFeeAmount) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3457)
	- poolRemovedFrom(msg.sender,amountToRemove,amountToPayToUser) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3458)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

OracleLibrary.getBlockStartingTickAndLiquidity(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1322-1358) uses timestamp for comparisons
	Dangerous comparisons:
	- observationTimestamp != uint32(block.timestamp) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1337)
Investment.submitOrder(uint256,uint256,bool) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3293-3306) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(amount <= balanceOf(msg.sender)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3301)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) uses timestamp for comparisons
	Dangerous comparisons:
	- userActionsSnapshot[i].deadline >= block.timestamp && IERC20(WETHAddress).allowance(userActionsSnapshot[i].user,address(this)) >= userActionsSnapshot[i].amount && IERC20(WETHAddress).balanceOf(userActionsSnapshot[i].user) >= userActionsSnapshot[i].amount (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3319-3321)
	- balanceOf(userActionsSnapshot[i].user) == 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3328)
	- userActionsSnapshot[i].deadline >= block.timestamp && allowance(userActionsSnapshot[i].user,address(this)) >= userActionsSnapshot[i].amount && balanceOf(userActionsSnapshot[i].user) >= userActionsSnapshot[i].amount (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3335)
	- balanceOf(userActionsSnapshot[i].user) == 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3339)
	- _tokensHeld.length > 0 && totalSupply() > 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3354)
	- totalPoolValue > 0 && totalSupply() > 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3370)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(balanceOf(msg.sender) > 0) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3419)
	- require(bool)(amountToRemove <= balanceOf(msg.sender)) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3421)
	- balanceOf(msg.sender) == 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3426)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) uses timestamp for comparisons
	Dangerous comparisons:
	- tokenIn != WETHAddress && IERC20(tokenIn).balanceOf(address(this)) - amountIn == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenIn) == true (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3491)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

TickMath.getTickAtSqrtRatio(uint160) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#949-1094) uses assembly
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#958-962)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#963-967)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#968-972)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#973-977)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#978-982)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#983-987)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#988-992)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#993-996)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1003-1008)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1009-1014)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1015-1020)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1021-1026)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1027-1032)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1033-1038)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1039-1044)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1045-1050)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1051-1056)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1057-1062)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1063-1068)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1069-1074)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1075-1080)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1081-1085)
FullMath.mulDiv(uint256,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1111-1205) uses assembly
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1124-1128)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1133-1135)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1150-1152)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1154-1157)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1164-1166)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1169-1171)
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1175-1177)
Address.verifyCallResult(bool,bytes,string) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1983-2003) uses assembly
	- INLINE ASM (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1995-1998)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Investment._removeAddressFromTokensHeld(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247-3258) compares to a boolean constant:
	-InvestmentLibrary.isTokenHeld(_tokensHeld,_address) == false (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3249)
Investment.crashProtect(crashProtectParams[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3260-3273) compares to a boolean constant:
	-require(bool)(outTokenIsStableCoin == true) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3270)
Investment.submitOrder(uint256,uint256,bool) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3293-3306) compares to a boolean constant:
	-require(bool)(acceptingNewDeposits == true) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3296)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) compares to a boolean constant:
	-userActionsSnapshot[i_scope_1].deposit == true && userActionsSnapshot[i_scope_1].amount != 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3378)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) compares to a boolean constant:
	-userActionsSnapshot[i_scope_3].deposit == false && userActionsSnapshot[i_scope_3].amount != 0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3403)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) compares to a boolean constant:
	-userActionsSnapshot[i].deposit == true (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3318)
Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459) compares to a boolean constant:
	-(swapInfo[i].toWETHMinimumAmountOut == 0 && swapInfo[i].fromWETHMinimumAmountOut == 0) == false (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3434)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) compares to a boolean constant:
	-tokenIn != WETHAddress && IERC20(tokenIn).balanceOf(address(this)) - amountIn == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenIn) == true (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3491)
Investment._swapTokens(address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3481-3520) compares to a boolean constant:
	-tokenOut != WETHAddress && IERC20(tokenOut).balanceOf(address(this)) == 0 && InvestmentLibrary.isTokenHeld(_tokensHeld,tokenOut) == false (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3494)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

7 different versions of Solidity are used:
	- Version constraint >=0.5.0 is used by:
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#4)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#84)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#349)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#401)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#525)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#551)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#657)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#700)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#819)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#857)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1416)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1728)
		->=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2238)
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#105)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#140)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#161)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#170)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#883)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1099)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1653)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2011)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2323)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2350)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2435)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2520)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2550)
		-^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2935)
	- Version constraint >=0.5.0<0.9.0 is used by:
		->=0.5.0<0.9.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1229)
	- Version constraint >=0.7.5 is used by:
		->=0.7.5 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1440)
	- Version constraint >=0.6.2 is used by:
		->=0.6.2 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1506)
		->=0.6.2 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1604)
	- Version constraint ^0.8.1 is used by:
		-^0.8.1 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1786)
	- Version constraint 0.8.4 is used by:
		-0.8.4 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2974)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Investment._removeAddressFromTokensHeld(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247-3258) has costly operations inside a loop:
	- _tokensHeld.pop() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3255)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has costly operations inside a loop:
	- _totalHolders ++ (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3329)
Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287) has costly operations inside a loop:
	- _userActions.pop() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3286)
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has costly operations inside a loop:
	- _totalHolders -- (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3340)
ERC20._mint(address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2802-2812) has costly operations inside a loop:
	- _totalSupply += amount (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2807)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) has a high cyclomatic complexity (25).
Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415) has a high cyclomatic complexity (19).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Context._msgData() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2340-2342) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor
	- IncorrectEventSignatureInLibraries
	- ABIEncoderV2PackedStorage.
It is used by:
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#4)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#84)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#349)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#401)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#525)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#551)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#657)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#700)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#819)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#857)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1416)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1728)
	- >=0.5.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2238)
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#105)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#140)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#161)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#170)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#883)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1099)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1653)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2011)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2323)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2350)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2435)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2520)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2550)
	- ^0.8.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2935)
Version constraint >=0.5.0<0.9.0 is too complex.
It is used by:
	- >=0.5.0<0.9.0 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1229)
Version constraint >=0.7.5 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- >=0.7.5 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1440)
Version constraint >=0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- >=0.6.2 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1506)
	- >=0.6.2 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1604)
Version constraint ^0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.1 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1786)
Version constraint 0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- 0.8.4 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#2974)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1842-1847):
	- (success,None) = recipient.call{value: amount}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1845)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1910-1921):
	- (success,returndata) = target.call{value: value}(data) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1919)
Low level call in Address.functionStaticCall(address,bytes,string) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1939-1948):
	- (success,returndata) = target.staticcall(data) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1946)
Low level call in Address.functionDelegateCall(address,bytes,string) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1966-1975):
	- (success,returndata) = target.delegatecall(data) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1973)
Low level call in Investment.removeOrder(uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3275-3287):
	- _userActions[indexOfOrder].user.call{value: _transactionFee}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3279)
Low level call in Investment.processUserTransactions(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3308-3415):
	- userActionsSnapshot[i_scope_3].user.call{value: WETHRecieved * (userActionsSnapshot[i_scope_3].amount * 10 ** 18 / processingInfo.tokensWithdrawn) / 10 ** 18}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3404)
	- owner().call{value: address(this).balance}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3411)
Low level call in Investment.removeFromPoolInstantly(uint256,swapInfoEntry[]) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3418-3459):
	- msg.sender.call{value: amountToPayToUser}() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3455)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Router01.WETH() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1510) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1745) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1746) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#1763) is not in mixedCase
Function IFactory._feeHandlerAddress() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3002) is not in mixedCase
Parameter InvestmentLibrary.getContractTotalBalance(swapInfoEntry[])._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3041) is not in mixedCase
Parameter InvestmentLibrary.isTokenHeld(address[],address)._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3055) is not in mixedCase
Parameter InvestmentLibrary.isTokenHeld(address[],address)._address (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3055) is not in mixedCase
Parameter InvestmentLibrary.reverseArray(userInteractionInfo[])._array (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3094) is not in mixedCase
Constant InvestmentLibrary.WETHAddress (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3039) is not in UPPER_CASE_WITH_UNDERSCORES
Event Investment.poolRemovedFrom(address,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3178-3182) is not in CapWords
Event Investment.tokensSwapped(address,address,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3184-3189) is not in CapWords
Event Investment.feePaidToOwner(address,address,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3191-3195) is not in CapWords
Event Investment.transactionsProcessed(processInfoStruct) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3197-3199) is not in CapWords
Function Investment._removeAddressFromTokensHeld(address) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247-3258) is not in mixedCase
Parameter Investment._removeAddressFromTokensHeld(address)._address (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3247) is not in mixedCase
Variable Investment._tokensHeld (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3203) is not in mixedCase
Variable Investment._riskLevel (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3204) is not in mixedCase
Variable Investment._poolFee (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3205) is not in mixedCase
Variable Investment._factoryFee (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3206) is not in mixedCase
Variable Investment._factoryAddress (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3207) is not in mixedCase
Variable Investment._transactionFee (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3208) is not in mixedCase
Constant Investment.WETHAddress (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3212) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Investment._totalHolders (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3213) is not in mixedCase
Variable Investment._userActions (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3214) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

TickMath.getSqrtRatioAtTick(int24) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#907-942) uses literals with too many digits:
	- ratio = 0x100000000000000000000000000000000 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#912-914)
Investment.swapTokens(address[],bytes,address[],bytes,uint256,uint256) (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3469-3479) uses literals with too many digits:
	- feeAmount = amountIn * 7500000000000000 / 10 ** 18 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3470)
Investment.slitherConstructorVariables() (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3176-3523) uses literals with too many digits:
	- _factoryFee = 20000000000000000 (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3206)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition idx < _stableCoins.length (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3264) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < _tokensHeld.length (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3355) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

Investment._factoryFee (0x12d82d7cf17d909fb5808707136200ed200b6d52.sol#3206) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x12d82d7cf17d909fb5808707136200ed200b6d52.sol analyzed (37 contracts with 94 detectors), 179 result(s) found

real	0m17.128s
user	0m16.862s
sys	0m0.265s
