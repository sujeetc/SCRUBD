'solc --version' running
'solc ./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1142:13: Warning: Return value of low-level calls not used.
            recipient.call(abi.encodeWithSignature("tokenFallback(address,uint256,bytes)", sender, amount, data));
            ^---------------------------------------------------------------------------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1182:1: Warning: Base constructor arguments given twice.
contract ExternStateToken is SelfDestructible, Proxyable, TokenFallbackCaller {
^ (Relevant source part starts here and spans across multiple lines).
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:184:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:837:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1381:1: Warning: Base constructor arguments given twice.
contract Synth is ExternStateToken {
^ (Relevant source part starts here and spans across multiple lines).
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:184:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:837:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1737:1: Warning: Base constructor arguments given twice.
contract FeePool is Proxyable, SelfDestructible {
^ (Relevant source part starts here and spans across multiple lines).
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:837:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:184:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1748:50: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant public MAX_TRANSFER_FEE_RATE = SafeDecimalMath.unit() / 10;
                                                 ^-------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1754:50: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant public MAX_EXCHANGE_FEE_RATE = SafeDecimalMath.unit() / 10;
                                                 ^-------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1796:36: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant TWENTY_PERCENT = (20 * SafeDecimalMath.unit()) / 100;
                                   ^---------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1797:41: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant TWENTY_FIVE_PERCENT = (25 * SafeDecimalMath.unit()) / 100;
                                        ^---------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1798:36: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant THIRTY_PERCENT = (30 * SafeDecimalMath.unit()) / 100;
                                   ^---------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1799:36: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant FOURTY_PERCENT = (40 * SafeDecimalMath.unit()) / 100;
                                   ^---------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1800:35: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant FIFTY_PERCENT = (50 * SafeDecimalMath.unit()) / 100;
                                  ^---------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:1801:42: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant SEVENTY_FIVE_PERCENT = (75 * SafeDecimalMath.unit()) / 100;
                                         ^---------------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:2784:40: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant MAX_ISSUANCE_RATIO = SafeDecimalMath.unit();
                                       ^--------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:3472:1: Warning: Base constructor arguments given twice.
contract Synthetix is ExternStateToken {
^ (Relevant source part starts here and spans across multiple lines).
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:184:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:837:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:3485:38: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint constant SYNTHETIX_SUPPLY = 1e8 * SafeDecimalMath.unit();
                                     ^--------------------------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:4323:1: Warning: Base constructor arguments given twice.
contract Depot is SelfDestructible, Pausable {
^ (Relevant source part starts here and spans across multiple lines).
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:184:9: First constructor call is here: 
        Owned(_owner)
        ^-----------^
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:294:9: Second constructor call is here: 
        Owned(_owner)
        ^-----------^

./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol:4852:55: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function tokenFallback(address from, uint amount, bytes data)
                                                      ^--------^


SynthetixEscrow (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2423-2705) contract sets array length with a user-controlled value:
	- vestingSchedules[account].push((time,quantity)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2647)
SynthetixState (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2750-3001) contract sets array length with a user-controlled value:
	- debtLedger.push(SafeDecimalMath.preciseUnit()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2960)
SynthetixState (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2750-3001) contract sets array length with a user-controlled value:
	- debtLedger.push(debtLedger[debtLedger.length - 1].multiplyDecimalRoundPrecise(delta)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2956-2958)
Synthetix (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3472-4284) contract sets array length with a user-controlled value:
	- availableSynths.push(synth) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3523)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- synth.transfer(msg.sender,remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4606)
	- synth.transfer(msg.sender,deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4642)
	External calls sending eth:
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	State variables written after the call(s):
	- depositStartIndex = depositStartIndex.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4570)
	Depot.depositStartIndex (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4374) can be used in cross function reentrancies:
	- Depot.depositStartIndex (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4374)
	- Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666)
	- Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829)
	- depositStartIndex = depositStartIndex.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4616)
	Depot.depositStartIndex (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4374) can be used in cross function reentrancies:
	- Depot.depositStartIndex (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4374)
	- Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666)
	- Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829)
	- deposits[i] = synthDeposit({user:deposit.user,amount:newAmount}) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4580)
	Depot.deposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4372) can be used in cross function reentrancies:
	- Depot.deposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4372)
	- Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666)
	- Depot.tokenFallback(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4852-4876)
	- Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829)
	- delete deposits[i] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4614)
	Depot.deposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4372) can be used in cross function reentrancies:
	- Depot.deposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4372)
	- Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666)
	- Depot.tokenFallback(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4852-4876)
	- Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829)
	- totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4582)
	Depot.totalSellableDeposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4381) can be used in cross function reentrancies:
	- Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666)
	- Depot.tokenFallback(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4852-4876)
	- Depot.totalSellableDeposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4381)
	- Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829)
	- totalSellableDeposits = totalSellableDeposits.sub(deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4618)
	Depot.totalSellableDeposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4381) can be used in cross function reentrancies:
	- Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666)
	- Depot.tokenFallback(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4852-4876)
	- Depot.totalSellableDeposits (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4381)
	- Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

SynthetixEscrow.withdrawSynthetix(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2587-2593) ignores return value by synthetix.transfer(synthetix,quantity) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2592)
SynthetixEscrow.vest() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2671-2697) ignores return value by synthetix.transfer(msg.sender,total) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2694)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) ignores return value by synth.transfer(msg.sender,remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4606)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) ignores return value by synth.transfer(msg.sender,deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4642)
Depot.exchangeEtherForSynthetix() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4689-4708) ignores return value by synthetix.transfer(msg.sender,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4703)
Depot.exchangeSynthsForSynthetix(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4734-4754) ignores return value by synth.transferFrom(msg.sender,fundsWallet,synthAmount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4746)
Depot.exchangeSynthsForSynthetix(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4734-4754) ignores return value by synthetix.transfer(msg.sender,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4749)
Depot.withdrawSynthetix(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4777-4787) ignores return value by synthetix.transfer(owner,amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4781)
Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829) ignores return value by synth.transfer(msg.sender,synthsToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4826)
Depot.depositSynths(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4837-4845) ignores return value by synth.transferFrom(msg.sender,this,amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4841)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Synthetix._removeFromDebtRegister(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4042-4078) uses a dangerous strict equality:
	- debtToRemove == existingDebt (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4061)
Synthetix.collateralisationRatio(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4107-4117) uses a dangerous strict equality:
	- totalOwnedSynthetix == 0 (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4113)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Contract locking ether found:
	Contract Proxy (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#696-795) has payable functions:
	 - Proxy.fallback() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#753-787)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in FeePool.claimFees(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1966-1986):
	External calls:
	- availableFees = feesAvailable(messageSender,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1971)
		- ratio = synthetix.collateralisationRatio(account) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2202)
		- (initialDebtOwnership,debtEntryIndex) = synthetix.synthetixState().issuanceData(account) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2234)
		- totalSynths = synthetix.totalIssuedSynths(XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2240)
		- synthetix.effectiveValue(XDR,totalFees,currencyKey) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2190)
		- debtBalance = synthetix.debtBalanceOf(account,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2243)
	State variables written after the call(s):
	- lastFeeWithdrawal[messageSender] = recentFeePeriods[1].feePeriodId (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1975)
	FeePool.lastFeeWithdrawal (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1792) can be used in cross function reentrancies:
	- FeePool.claimFees(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1966-1986)
	- FeePool.feesByPeriod(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2224-2270)
	- FeePool.lastFeeWithdrawal (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1792)
	- _recordFeePayment(availableFees) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1978)
		- recentFeePeriods[i].feesClaimed = recentFeePeriods[i].feesClaimed.add(amountInPeriod) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2008)
	FeePool.recentFeePeriods (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1776) can be used in cross function reentrancies:
	- FeePool._recordFeePayment(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1992-2019)
	- FeePool.claimFees(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1966-1986)
	- FeePool.closeCurrentFeePeriod() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1916-1960)
	- FeePool.constructor(address,address,Synthetix,address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1803-1826)
	- FeePool.feePaid(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1903-1911)
	- FeePool.feesByPeriod(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2224-2270)
	- FeePool.recentFeePeriods (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1776)
	- FeePool.totalFeesAvailable(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2154-2168)
Reentrancy in FeePool.closeCurrentFeePeriod() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1916-1960):
	External calls:
	- recentFeePeriods[0].startingDebtIndex = synthetix.synthetixState().debtLedgerLength() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1954)
	State variables written after the call(s):
	- nextFeePeriodId = nextFeePeriodId.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1957)
	FeePool.nextFeePeriodId (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1779) can be used in cross function reentrancies:
	- FeePool.closeCurrentFeePeriod() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1916-1960)
	- FeePool.constructor(address,address,Synthetix,address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1803-1826)
	- FeePool.nextFeePeriodId (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1779)
	- recentFeePeriods[0].startTime = now (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1955)
	FeePool.recentFeePeriods (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1776) can be used in cross function reentrancies:
	- FeePool._recordFeePayment(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1992-2019)
	- FeePool.claimFees(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1966-1986)
	- FeePool.closeCurrentFeePeriod() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1916-1960)
	- FeePool.constructor(address,address,Synthetix,address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1803-1826)
	- FeePool.feePaid(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1903-1911)
	- FeePool.feesByPeriod(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2224-2270)
	- FeePool.recentFeePeriods (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1776)
	- FeePool.totalFeesAvailable(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2154-2168)
Reentrancy in Synthetix.issueMaxSynths(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3999-4008):
	External calls:
	- maxIssuable = remainingIssuableSynths(messageSender,currencyKey) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4004)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4230)
		- balance = tokenState.balanceOf(account) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4187)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3657)
		- destinationValue.multiplyDecimal(synthetixState.issuanceRatio()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4096)
		- balance = balance.add(escrow.balanceOf(account)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4190)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4134)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3642-3643)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3663)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4141-4143)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3669-3671)
	- issueSynths(currencyKey,maxIssuable) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4007)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4230)
		- balance = tokenState.balanceOf(account) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4187)
		- destinationValue.multiplyDecimal(synthetixState.issuanceRatio()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4096)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3657)
		- synths[currencyKey].issue(messageSender,amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3991)
		- balance = balance.add(escrow.balanceOf(account)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4190)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4134)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3642-3643)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3663)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4141-4143)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3669-3671)
		- ! synthetixState.hasIssued(messageSender) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3955)
		- synthetixState.incrementTotalIssuerCount() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3956)
		- synthetixState.setCurrentIssuanceData(messageSender,debtPercentage) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3960)
		- synthetixState.debtLedgerLength() > 0 (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3964)
		- synthetixState.appendDebtLedgerValue(synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3965-3967)
		- synthetixState.appendDebtLedgerValue(SafeDecimalMath.preciseUnit()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3969)
	State variables written after the call(s):
	- issueSynths(currencyKey,maxIssuable) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4007)
		- messageSender = msg.sender (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#867)
	Proxyable.messageSender (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#834) can be used in cross function reentrancies:
	- Synthetix._addToDebtRegister(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3924-3971)
	- Synthetix._removeFromDebtRegister(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4042-4078)
	- ExternStateToken.approve(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1314-1324)
	- Synthetix.burnSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4015-4035)
	- Synthetix.exchange(bytes4,uint256,bytes4,address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3762-3780)
	- Synthetix.issueMaxSynths(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3999-4008)
	- Synthetix.issueSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3979-3992)
	- Proxyable.optionalProxy() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#864-870)
	- Proxyable.optionalProxy_onlyOwner() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#872-879)
	- Proxyable.setMessageSender(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#852-857)
	- Synthetix.setPreferredCurrency(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3612-3621)
	- Synthetix.transfer(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3708-3720)
	- Synthetix.transferFrom(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3739-3752)
Reentrancy in Synthetix.issueSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3979-3992):
	External calls:
	- require(bool,string)(amount <= remainingIssuableSynths(messageSender,currencyKey),Amount too large) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3985)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4230)
		- balance = tokenState.balanceOf(account) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4187)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3657)
		- destinationValue.multiplyDecimal(synthetixState.issuanceRatio()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4096)
		- balance = balance.add(escrow.balanceOf(account)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4190)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4134)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3642-3643)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3663)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4141-4143)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3669-3671)
	- _addToDebtRegister(currencyKey,amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3988)
		- require(bool,string)(! exchangeRates.rateIsStale(currencyKey),Rate stale or nonexistant currency) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4230)
		- currencyRate = exchangeRates.rateForCurrency(currencyKey) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3657)
		- (initialDebtOwnership,debtEntryIndex) = synthetixState.issuanceData(issuer) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4134)
		- sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey)).divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3642-3643)
		- require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3663)
		- currentDebtOwnership = synthetixState.lastDebtLedgerEntry().divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex)).multiplyDecimalRoundPrecise(initialDebtOwnership) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4141-4143)
		- synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3669-3671)
		- ! synthetixState.hasIssued(messageSender) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3955)
		- synthetixState.incrementTotalIssuerCount() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3956)
		- synthetixState.setCurrentIssuanceData(messageSender,debtPercentage) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3960)
		- synthetixState.debtLedgerLength() > 0 (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3964)
		- synthetixState.appendDebtLedgerValue(synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3965-3967)
		- synthetixState.appendDebtLedgerValue(SafeDecimalMath.preciseUnit()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3969)
	State variables written after the call(s):
	- _addToDebtRegister(currencyKey,amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3988)
		- messageSender = msg.sender (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#867)
	Proxyable.messageSender (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#834) can be used in cross function reentrancies:
	- Synthetix._addToDebtRegister(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3924-3971)
	- Synthetix._removeFromDebtRegister(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4042-4078)
	- ExternStateToken.approve(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1314-1324)
	- Synthetix.burnSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4015-4035)
	- Synthetix.exchange(bytes4,uint256,bytes4,address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3762-3780)
	- Synthetix.issueMaxSynths(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3999-4008)
	- Synthetix.issueSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3979-3992)
	- Proxyable.optionalProxy() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#864-870)
	- Proxyable.optionalProxy_onlyOwner() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#872-879)
	- Proxyable.setMessageSender(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#852-857)
	- Synthetix.setPreferredCurrency(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3612-3621)
	- Synthetix.transfer(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3708-3720)
	- Synthetix.transferFrom(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3739-3752)
Reentrancy in Synthetix.removeSynth(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3533-3565):
	External calls:
	- require(bool,string)(synths[currencyKey].totalSupply() == 0,Synth supply exists) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3538)
	State variables written after the call(s):
	- delete synths[currencyKey] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3562)
	Synthetix.synths (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3478) can be used in cross function reentrancies:
	- Synthetix._internalExchange(address,bytes4,uint256,bytes4,address,bool) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3863-3916)
	- Synthetix.addSynth(Synth) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3515-3527)
	- Synthetix.burnSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4015-4035)
	- Synthetix.issueSynths(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3979-3992)
	- Synthetix.removeSynth(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3533-3565)
	- Synthetix.synths (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3478)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

ExternStateToken (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1182-1345) gives base constructor Owned.constructor(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#101-107) arguments more than once in inheritance hierarchy:
	- From Proxyable (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#827-882) constructor definition
	- From SelfDestructible (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#172-253) constructor definition
Synth (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1381-1694) gives base constructor Owned.constructor(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#101-107) arguments more than once in inheritance hierarchy:
	- From Proxyable (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#827-882) constructor definition
	- From SelfDestructible (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#172-253) constructor definition
FeePool (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1737-2330) gives base constructor Owned.constructor(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#101-107) arguments more than once in inheritance hierarchy:
	- From SelfDestructible (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#172-253) constructor definition
	- From Proxyable (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#827-882) constructor definition
Synthetix (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3472-4284) gives base constructor Owned.constructor(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#101-107) arguments more than once in inheritance hierarchy:
	- From Proxyable (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#827-882) constructor definition
	- From SelfDestructible (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#172-253) constructor definition
Depot (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4323-4979) gives base constructor Owned.constructor(address) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#101-107) arguments more than once in inheritance hierarchy:
	- From Pausable (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#284-331) constructor definition
	- From SelfDestructible (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#172-253) constructor definition
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reused-base-constructors

TokenFallbackCaller.callTokenFallbackIfNeeded(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1114-1146) ignores return value by recipient.call(abi.encodeWithSignature(tokenFallback(address,uint256,bytes),sender,amount,data)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1142)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

Synth.transferSenderPaysFee(address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1536) is a local variable never initialized
Synth.transferFromSenderPaysFee(address,address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1574) is a local variable never initialized
Synth.transfer(address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1449) is a local variable never initialized
Synth.transferFrom(address,address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1494) is a local variable never initialized
SynthetixEscrow.vest().total (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2675) is a local variable never initialized
Synthetix.transferFrom(address,address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3729) is a local variable never initialized
Synth.triggerTokenFallbackIfNeeded(address,address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1650) is a local variable never initialized
FeePool.feesByPeriod(address).result (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2229) is a local variable never initialized
Synthetix.transfer(address,uint256).empty (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3698) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Synth.transfer(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1436-1451) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1446)
Synth.transfer(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1457-1471) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1467)
Synth.transferFrom(address,address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1477-1496) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1492)
Synth.transferFrom(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1502-1520) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1517)
Synth.transferSenderPaysFee(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1524-1538) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1533)
Synth.transferSenderPaysFee(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1542-1555) ignores return value by synthetix.synthInitiatedFeePayment(messageSender,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1551)
Synth.transferFromSenderPaysFee(address,address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1559-1576) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1572)
Synth.transferFromSenderPaysFee(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1580-1596) ignores return value by synthetix.synthInitiatedFeePayment(from,currencyKey,fee) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1593)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

ExternStateToken.allowance(address,address).owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1229) shadows:
	- Owned.owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#95) (state variable)
ExternStateToken.emitApproval(address,address,uint256).owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1336) shadows:
	- Owned.owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#95) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Owned.nominateNewOwner(address)._owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#113) lacks a zero-check on :
		- nominatedOwner = _owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#117)
State.setAssociatedContract(address)._associatedContract (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#937) lacks a zero-check on :
		- associatedContract = _associatedContract (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#941)
Proxyable.setMessageSender(address).sender (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#852) lacks a zero-check on :
		- messageSender = sender (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#856)
FeePool.constructor(address,address,Synthetix,address,uint256,uint256)._feeAuthority (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1803) lacks a zero-check on :
		- feeAuthority = _feeAuthority (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1813)
FeePool.setFeeAuthority(address)._feeAuthority (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1862) lacks a zero-check on :
		- feeAuthority = _feeAuthority (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1866)
ExchangeRates.constructor(address,address,bytes4[],uint256[])._oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3075) lacks a zero-check on :
		- oracle = _oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3085)
ExchangeRates.setOracle(address)._oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3215) lacks a zero-check on :
		- oracle = _oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3219)
Depot.constructor(address,address,Synthetix,Synth,FeePool,address,uint256,uint256)._fundsWallet (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4409) lacks a zero-check on :
		- fundsWallet = _fundsWallet (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4426)
Depot.constructor(address,address,Synthetix,Synth,FeePool,address,uint256,uint256)._oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4417) lacks a zero-check on :
		- oracle = _oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4430)
Depot.setFundsWallet(address)._fundsWallet (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4442) lacks a zero-check on :
		- fundsWallet = _fundsWallet (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4446)
Depot.setOracle(address)._oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4454) lacks a zero-check on :
		- oracle = _oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4458)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2621-2648) has external calls inside a loop: require(bool,string)(totalVestedBalance <= synthetix.balanceOf(this),Must be enough balance in the contract to provide for the vesting entry) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2632)
SynthetixState._addToDebtRegister(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2909-2962) has external calls inside a loop: xdrValue = synthetix.effectiveValue(sUSD,amount,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2917)
SynthetixState._addToDebtRegister(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2909-2962) has external calls inside a loop: existingDebt = synthetix.debtBalanceOf(account,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2937)
Synthetix.totalIssuedSynths(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3650-3676) has external calls inside a loop: require(bool,string)(! exchangeRates.rateIsStale(availableSynths[i].currencyKey()),Rate is stale) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3663)
Synthetix.totalIssuedSynths(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3650-3676) has external calls inside a loop: synthValue = availableSynths[i].totalSupply().multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey())).divideDecimalRound(currencyRate) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3669-3671)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has external calls inside a loop: ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has external calls inside a loop: fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has external calls inside a loop: synth.transfer(msg.sender,remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4606)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has external calls inside a loop: ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has external calls inside a loop: fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has external calls inside a loop: synth.transfer(msg.sender,deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4642)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in SynthetixState._addToDebtRegister(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2909-2962):
	External calls:
	- xdrValue = synthetix.effectiveValue(sUSD,amount,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2917)
	State variables written after the call(s):
	- importedXDRAmount = newTotalDebtIssued (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2926)
Reentrancy in SynthetixState._addToDebtRegister(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2909-2962):
	External calls:
	- xdrValue = synthetix.effectiveValue(sUSD,amount,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2917)
	- existingDebt = synthetix.debtBalanceOf(account,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2937)
	State variables written after the call(s):
	- debtLedger.push(debtLedger[debtLedger.length - 1].multiplyDecimalRoundPrecise(delta)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2956-2958)
	- debtLedger.push(SafeDecimalMath.preciseUnit()) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2960)
	- issuanceData[account].initialDebtOwnership = debtPercentage (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2950)
	- issuanceData[account].debtEntryIndex = debtLedger.length (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2951)
	- totalIssuerCount = totalIssuerCount.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2946)
Reentrancy in Synthetix.addSynth(Synth) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3515-3527):
	External calls:
	- currencyKey = synth.currencyKey() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3519)
	State variables written after the call(s):
	- availableSynths.push(synth) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3523)
	- synths[currencyKey] = synth (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3524)
Reentrancy in SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2621-2648):
	External calls:
	- require(bool,string)(totalVestedBalance <= synthetix.balanceOf(this),Must be enough balance in the contract to provide for the vesting entry) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2632)
	State variables written after the call(s):
	- totalVestedAccountBalance[account] = quantity (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2639)
	- totalVestedAccountBalance[account] = totalVestedAccountBalance[account].add(quantity) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2644)
	- vestingSchedules[account].push((time,quantity)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2647)
Reentrancy in Synth.burn(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1626-1634):
	External calls:
	- tokenState.setBalanceOf(account,tokenState.balanceOf(account).sub(amount)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1630)
	State variables written after the call(s):
	- totalSupply = totalSupply.sub(amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1631)
Reentrancy in FeePool.feePaid(bytes4,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1903-1911):
	External calls:
	- xdrAmount = synthetix.effectiveValue(currencyKey,amount,XDR) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1907)
	State variables written after the call(s):
	- recentFeePeriods[0].feesToDistribute = recentFeePeriods[0].feesToDistribute.add(xdrAmount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1910)
Reentrancy in Synth.issue(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1615-1623):
	External calls:
	- tokenState.setBalanceOf(account,tokenState.balanceOf(account).add(amount)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1619)
	State variables written after the call(s):
	- totalSupply = totalSupply.add(amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1620)
Reentrancy in Synthetix.removeSynth(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3533-3565):
	External calls:
	- require(bool,string)(synths[currencyKey].totalSupply() == 0,Synth supply exists) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3538)
	State variables written after the call(s):
	- delete availableSynths[i] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3547)
	- availableSynths[i] = availableSynths[availableSynths.length - 1] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3552)
	- availableSynths.length -- (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3555)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Depot.exchangeEtherForSynthetix() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4689-4708):
	External calls:
	- synthetixToSend = synthetixReceivedForEther(msg.value) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4697)
		- synthsReceived = feePool.amountReceivedFromTransfer(amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4901)
	- synthetix.transfer(msg.sender,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4703)
	External calls sending eth:
	- fundsWallet.transfer(msg.value) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4700)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,SNX,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4705)
Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- synth.transfer(msg.sender,remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4606)
	- synth.transfer(msg.sender,deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4642)
	External calls sending eth:
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	Event emitted after the call(s):
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,remainingToFulfill,i) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4599)
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,deposit.amount,i) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4635)
	- NonPayableContract(deposit.user,ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4597)
	- NonPayableContract(deposit.user,ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4633)
Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- synth.transfer(msg.sender,remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4606)
	- synth.transfer(msg.sender,deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4642)
	External calls sending eth:
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	- msg.sender.transfer(remainingToFulfill.divideDecimal(usdToEthPrice)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4654)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,sUSD,fulfilled) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4662)
Reentrancy in Depot.exchangeSynthsForSynthetix(uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4734-4754):
	External calls:
	- synthetixToSend = synthetixReceivedForSynths(synthAmount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4741)
		- synthsReceived = feePool.amountReceivedFromTransfer(amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4901)
	- synth.transferFrom(msg.sender,fundsWallet,synthAmount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4746)
	- synthetix.transfer(msg.sender,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4749)
	Event emitted after the call(s):
	- Exchange(sUSD,synthAmount,SNX,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4751)
Reentrancy in SynthetixEscrow.vest() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2671-2697):
	External calls:
	- synthetix.transfer(msg.sender,total) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2694)
	Event emitted after the call(s):
	- Vested(msg.sender,now,total) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2695)
Reentrancy in Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829):
	External calls:
	- synth.transfer(msg.sender,synthsToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4826)
	Event emitted after the call(s):
	- SynthWithdrawal(msg.sender,synthsToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4828)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

SelfDestructible.selfDestruct() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#238-247) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(initiationTime + SELFDESTRUCT_DELAY < now,Self destruct delay has not yet elapsed) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#243)
FeePool.closeCurrentFeePeriod() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1916-1960) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(recentFeePeriods[0].startTime <= (now - feePeriodDuration),It is too early to close the current fee period) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1920)
SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2621-2648) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now < time,Time must be in the future) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2627)
SynthetixEscrow.vest() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2671-2697) uses timestamp for comparisons
	Dangerous comparisons:
	- time > now (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2679)
ExchangeRates.internalUpdateRates(bytes4[],uint256[],uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3135-3164) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(timeSent < (now + ORACLE_FUTURE_LIMIT),Time is too far into the future) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3140)
	- timeSent >= lastRateUpdateTimes[currencyKeys[i]] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3151)
ExchangeRates.rateIsStale(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3296-3305) uses timestamp for comparisons
	Dangerous comparisons:
	- lastRateUpdateTimes[currencyKey].add(rateStalePeriod) < now (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3304)
ExchangeRates.anyRateIsStale(bytes4[]) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3310-3327) uses timestamp for comparisons
	Dangerous comparisons:
	- currencyKeys[i] != sUSD && lastRateUpdateTimes[currencyKeys[i]].add(rateStalePeriod) < now (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3320)
Depot.updatePrices(uint256,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4519-4533) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(lastPriceUpdateTime < timeSent,Time must be later than last update) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4525)
	- require(bool,string)(timeSent < (now + ORACLE_FUTURE_LIMIT),Time must be less than now + ORACLE_FUTURE_LIMIT) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4526)
Depot.pricesAreStale() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4882-4888) uses timestamp for comparisons
	Dangerous comparisons:
	- lastPriceUpdateTime.add(priceStalePeriod) < now (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4887)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Proxy._emit(bytes,uint256,bytes32,bytes32,bytes32,bytes32) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#721-751) uses assembly
	- INLINE ASM (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#728-751)
Proxy.fallback() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#753-787) uses assembly
	- INLINE ASM (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#758-771)
	- INLINE ASM (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#775-786)
TokenFallbackCaller.callTokenFallbackIfNeeded(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1114-1146) uses assembly
	- INLINE ASM (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1131-1137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

SynthetixEscrow.appendVestingEntry(address,uint256,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2621-2648) has costly operations inside a loop:
	- totalVestedBalance = totalVestedBalance.add(quantity) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2631)
SynthetixState._addToDebtRegister(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2909-2962) has costly operations inside a loop:
	- importedXDRAmount = newTotalDebtIssued (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2926)
SynthetixState._addToDebtRegister(address,uint256) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2909-2962) has costly operations inside a loop:
	- totalIssuerCount = totalIssuerCount.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2946)
Synthetix.removeSynth(bytes4) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3533-3565) has costly operations inside a loop:
	- delete availableSynths[i] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3547)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has costly operations inside a loop:
	- depositStartIndex = depositStartIndex.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4570)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has costly operations inside a loop:
	- totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4582)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has costly operations inside a loop:
	- delete deposits[i] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4614)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has costly operations inside a loop:
	- depositStartIndex = depositStartIndex.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4616)
Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666) has costly operations inside a loop:
	- totalSellableDeposits = totalSellableDeposits.sub(deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4618)
Depot.withdrawMyDepositedSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4796-4829) has costly operations inside a loop:
	- delete deposits[i] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4808)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Version constraint 0.4.25 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x.
It is used by:
	- 0.4.25 (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#87)
solc-0.4.25 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in TokenFallbackCaller.callTokenFallbackIfNeeded(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1114-1146):
	- recipient.call(abi.encodeWithSignature(tokenFallback(address,uint256,bytes),sender,amount,data)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1142)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Owned.nominateNewOwner(address)._owner (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#113) is not in mixedCase
Parameter SelfDestructible.setSelfDestructBeneficiary(address)._beneficiary (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#197) is not in mixedCase
Parameter Pausable.setPaused(bool)._paused (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#304) is not in mixedCase
Parameter Proxy.setTarget(Proxyable)._target (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#706) is not in mixedCase
Function Proxy._emit(bytes,uint256,bytes32,bytes32,bytes32,bytes32) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#721-751) is not in mixedCase
Parameter Proxyable.setProxy(address)._proxy (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#844) is not in mixedCase
Modifier Proxyable.optionalProxy_onlyOwner() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#872-879) is not in mixedCase
Parameter State.setAssociatedContract(address)._associatedContract (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#937) is not in mixedCase
Parameter ExternStateToken.setTokenState(TokenState)._tokenState (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1255) is not in mixedCase
Function ExternStateToken._transfer_byProxy(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1291-1296) is not in mixedCase
Function ExternStateToken._transferFrom_byProxy(address,address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1302-1309) is not in mixedCase
Parameter Synth.setSynthetix(Synthetix)._synthetix (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1414) is not in mixedCase
Parameter Synth.setFeePool(FeePool)._feePool (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1422) is not in mixedCase
Parameter FeePool.setExchangeFeeRate(uint256)._exchangeFeeRate (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1832) is not in mixedCase
Parameter FeePool.setTransferFeeRate(uint256)._transferFeeRate (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1847) is not in mixedCase
Parameter FeePool.setFeeAuthority(address)._feeAuthority (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1862) is not in mixedCase
Parameter FeePool.setFeePeriodDuration(uint256)._feePeriodDuration (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1874) is not in mixedCase
Parameter FeePool.setSynthetix(Synthetix)._synthetix (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1889) is not in mixedCase
Parameter SynthetixEscrow.setSynthetix(Synthetix)._synthetix (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2459) is not in mixedCase
Parameter SynthetixState.setIssuanceRatio(uint256)._issuanceRatio (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#2880) is not in mixedCase
Parameter ExchangeRates.setOracle(address)._oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3215) is not in mixedCase
Parameter ExchangeRates.setRateStalePeriod(uint256)._time (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3227) is not in mixedCase
Parameter Synthetix.setEscrow(SynthetixEscrow)._escrow (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3571) is not in mixedCase
Parameter Synthetix.setExchangeRates(ExchangeRates)._exchangeRates (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3585) is not in mixedCase
Parameter Synthetix.setSynthetixState(SynthetixState)._synthetixState (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3599) is not in mixedCase
Struct Depot.synthDeposit (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4354-4359) is not in CapWords
Parameter Depot.setFundsWallet(address)._fundsWallet (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4442) is not in mixedCase
Parameter Depot.setOracle(address)._oracle (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4454) is not in mixedCase
Parameter Depot.setSynth(Synth)._synth (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4466) is not in mixedCase
Parameter Depot.setSynthetix(Synthetix)._synthetix (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4478) is not in mixedCase
Parameter Depot.setPriceStalePeriod(uint256)._time (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4490) is not in mixedCase
Parameter Depot.setMinimumDepositAmount(uint256)._amount (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4502) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Depot.exchangeEtherForSynthetix() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4689-4708):
	External calls:
	- fundsWallet.transfer(msg.value) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4700)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,SNX,synthetixToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4705)
Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	State variables written after the call(s):
	- depositStartIndex = depositStartIndex.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4570)
	- depositStartIndex = depositStartIndex.add(1) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4616)
	- deposits[i] = synthDeposit({user:deposit.user,amount:newAmount}) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4580)
	- delete deposits[i] (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4614)
	- totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4582)
	- totalSellableDeposits = totalSellableDeposits.sub(deposit.amount) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4618)
	Event emitted after the call(s):
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,remainingToFulfill,i) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4599)
	- ClearedDeposit(msg.sender,deposit.user,ethToSend,deposit.amount,i) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4635)
Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	Event emitted after the call(s):
	- NonPayableContract(deposit.user,ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4597)
Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	Event emitted after the call(s):
	- NonPayableContract(deposit.user,ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4633)
Reentrancy in Depot.exchangeEtherForSynths() (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4548-4666):
	External calls:
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4595)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4596)
	- ! deposit.user.send(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4631)
	- fundsWallet.transfer(ethToSend) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4632)
	- msg.sender.transfer(remainingToFulfill.divideDecimal(usdToEthPrice)) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4654)
	Event emitted after the call(s):
	- Exchange(ETH,msg.value,sUSD,fulfilled) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#4662)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Loop condition i < xdrParticipants.length (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3174) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < availableSynths.length (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3659) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

transfer(address,uint256,bytes) should be declared external:
	- Synth.transfer(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1457-1471)
transferFrom(address,address,uint256,bytes) should be declared external:
	- Synth.transferFrom(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1502-1520)
transferSenderPaysFee(address,uint256,bytes) should be declared external:
	- Synth.transferSenderPaysFee(address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1542-1555)
transferFromSenderPaysFee(address,address,uint256,bytes) should be declared external:
	- Synth.transferFromSenderPaysFee(address,address,uint256,bytes) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#1580-1596)
ratesForCurrencies(bytes4[]) should be declared external:
	- ExchangeRates.ratesForCurrencies(bytes4[]) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3251-3263)
lastRateUpdateTimesForCurrencies(bytes4[]) should be declared external:
	- ExchangeRates.lastRateUpdateTimesForCurrencies(bytes4[]) (0x172e09691dfbbc035e37c73b62095caa16ee2388.sol#3279-3291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x172e09691dfbbc035e37c73b62095caa16ee2388.sol analyzed (20 contracts with 94 detectors), 154 result(s) found

real	0m11.905s
user	0m11.570s
sys	0m0.337s
