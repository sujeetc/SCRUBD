'solc --version' running
'solc ./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:
./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:19:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:125:89: Warning: This declaration shadows an existing declaration.
  function setFee(uint256 _ethFee, uint256 _hbWalletFee) public view onlyOwner returns (uint256 ETHFee, uint256 HBWALLETFee){
                                                                                        ^------------^
./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:79:3: The shadowed declaration is here:
  uint256 public ETHFee = 2;
  ^-----------------------^

./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:125:105: Warning: This declaration shadows an existing declaration.
  function setFee(uint256 _ethFee, uint256 _hbWalletFee) public view onlyOwner returns (uint256 ETHFee, uint256 HBWALLETFee){
                                                                                                        ^-----------------^
./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:80:3: The shadowed declaration is here:
  uint256 public HBWALLETFee = 1;
  ^----------------------------^

./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol:77:42: Warning: This looks like an address but has an invalid checksum. If this is not used as an address, please prepend '00'. Correct checksummed address: '0x5D00d312e171Be5342067c09BaE883f9Bcb2003B'. For more information please see https://solidity.readthedocs.io/en/develop/types.html#address-literals
  IERC721 public erc721Address = IERC721(0x5d00d312e171be5342067c09bae883f9bcb2003b);
                                         ^----------------------------------------^


Reentrancy in Bussiness.buy(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#140-146):
	External calls:
	- require(bool)(erc721Address.getApproved(tokenId) == address(this)) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#141)
	- erc721Address.transferFrom(prices[tokenId].tokenOwner,msg.sender,tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#143)
	External calls sending eth:
	- prices[tokenId].tokenOwner.transfer(msg.value) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#144)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#145)
		- prices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#156)
	Bussiness.prices (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#89) can be used in cross function reentrancies:
	- Bussiness.buy(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#140-146)
	- Bussiness.getPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#116-123)
	- Bussiness.prices (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#89)
	- Bussiness.removePrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#109-114)
	- Bussiness.resetPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#155-158)
	- Bussiness.setPrice(uint256,uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94-98)
	- Bussiness.setPriceFeeEth(uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#99-108)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Reentrancy in Bussiness.buyByUsdt(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#147-154):
	External calls:
	- require(bool)(usdtPrices[tokenId].price > 0 && erc721Address.getApproved(tokenId) == address(this)) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#148)
	- require(bool)(usdtToken.transferFrom(msg.sender,usdtPrices[tokenId].tokenOwner,usdtPrices[tokenId].price)) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#149)
	- erc721Address.transferFrom(usdtPrices[tokenId].tokenOwner,msg.sender,tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#151)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#152)
		- usdtPrices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#157)
	Bussiness.usdtPrices (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#90) can be used in cross function reentrancies:
	- Bussiness.buyByUsdt(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#147-154)
	- Bussiness.getPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#116-123)
	- Bussiness.resetPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#155-158)
	- Bussiness.setPrice(uint256,uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94-98)
	- Bussiness.usdtPrices (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#90)
Reentrancy in Bussiness.setPriceFeeEth(uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#99-108):
	External calls:
	- require(bool)(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#100)
	State variables written after the call(s):
	- prices[_tokenId] = Price(msg.sender,_ethPrice,ethfee) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#107)
	Bussiness.prices (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#89) can be used in cross function reentrancies:
	- Bussiness.buy(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#140-146)
	- Bussiness.getPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#116-123)
	- Bussiness.prices (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#89)
	- Bussiness.removePrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#109-114)
	- Bussiness.resetPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#155-158)
	- Bussiness.setPrice(uint256,uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94-98)
	- Bussiness.setPriceFeeEth(uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#99-108)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Bussiness.setFee(uint256,uint256).ETHFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#125) shadows:
	- Bussiness.ETHFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#79) (state variable)
Bussiness.setFee(uint256,uint256).HBWALLETFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#125) shadows:
	- Bussiness.HBWALLETFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#80) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Reentrancy in Bussiness.buy(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#140-146):
	External calls:
	- require(bool)(erc721Address.getApproved(tokenId) == address(this)) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#141)
	- erc721Address.transferFrom(prices[tokenId].tokenOwner,msg.sender,tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#143)
	External calls sending eth:
	- prices[tokenId].tokenOwner.transfer(msg.value) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#144)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#145)
		- usdtPrices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#157)
Reentrancy in Bussiness.buyByUsdt(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#147-154):
	External calls:
	- require(bool)(usdtPrices[tokenId].price > 0 && erc721Address.getApproved(tokenId) == address(this)) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#148)
	- require(bool)(usdtToken.transferFrom(msg.sender,usdtPrices[tokenId].tokenOwner,usdtPrices[tokenId].price)) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#149)
	- erc721Address.transferFrom(usdtPrices[tokenId].tokenOwner,msg.sender,tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#151)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#152)
		- prices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#156)
Reentrancy in Bussiness.getPrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#116-123):
	External calls:
	- currentOwner = erc721Address.ownerOf(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#117)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#119)
		- prices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#156)
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#119)
		- usdtPrices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#157)
Reentrancy in Bussiness.removePrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#109-114):
	External calls:
	- require(bool)(erc721Address.ownerOf(tokenId) == msg.sender) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#110)
	External calls sending eth:
	- msg.sender.transfer(prices[tokenId].fee) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#111)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#112)
		- prices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#156)
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#112)
		- usdtPrices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#157)
Reentrancy in Bussiness.setPrice(uint256,uint256,uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94-98):
	External calls:
	- require(bool)(erc721Address.ownerOf(_tokenId) == msg.sender) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#95)
	State variables written after the call(s):
	- prices[_tokenId] = Price(msg.sender,_ethPrice,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#96)
	- usdtPrices[_tokenId] = Price(msg.sender,_usdtPrice,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#97)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Version constraint ^0.4.25 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x.
It is used by:
	- ^0.4.25 (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#1)
solc-0.4.25 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Bussiness.ownerOf(uint256)._tokenId (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#91) is not in mixedCase
Parameter Bussiness.setPrice(uint256,uint256,uint256)._tokenId (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94) is not in mixedCase
Parameter Bussiness.setPrice(uint256,uint256,uint256)._ethPrice (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94) is not in mixedCase
Parameter Bussiness.setPrice(uint256,uint256,uint256)._usdtPrice (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#94) is not in mixedCase
Parameter Bussiness.setPriceFeeEth(uint256,uint256)._tokenId (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#99) is not in mixedCase
Parameter Bussiness.setPriceFeeEth(uint256,uint256)._ethPrice (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#99) is not in mixedCase
Parameter Bussiness.setFee(uint256,uint256)._ethFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#125) is not in mixedCase
Parameter Bussiness.setFee(uint256,uint256)._hbWalletFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#125) is not in mixedCase
Parameter Bussiness.withdraw(address,uint256)._address (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#135) is not in mixedCase
Variable Bussiness.ETHFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#79) is not in mixedCase
Variable Bussiness.HBWALLETFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#80) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Bussiness.buy(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#140-146):
	External calls:
	- prices[tokenId].tokenOwner.transfer(msg.value) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#144)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#145)
		- prices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#156)
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#145)
		- usdtPrices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#157)
Reentrancy in Bussiness.removePrice(uint256) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#109-114):
	External calls:
	- msg.sender.transfer(prices[tokenId].fee) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#111)
	State variables written after the call(s):
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#112)
		- prices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#156)
	- resetPrice(tokenId) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#112)
		- usdtPrices[tokenId] = Price(address(0),0,0) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#157)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Bussiness.ETHFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#79) should be constant 
Bussiness.HBWALLETFee (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#80) should be constant 
Bussiness.erc721Address (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#77) should be constant 
Bussiness.usdtToken (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#78) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

safeTransferFrom(address,address,uint256,bytes) should be declared external:
	- IERC721.safeTransferFrom(address,address,uint256,bytes) (0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol#60)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x09f6a183dc0375ccf8032c367881f3aafb5342ef.sol analyzed (4 contracts with 94 detectors), 30 result(s) found

real	0m2.100s
user	0m1.885s
sys	0m0.218s
