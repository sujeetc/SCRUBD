'solc --version' running
'solc ./0x0e30bc9512306534b85afd0c75065b455af55d45.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0e30bc9512306534b85afd0c75065b455af55d45.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> ./0x0e30bc9512306534b85afd0c75065b455af55d45.sol:973:1:
    |
973 | contract COPIUM is Context, IERC20, Ownable, ReentrancyGuard {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436):
	External calls:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	External calls sending eth:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _rOwned[to] = _rOwned[to].add(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1298)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1560)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1551)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1581)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1552)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1571)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1572)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1562)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1583)
	COPIUM._rOwned (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#976) can be used in cross function reentrancies:
	- COPIUM._getCurrentSupply() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1266-1276)
	- COPIUM._sendFee(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1295-1303)
	- COPIUM._transferBothExcluded(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1578-1587)
	- COPIUM._transferFromExcluded(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1568-1576)
	- COPIUM._transferStandard(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1549-1556)
	- COPIUM._transferToExcluded(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1558-1566)
	- COPIUM.balanceOf(address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1091-1094)
	- COPIUM.constructor() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1052-1073)
	- COPIUM.excludeFromReward(address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1140-1147)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _rTotal = _rTotal.sub(rFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1236)
	COPIUM._rTotal (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#992) can be used in cross function reentrancies:
	- COPIUM._getCurrentSupply() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1266-1276)
	- COPIUM._reflectFee(uint256,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1235-1238)
	- COPIUM.constructor() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1052-1073)
	- COPIUM.tokenFromReflection(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1134-1138)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _tOwned[to] = _tOwned[to].add(amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1300)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1580)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1570)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1561)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1582)
	COPIUM._tOwned (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#977) can be used in cross function reentrancies:
	- COPIUM._getCurrentSupply() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1266-1276)
	- COPIUM._sendFee(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1295-1303)
	- COPIUM._transferBothExcluded(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1578-1587)
	- COPIUM._transferFromExcluded(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1568-1576)
	- COPIUM._transferToExcluded(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1558-1566)
	- COPIUM.balanceOf(address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1091-1094)
	- COPIUM.excludeFromReward(address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1140-1147)
	- COPIUM.includeInReward(address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1149-1160)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- accumulatedForDev = accumulatedForDev.add(tDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1291)
	COPIUM.accumulatedForDev (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1015) can be used in cross function reentrancies:
	- COPIUM._takeMarketingDevLiquidBurnFee(uint256,address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1278-1293)
	- COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436)
	- COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- accumulatedForLiquid = accumulatedForLiquid.add(tLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1289)
	COPIUM.accumulatedForLiquid (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1013) can be used in cross function reentrancies:
	- COPIUM._takeMarketingDevLiquidBurnFee(uint256,address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1278-1293)
	- COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436)
	- COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- accumulatedForMarketing = accumulatedForMarketing.add(tMarketing) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1290)
	COPIUM.accumulatedForMarketing (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1014) can be used in cross function reentrancies:
	- COPIUM._takeMarketingDevLiquidBurnFee(uint256,address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1278-1293)
	- COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436)
	- COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493)
Reentrancy in COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493):
	External calls:
	- swapTokensForEth(swapAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1464)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	External calls sending eth:
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
	- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
	- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- accumulatedForDev = remainForDev (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1492)
	COPIUM.accumulatedForDev (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1015) can be used in cross function reentrancies:
	- COPIUM._takeMarketingDevLiquidBurnFee(uint256,address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1278-1293)
	- COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436)
	- COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493)
	- accumulatedForLiquid = remainForLiq (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1490)
	COPIUM.accumulatedForLiquid (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1013) can be used in cross function reentrancies:
	- COPIUM._takeMarketingDevLiquidBurnFee(uint256,address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1278-1293)
	- COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436)
	- COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493)
	- accumulatedForMarketing = remainForMarketing (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1491)
	COPIUM.accumulatedForMarketing (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1014) can be used in cross function reentrancies:
	- COPIUM._takeMarketingDevLiquidBurnFee(uint256,address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1278-1293)
	- COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436)
	- COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

COPIUM.setMaxBuyLimit(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1224-1226) performs a multiplication on the result of a division:
	- maxBuyLimit = _tTotal.div(10 ** 4).mul(percentage) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1225)
COPIUM.setMaxWallet(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1227-1230) performs a multiplication on the result of a division:
	- maxWallet = _tTotal.div(10000).mul(percentage) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1229)
COPIUM.manualswapcustom(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1359-1363) performs a multiplication on the result of a division:
	- swapbalance = contractBalance.div(10 ** 5).mul(percentage) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1361)
COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493) performs a multiplication on the result of a division:
	- half = accumulatedForLiquid.div(2) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1453)
	- ethLiquid = delta.mul(half).div(swapAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1469)
COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493) performs a multiplication on the result of a division:
	- ethMarketing = delta.mul(accumulatedForMarketing).div(swapAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1470)
	- ethpromo = ethMarketing.mul(2).div(6) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1472)
COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493) performs a multiplication on the result of a division:
	- ethMarketing = delta.mul(accumulatedForMarketing).div(swapAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1470)
	- ethmarketers = ethMarketing.mul(4).div(6) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1473)
COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493) performs a multiplication on the result of a division:
	- remainForDev = accumulatedForDev.div(20).mul(19) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1445)
COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493) performs a multiplication on the result of a division:
	- remainForMarketing = accumulatedForMarketing.div(20).mul(19) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1447)
COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493) performs a multiplication on the result of a division:
	- remainForLiq = accumulatedForLiquid.div(20).mul(19) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1449)
COPIUM.slitherConstructorVariables() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#973-1589) performs a multiplication on the result of a division:
	- maxWallet = _tTotal.div(10000).mul(100) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#996)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436) uses tx.origin for authorization: require(bool,string)(_holderLastTransferTimestamp[tx.origin] < block.number,_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1407)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-usage-of-txorigin

COPIUM.addLiquidity(uint256,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1513-1526) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

COPIUM.allowance(address,address).owner (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1101) shadows:
	- Ownable.owner() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#732-734) (function)
COPIUM._approve(address,address,uint256).owner (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1369) shadows:
	- Ownable.owner() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#732-734) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

COPIUM.setFeesPercent(uint256,uint256,uint256,uint256,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1187-1196) should emit an event for: 
	- _taxFee = distributionFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1189) 
	- _liquidityFee = liquidityFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1190) 
	- _marketingFee = marketingFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1191) 
	- _burnFee = burnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1192) 
	- _devFee = devFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1193) 
	- _marketingDevLiquidNBurnFee = _liquidityFee + _marketingFee + _burnFee + _devFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1195) 
COPIUM.setThresoldToSwap(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1218-1220) should emit an event for: 
	- numTokensSellToAddToLiquidity = amount (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1219) 
COPIUM.setMaxBuyLimit(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1224-1226) should emit an event for: 
	- maxBuyLimit = _tTotal.div(10 ** 4).mul(percentage) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1225) 
COPIUM.setMaxWallet(uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1227-1230) should emit an event for: 
	- maxWallet = _tTotal.div(10000).mul(percentage) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1229) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

COPIUM.setMarketingWallet(address).account (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1171) lacks a zero-check on :
		- marketingWallet = account (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1172)
COPIUM.setPromoWallet(address).account (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1175) lacks a zero-check on :
		- promotionWallet = account (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1176)
COPIUM.setDevWallet(address).account (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1179) lacks a zero-check on :
		- devWallet = account (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1180)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436):
	External calls:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	External calls sending eth:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _marketingDevLiquidNBurnFee = _previousMarketingDevLiquidNBurnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1329)
		- _marketingDevLiquidNBurnFee = 0 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1324)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _previousMarketingDevLiquidNBurnFee = _marketingDevLiquidNBurnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1321)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _previousTaxFee = _taxFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1320)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _tTotalDistributedToken = _tTotalDistributedToken.add(tFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1237)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _taxFee = _previousTaxFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1328)
		- _taxFee = 0 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1323)
Reentrancy in COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493):
	External calls:
	- swapTokensForEth(swapAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1464)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	External calls sending eth:
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	State variables written after the call(s):
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- _allowances[owner][spender] = amount (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1373)
Reentrancy in COPIUM.transferFrom(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1110-1114):
	External calls:
	- _transfer(sender,recipient,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1111)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1111)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1112)
		- _allowances[owner][spender] = amount (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1373)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436):
	External calls:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	External calls sending eth:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	Event emitted after the call(s):
	- Transfer(from,to,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1302)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1555)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1575)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1565)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1586)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
Reentrancy in COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493):
	External calls:
	- swapTokensForEth(swapAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1464)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	External calls sending eth:
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1374)
		- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
	- SwapAndLiquify(half,ethLiquid,otherHalf) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1478)
Reentrancy in COPIUM.transferFrom(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1110-1114):
	External calls:
	- _transfer(sender,recipient,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1111)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1504-1510)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1111)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1374)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1112)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436) compares to a boolean constant:
	-require(bool,string)(_isBlacklistWallet[from] == false,You're in blacklist) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1385)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

2 different versions of Solidity are used:
	- Version constraint ^0.6.2 is used by:
		-^0.6.2 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#3)
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#912)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

COPIUM.includeInReward(address) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1149-1160) has costly operations inside a loop:
	- _excluded.pop() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1156)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Context._msgData() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#20-23) is never used and should be removed
ERC20._burn(address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#452-460) is never used and should be removed
ERC20._mint(address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#431-439) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

COPIUM._rTotal (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#992) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
COPIUM.maxWallet (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#996) is set pre-construction with a non-constant function or state variable:
	- _tTotal.div(10000).mul(100)
COPIUM._previousTaxFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1003) is set pre-construction with a non-constant function or state variable:
	- _taxFee
COPIUM._marketingDevLiquidNBurnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1010) is set pre-construction with a non-constant function or state variable:
	- _marketingFee + _burnFee + _liquidityFee + _devFee
COPIUM._previousMarketingDevLiquidNBurnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1011) is set pre-construction with a non-constant function or state variable:
	- _marketingDevLiquidNBurnFee
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#3)
Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#912)
solc-0.6.2 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

COPIUM (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#973-1589) should inherit from IERC20Metadata (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#111-126)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Function IUniswapV2Router01.WETH() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#511) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#678) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#679) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#696) is not in mixedCase
Parameter COPIUM.setSwapAndLiquifyEnabled(bool)._enabled (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1198) is not in mixedCase
Parameter COPIUM.setLimitsEnabled(bool)._enabled (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1203) is not in mixedCase
Parameter COPIUM.setTradingEnabled(bool)._enabled (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1207) is not in mixedCase
Function COPIUM.RouterSellLimitEnabled(bool) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1211-1213) is not in mixedCase
Parameter COPIUM.RouterSellLimitEnabled(bool)._enabled (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1211) is not in mixedCase
Parameter COPIUM.setTransferDelay(bool)._enabled (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1215) is not in mixedCase
Parameter COPIUM.calculateTaxFee(uint256)._amount (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1305) is not in mixedCase
Parameter COPIUM.calculateMarketingDevLiquidNBurnFee(uint256)._amount (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1311) is not in mixedCase
Variable COPIUM._isBlacklistWallet (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#981) is not in mixedCase
Variable COPIUM._taxFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1002) is not in mixedCase
Variable COPIUM._marketingFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1005) is not in mixedCase
Variable COPIUM._burnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1006) is not in mixedCase
Variable COPIUM._liquidityFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1007) is not in mixedCase
Variable COPIUM._devFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1008) is not in mixedCase
Variable COPIUM.CEX (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1028) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#21)" inContext (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#15-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in COPIUM._transfer(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1377-1436):
	External calls:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	External calls sending eth:
	- swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1423)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _marketingDevLiquidNBurnFee = _previousMarketingDevLiquidNBurnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1329)
		- _marketingDevLiquidNBurnFee = 0 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1324)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _previousMarketingDevLiquidNBurnFee = _marketingDevLiquidNBurnFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1321)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _previousTaxFee = _taxFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1320)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _rOwned[to] = _rOwned[to].add(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1298)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1560)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1551)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1581)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1552)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1571)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1572)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1562)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1583)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _rTotal = _rTotal.sub(rFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1236)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _tOwned[to] = _tOwned[to].add(amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1300)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1580)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1570)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1561)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1582)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _tTotalDistributedToken = _tTotalDistributedToken.add(tFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1237)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- _taxFee = _previousTaxFee (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1328)
		- _taxFee = 0 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1323)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- accumulatedForDev = accumulatedForDev.add(tDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1291)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- accumulatedForLiquid = accumulatedForLiquid.add(tLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1289)
	- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
		- accumulatedForMarketing = accumulatedForMarketing.add(tMarketing) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1290)
	Event emitted after the call(s):
	- Transfer(from,to,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1302)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1555)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1575)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1565)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
	- Transfer(sender,recipient,tTransferAmount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1586)
		- _tokenTransfer(from,to,amount,takeFee) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1435)
Reentrancy in COPIUM.swapAndLiquify() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1438-1493):
	External calls:
	- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
	- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
	- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	External calls sending eth:
	- addLiquidity(otherHalf,ethLiquid) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1477)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
	- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
	- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
	- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- accumulatedForDev = remainForDev (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1492)
	- accumulatedForLiquid = remainForLiq (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1490)
	- accumulatedForMarketing = remainForMarketing (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1491)
Reentrancy in COPIUM.transferFrom(address,address,uint256) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1110-1114):
	External calls:
	- _transfer(sender,recipient,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1111)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1111)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1518-1525)
		- address(marketingWallet).transfer(ethmarketers) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1482)
		- address(promotionWallet).transfer(ethpromo) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1483)
		- address(devWallet).transfer(ethDev) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1487)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1112)
		- _allowances[owner][spender] = amount (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1373)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1374)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1112)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

COPIUM.slitherConstructorVariables() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#973-1589) uses literals with too many digits:
	- _tTotal = 69000000000 * 10 ** 18 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#991)
COPIUM.slitherConstructorVariables() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#973-1589) uses literals with too many digits:
	- maxBuyLimit = 690000000 * (10 ** 18) (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#995)
COPIUM.slitherConstructorVariables() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#973-1589) uses literals with too many digits:
	- numTokensSellToAddToLiquidity = 6900000 * 10 ** 18 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1033)
COPIUM.slitherConstructorVariables() (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#973-1589) uses literals with too many digits:
	- routerselllimittokens = 1925000000 * 10 ** 18 (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1034)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition i < _excluded.length (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1269) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

COPIUM.CEX (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1028) should be constant 
COPIUM._decimals (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1000) should be constant 
COPIUM._name (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#998) should be constant 
COPIUM._symbol (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#999) should be constant 
COPIUM._tTotal (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#991) should be constant 
COPIUM.deadWallet (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1018) should be constant 
COPIUM.stakeRewardSupply (0x0e30bc9512306534b85afd0c75065b455af55d45.sol#1016) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x0e30bc9512306534b85afd0c75065b455af55d45.sol analyzed (14 contracts with 94 detectors), 79 result(s) found

real	0m5.902s
user	0m5.581s
sys	0m0.322s
