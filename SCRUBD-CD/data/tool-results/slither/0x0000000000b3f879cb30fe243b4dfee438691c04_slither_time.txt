'solc --version' running
'solc ./0x0000000000b3f879cb30fe243b4dfee438691c04.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0000000000b3f879cb30fe243b4dfee438691c04.sol:
./0x0000000000b3f879cb30fe243b4dfee438691c04.sol:242:13: Warning: Return value of low-level calls not used.
            mk_contract_address(this, i).call();
            ^---------------------------------^
./0x0000000000b3f879cb30fe243b4dfee438691c04.sol:183:44: Warning: Unused local variable
    function makeChild() internal returns (address addr) {
                                           ^----------^


GasToken2.mk_contract_address(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#26-84) is declared view but contains assembly code
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code

Reentrancy in GasToken2.destroyChildren(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#238-246):
	External calls:
	- mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
	State variables written after the call(s):
	- s_tail = tail + value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#245)
	GasToken2.s_tail (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#173) can be used in cross function reentrancies:
	- GasToken2.destroyChildren(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#238-246)
	- GasToken2.totalSupply() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#178-180)
Reentrancy in GasToken2.free(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#253-264):
	External calls:
	- destroyChildren(value) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#259)
		- mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
	State variables written after the call(s):
	- s_balances[msg.sender] = from_balance - value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#261)
	GasToken2.s_balances (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#91) can be used in cross function reentrancies:
	- GasToken2.balanceOf(address) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#100-102)
	- GasToken2.free(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#253-264)
	- GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306)
	- GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331)
	- GasToken2.freeUpTo(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#270-281)
	- GasToken2.internalTransfer(address,address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#104-113)
	- GasToken2.mint(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#219-225)
Reentrancy in GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306):
	External calls:
	- destroyChildren(value) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#300)
		- mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
	State variables written after the call(s):
	- from_allowances[spender] = spender_allowance - value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#303)
	GasToken2.s_allowances (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#93) can be used in cross function reentrancies:
	- GasToken2.allowance(address,address) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#150-152)
	- GasToken2.approve(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#135-143)
	- GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306)
	- GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331)
	- GasToken2.transferFrom(address,address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#122-130)
	- s_balances[from] = from_balance - value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#302)
	GasToken2.s_balances (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#91) can be used in cross function reentrancies:
	- GasToken2.balanceOf(address) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#100-102)
	- GasToken2.free(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#253-264)
	- GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306)
	- GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331)
	- GasToken2.freeUpTo(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#270-281)
	- GasToken2.internalTransfer(address,address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#104-113)
	- GasToken2.mint(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#219-225)
Reentrancy in GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331):
	External calls:
	- destroyChildren(value) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#325)
		- mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
	State variables written after the call(s):
	- from_allowances[spender] = spender_allowance - value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#328)
	GasToken2.s_allowances (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#93) can be used in cross function reentrancies:
	- GasToken2.allowance(address,address) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#150-152)
	- GasToken2.approve(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#135-143)
	- GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306)
	- GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331)
	- GasToken2.transferFrom(address,address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#122-130)
	- s_balances[from] = from_balance - value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#327)
	GasToken2.s_balances (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#91) can be used in cross function reentrancies:
	- GasToken2.balanceOf(address) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#100-102)
	- GasToken2.free(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#253-264)
	- GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306)
	- GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331)
	- GasToken2.freeUpTo(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#270-281)
	- GasToken2.internalTransfer(address,address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#104-113)
	- GasToken2.mint(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#219-225)
Reentrancy in GasToken2.freeUpTo(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#270-281):
	External calls:
	- destroyChildren(value) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#276)
		- mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
	State variables written after the call(s):
	- s_balances[msg.sender] = from_balance - value (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#278)
	GasToken2.s_balances (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#91) can be used in cross function reentrancies:
	- GasToken2.balanceOf(address) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#100-102)
	- GasToken2.free(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#253-264)
	- GasToken2.freeFrom(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#287-306)
	- GasToken2.freeFromUpTo(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#312-331)
	- GasToken2.freeUpTo(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#270-281)
	- GasToken2.internalTransfer(address,address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#104-113)
	- GasToken2.mint(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#219-225)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

GasToken2.destroyChildren(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#238-246) ignores return value by mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

GasToken2.mk_contract_address(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#26-84) uses assembly
	- INLINE ASM (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#73-83)
GasToken2.makeChild() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#183-214) uses assembly
	- INLINE ASM (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#184-214)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Version constraint ^0.4.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- NestedArrayFunctionCallDecoder
	- ZeroFunctionSelector
	- DelegateCallReturnValue
	- ECRecoverMalformedInput
	- SkipEmptyStringLiteral
	- ConstantOptimizerSubtraction.
It is used by:
	- ^0.4.10 (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#1)
solc-0.4.11 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in GasToken2.destroyChildren(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#238-246):
	- mk_contract_address(this,i).call() (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#242)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function GasToken2.count_bytes(uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#15-24) is not in mixedCase
Function GasToken2.mk_contract_address(address,uint256) (0x0000000000b3f879cb30fe243b4dfee438691c04.sol#26-84) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
./0x0000000000b3f879cb30fe243b4dfee438691c04.sol analyzed (1 contracts with 94 detectors), 14 result(s) found

real	0m1.652s
user	0m1.400s
sys	0m0.254s
