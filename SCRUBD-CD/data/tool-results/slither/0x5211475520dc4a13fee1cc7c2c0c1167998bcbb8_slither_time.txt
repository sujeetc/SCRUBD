'solc --version' running
'solc ./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol:
./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol:36:5: Warning: Function state mutability can be restricted to pure
    function max64(uint64 a, uint64 b) internal view returns(uint64){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol:40:5: Warning: Function state mutability can be restricted to pure
    function min64(uint64 a, uint64 b) internal view returns(uint64){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol:44:5: Warning: Function state mutability can be restricted to pure
    function max256(uint256 a, uint256 b) internal view returns(uint256){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol:48:5: Warning: Function state mutability can be restricted to pure
    function min256(uint256 a, uint256 b) internal view returns(uint256){
    ^ (Relevant source part starts here and spans across multiple lines).
./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol:52:5: Warning: Function state mutability can be restricted to pure
    function assertSafe(bool assertion) internal {
    ^ (Relevant source part starts here and spans across multiple lines).


Reentrancy in AuctionContract.closeAuction() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#139-163):
	External calls:
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	- secondContract = auctioneer.createAuctionContract.value(secondValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#157)
	External calls sending eth:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	- secondContract = auctioneer.createAuctionContract.value(secondValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#157)
	State variables written after the call(s):
	- isActive = false (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#162)
	AuctionContract.isActive (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#89) can be used in cross function reentrancies:
	- AuctionContract.closeAuction() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#139-163)
	- AuctionContract.constructor(uint256,address) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#91-102)
	- AuctionContract.isActive (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#89)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

AuctionContract.constructor(uint256,address)._auctioneerAddress (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#91) lacks a zero-check on :
		- auctioneerAddress = _auctioneerAddress (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#94)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in AuctionContract.closeAuction() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#139-163):
	External calls:
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	External calls sending eth:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	State variables written after the call(s):
	- firstBetContract = firstContract (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#150)
Reentrancy in AuctionContract.closeAuction() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#139-163):
	External calls:
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	- secondContract = auctioneer.createAuctionContract.value(secondValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#157)
	External calls sending eth:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	- secondContract = auctioneer.createAuctionContract.value(secondValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#157)
	State variables written after the call(s):
	- secondBetContract = secondContract (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#158)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Version constraint ^0.4.11 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- NestedArrayFunctionCallDecoder
	- ZeroFunctionSelector
	- DelegateCallReturnValue
	- ECRecoverMalformedInput
	- SkipEmptyStringLiteral.
It is used by:
	- ^0.4.11 (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#1)
solc-0.4.22 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function SafeMath.GET_MAX_UINT256() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#8-10) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in AuctionContract.askForRefund() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#127-137):
	External calls:
	- msg.sender.transfer(value) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#133)
	State variables written after the call(s):
	- bettingMap[msg.sender] = 0 (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#134)
	Event emitted after the call(s):
	- RefundEvent(msg.sender,value) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#136)
Reentrancy in AuctionContract.closeAuction() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#139-163):
	External calls:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	External calls sending eth:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	State variables written after the call(s):
	- firstBetContract = firstContract (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#150)
Reentrancy in AuctionContract.closeAuction() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#139-163):
	External calls:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	External calls sending eth:
	- msg.sender.transfer(prize) (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#143)
	- firstContract = auctioneer.createAuctionContract.value(firstValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#149)
	- secondContract = auctioneer.createAuctionContract.value(secondValue)() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#157)
	State variables written after the call(s):
	- isActive = false (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#162)
	- secondBetContract = secondContract (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#158)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

AuctionContract.slitherConstructorVariables() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#67-165) uses literals with too many digits:
	- minimalPrize = 10000000000000000 (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#86)
AuctionContract.slitherConstructorVariables() (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#67-165) uses literals with too many digits:
	- minimaBetStep = 10000000000000000 (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#87)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

AuctionContract.auctionSlideSize (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#74) should be constant 
AuctionContract.minimaBetStep (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#87) should be constant 
AuctionContract.minimalPrize (0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol#86) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol analyzed (3 contracts with 94 detectors), 15 result(s) found

real	0m1.570s
user	0m1.343s
sys	0m0.229s
