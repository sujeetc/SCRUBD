'solc --version' running
'solc ./0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585):
	External calls:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#613-619)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	External calls sending eth:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- address(devWallet).transfer(ethForDev) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#647)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#569)
	hayr._balances (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#359) can be used in cross function reentrancies:
	- hayr._basicTransfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#587-592)
	- hayr._setIsDividendExempt(address,bool) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#502-510)
	- hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585)
	- hayr.balanceOf(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#529)
	- hayr.constructor() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#409-436)
	- hayr.swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#633-655)
	- hayr.takeFee(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#594-603)
	- _balances[recipient] = _balances[recipient].add(finalAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#572)
	hayr._balances (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#359) can be used in cross function reentrancies:
	- hayr._basicTransfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#587-592)
	- hayr._setIsDividendExempt(address,bool) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#502-510)
	- hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585)
	- hayr.balanceOf(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#529)
	- hayr.constructor() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#409-436)
	- hayr.swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#633-655)
	- hayr.takeFee(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#594-603)
	- finalAmount = takeFee(sender,recipient,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#571)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#599)
	hayr._balances (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#359) can be used in cross function reentrancies:
	- hayr._basicTransfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#587-592)
	- hayr._setIsDividendExempt(address,bool) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#502-510)
	- hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585)
	- hayr.balanceOf(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#529)
	- hayr.constructor() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#409-436)
	- hayr.swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#633-655)
	- hayr.takeFee(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#594-603)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315) ignores return value by IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315):
	External calls:
	- IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#312)
	HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199) can be used in cross function reentrancies:
	- HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315)
	- HayReflections.getUnpaidEarnings(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#321-330)
	- HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253)
	- HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#313)
	HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199) can be used in cross function reentrancies:
	- HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315)
	- HayReflections.getUnpaidEarnings(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#321-330)
	- HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253)
	- HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199)
Reentrancy in HayReflections.process(uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#275-297):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#289)
		- IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
	State variables written after the call(s):
	- currentIndex = 0 (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#286)
	HayReflections.currentIndex (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#210) can be used in cross function reentrancies:
	- HayReflections.currentIndex (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#210)
	- HayReflections.process(uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#275-297)
	- currentIndex ++ (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#294)
	HayReflections.currentIndex (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#210) can be used in cross function reentrancies:
	- HayReflections.currentIndex (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#210)
	- HayReflections.process(uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#275-297)
Reentrancy in HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253):
	External calls:
	- distributeDividend(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#241)
		- IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#251)
	HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199) can be used in cross function reentrancies:
	- HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315)
	- HayReflections.getUnpaidEarnings(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#321-330)
	- HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253)
	- HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#252)
	HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199) can be used in cross function reentrancies:
	- HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315)
	- HayReflections.getUnpaidEarnings(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#321-330)
	- HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253)
	- HayReflections.shares (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#199)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

hayr.addLiquidity(uint256,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#622-631) ignores return value by router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

HayReflections.setDistributionCriteria(uint256,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#233-236) should emit an event for: 
	- minPeriod = newMinPeriod (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#234) 
	- minDistribution = newMinDistribution (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#235) 
HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253) should emit an event for: 
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#250) 
hayr.changeTotalFees(uint256,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#453-457) should emit an event for: 
	- buyFee = newBuyFee (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#455) 
	- sellFee = newSellFee (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#456) 
hayr.changeFeeAllocation(uint256,uint256,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#459-463) should emit an event for: 
	- toReflections = newRewardFee (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#460) 
	- toLiquidity = newLpFee (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#461) 
	- toMarketing = newMarketingFee (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#462) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

hayr.setDevWallet(address).newDevWallet (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#481) lacks a zero-check on :
		- devWallet = address(newDevWallet) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#482)
hayr.setOwnerWallet(address).newOwnerWallet (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#485) lacks a zero-check on :
		- tokenOwner = newOwnerWallet (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#486)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315) has external calls inside a loop: IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in HayReflections.deposit() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#255-273):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#263-268)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#272)
	- totalDividends = totalDividends.add(amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#271)
Reentrancy in HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315):
	External calls:
	- IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#311)
Reentrancy in HayReflections.setShare(address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#238-253):
	External calls:
	- distributeDividend(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#241)
		- IERC20(HAY).transfer(shareholder,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#310)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#245)
		- shareholderIndexes[shareholder] = shareholders.length (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#337)
	- removeShareholder(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#247)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#343)
	- addShareholder(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#245)
		- shareholders.push(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#338)
	- removeShareholder(shareholder) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#247)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#342)
		- shareholders.pop() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#344)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#250)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585):
	External calls:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#613-619)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	- hayReflections.setShare(sender,_balances[sender]) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#576)
	- hayReflections.setShare(recipient,_balances[recipient]) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#580)
	External calls sending eth:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- address(devWallet).transfer(ethForDev) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#647)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	Event emitted after the call(s):
	- Transfer(sender,recipient,finalAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#583)
Reentrancy in hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585):
	External calls:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#613-619)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	External calls sending eth:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- address(devWallet).transfer(ethForDev) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#647)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#600)
		- finalAmount = takeFee(sender,recipient,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#571)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

HayReflections.shouldDistribute(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#299-302) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#300-301)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

HayReflections.process(uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#275-297) has costly operations inside a loop:
	- currentIndex = 0 (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#286)
HayReflections.distributeDividend(address) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#304-315) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#309)
HayReflections.process(uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#275-297) has costly operations inside a loop:
	- currentIndex ++ (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#294)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Context._msgData() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#82-84) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

hayr.lpWallet (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#375) is set pre-construction with a non-constant function or state variable:
	- DEAD
hayr.maxTx (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#405) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(100)
hayr.maxWallet (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#406) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(50)
hayr.swapThreshold (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#407) is set pre-construction with a non-constant function or state variable:
	- _totalSupply.div(400)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint 0.8.13 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- StorageWriteRemovalBeforeConditionalTermination
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- InlineAssemblyMemorySideEffects
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- 0.8.13 (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#14)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function IDEXRouter.WETH() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#126) is not in mixedCase
Variable HayReflections.HAY (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#186) is not in mixedCase
Contract hayr (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#348-680) is not in CapWords
Variable hayr.HAY (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#351) is not in mixedCase
Constant hayr._name (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#353) is not in UPPER_CASE_WITH_UNDERSCORES
Constant hayr._symbol (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#354) is not in UPPER_CASE_WITH_UNDERSCORES
Constant hayr._decimals (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#355) is not in UPPER_CASE_WITH_UNDERSCORES
Variable hayr.WETH (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#363) is not in mixedCase
Variable hayr.DEAD (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#364) is not in mixedCase
Variable hayr.ZERO (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#365) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in hayr._transfer(address,address,uint256) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#554-585):
	External calls:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- address(devWallet).transfer(ethForDev) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#647)
	External calls sending eth:
	- swapBack() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#567)
		- router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,lpWallet,block.timestamp) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#623-630)
		- address(devWallet).transfer(ethForDev) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#647)
		- hayReflections.deposit{value: ethForHAY}() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#650)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#569)
	- _balances[recipient] = _balances[recipient].add(finalAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#572)
	- finalAmount = takeFee(sender,recipient,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#571)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#599)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#600)
		- finalAmount = takeFee(sender,recipient,amount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#571)
	- Transfer(sender,recipient,finalAmount) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#583)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

hayr.slitherConstructorVariables() (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#348-680) uses literals with too many digits:
	- _totalSupply = 1000000000 * (10 ** _decimals) (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#357)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

hayr.cooldown (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#361) is never used in hayr (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#348-680)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

HayReflections.dividendsPerShareAccuracyFactor (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#205) should be constant 
hayr.DEAD (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#364) should be constant 
hayr.HAY (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#351) should be constant 
hayr.ZERO (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#365) should be constant 
hayr._totalSupply (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#357) should be constant 
hayr.allocationSum (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#384) should be constant 
hayr.antiBot (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#367) should be constant 
hayr.factory (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#388) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

HayReflections.HAY (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#186) should be immutable 
HayReflections._token (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#184) should be immutable 
HayReflections.router (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#188) should be immutable 
hayr.WETH (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#363) should be immutable 
hayr.hayReflections (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#396) should be immutable 
hayr.lpWallet (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#375) should be immutable 
hayr.pair (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#387) should be immutable 
hayr.router (0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol#386) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x372bf2843c4e4e2f6f7fba9e2e6dbe6adf2b760f.sol analyzed (9 contracts with 94 detectors), 57 result(s) found

real	0m2.927s
user	0m2.718s
sys	0m0.210s
