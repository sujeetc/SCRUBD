'solc --version' running
'solc ./0x000000000000541e251335090ac5b47176af4f7e.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x000000000000541e251335090ac5b47176af4f7e.sol:
./0x000000000000541e251335090ac5b47176af4f7e.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1772:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);  // delegate the call to the settlement module
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1787:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);  // delegate the call to the settlement module
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1803:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);  // delegate the call to the settlement module
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1817:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);  // delegate the call to the settlement module
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1833:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);     // delegate the call to the settlement module
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1849:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);  // delegate the call to the settlement module
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1871:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1894:9: Warning: Return value of low-level calls not used.
        settlementModuleAddress.delegatecall(msg.data);
        ^--------------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2327:17: Warning: Return value of low-level calls not used.
                restoreChildContractAddress(i).call("");
                ^-------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1769:26: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function settleTrade(OrderInputPacked calldata makerOrderInput, OrderInputPacked calldata takerOr ...
                         ^---------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1769:69: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... utPacked calldata makerOrderInput, OrderInputPacked calldata takerOrderInput, TradeInputPacked calldata tradeIn ...
                                        ^---------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1784:33: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function settleReserveTrade(OrderInputPacked calldata orderInput, TradeInputPacked calldata tradeInput) external {
                                ^----------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1800:41: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... unction settleReserveTradeWithData(OrderInputPacked calldata orderInput, TradeInputPacked calldata tradeIn ...
                                        ^----------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1800:117: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... deInputPacked calldata tradeInput, bytes32[] calldata data) external {
                                        ^---------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1830:86: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... deInputPacked calldata tradeInput, bytes32[] calldata makerData, bytes32[] calldata takerData) ext ...
                                        ^--------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1830:116: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... put, bytes32[] calldata makerData, bytes32[] calldata takerData) external {
                                        ^--------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1846:32: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function batchSettleTrades(OrderInputPacked[] calldata orderInput, TradeInputPacked[] calldata tradeInput) external {
                               ^------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1868:30: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function settleRingTrade(OrderInputPacked[] calldata orderInput, RingTradeInputPacked[] calldata tradeInput) external {
                             ^------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1891:38: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ...   function settleRingTradeWithData(OrderInputPacked[] calldata orderInput, RingTradeInputPacked[] calldata t ...
                                        ^------------------------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:1891:122: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... InputPacked[] calldata tradeInput, bytes32[][] calldata data) external {
                                        ^-----------------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2233:19: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function swap(address sell_token, uint256 sell_amount, address buy_ ...
                  ^----------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2233:39: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ...  function swap(address sell_token, uint256 sell_amount, address buy_token,  uint256 min_o ...
                                        ^-----------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2233:60: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... s sell_token, uint256 sell_amount, address buy_token,  uint256 min_output, uint256 dead ...
                                        ^---------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2233:80: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... 6 sell_amount, address buy_token,  uint256 min_output, uint256 deadline) external payabl ...
                                        ^----------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2233:100: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... ss buy_token,  uint256 min_output, uint256 deadline) external payable returns(uint256) ...
                                        ^--------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2250:30: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function swapWithReserve(address sell_token, uint256 sell_amount, address buy_ ...
                             ^----------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2250:50: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... wapWithReserve(address sell_token, uint256 sell_amount, address buy_token,  uint256 min_o ...
                                        ^-----------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2250:71: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... s sell_token, uint256 sell_amount, address buy_token,  uint256 min_output, address rese ...
                                        ^---------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2250:91: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... 6 sell_amount, address buy_token,  uint256 min_output, address reserve, uint256 deadline ...
                                        ^----------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2250:111: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... ss buy_token,  uint256 min_output, address reserve, uint256 deadline) public payable  ...
                                        ^-------------^
./0x000000000000541e251335090ac5b47176af4f7e.sol:2250:128: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 ... nt256 min_output, address reserve, uint256 deadline) public payable returns (uint256){ ...
                                        ^--------------^


dexBlue (0x000000000000541e251335090ac5b47176af4f7e.sol#1448-2624) contract sets array length with a user-controlled value:
	- token_arr.push(token) (0x000000000000541e251335090ac5b47176af4f7e.sol#2531)
dexBlue (0x000000000000541e251335090ac5b47176af4f7e.sol#1448-2624) contract sets array length with a user-controlled value:
	- public_reserve_arr.push(reserve) (0x000000000000541e251335090ac5b47176af4f7e.sol#2497)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1926-1934)
	- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1939)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	External calls sending eth:
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	State variables written after the call(s):
	- balances[trade.makerToken][makerReserve] -= trade.makerAmount (0x000000000000541e251335090ac5b47176af4f7e.sol#1961)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1926-1934)
	- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1939)
	- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1970)
	- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1978-1983)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	External calls sending eth:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1965-1968)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	State variables written after the call(s):
	- balances[trade.makerToken][feeCollector] += trade.takerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#1986)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
	- balances[trade.takerToken][feeCollector] += trade.makerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#1987)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2017-2026)
	- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2031)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	External calls sending eth:
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	State variables written after the call(s):
	- balances[trade.makerToken][makerReserve] -= trade.makerAmount (0x000000000000541e251335090ac5b47176af4f7e.sol#2054)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2017-2026)
	- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2031)
	- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2063)
	- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2071-2076)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	External calls sending eth:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#2058-2061)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	State variables written after the call(s):
	- balances[trade.makerToken][feeCollector] += trade.takerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#2079)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
	- balances[trade.takerToken][feeCollector] += trade.makerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#2080)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
Reentrancy in dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144):
	External calls:
	- require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1030-1038)
	- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1043)
	- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	External calls sending eth:
	- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	State variables written after the call(s):
	- balances[trades[i].giveToken][reserve] -= trades[i].giveAmount - trades[i].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1063)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.sellToken][order.signee] -= trades[i].giveAmount - trades[i].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1094)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[trades[prev].giveToken][order.signee] += trades[prev].giveAmount - trades[i].fee (0x000000000000541e251335090ac5b47176af4f7e.sol#1097)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[trades[prev].giveToken][feeCollector] += trades[i].fee - trades[prev].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1109)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- matched[order.hash] += trades[i].giveAmount - trades[i].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1100)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
Reentrancy in dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306):
	External calls:
	- require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1190-1199)
	- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1204)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	External calls sending eth:
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	State variables written after the call(s):
	- balances[trades[i].giveToken][reserve] -= trades[i].giveAmount - trades[i].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1225)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.sellToken][order.signee] -= trades[i].giveAmount - trades[i].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1256)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[trades[prev].giveToken][order.signee] += trades[prev].giveAmount - trades[i].fee (0x000000000000541e251335090ac5b47176af4f7e.sol#1259)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[trades[prev].giveToken][feeCollector] += trades[i].fee - trades[prev].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1271)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- matched[order.hash] += trades[i].giveAmount - trades[i].rebate (0x000000000000541e251335090ac5b47176af4f7e.sol#1262)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

dexBlueStorage.last_blocked_timestamp (0x000000000000541e251335090ac5b47176af4f7e.sol#80) is never initialized. It is used in:
	- dexBlueUtils.getLastBlockedTimestamp(address) (0x000000000000541e251335090ac5b47176af4f7e.sol#173-175)
dexBlueStorage.delegates (0x000000000000541e251335090ac5b47176af4f7e.sol#85) is never initialized. It is used in:
	- dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#254-314)
dexBlueStorage.tokens (0x000000000000541e251335090ac5b47176af4f7e.sol#87) is never initialized. It is used in:
	- dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#254-314)
	- dexBlueStructs.reserveReserveTradeFromInput(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#429-439)
	- dexBlueStructs.ringTradeFromInput(dexBlueStructs.RingTradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#476-486)
	- dexBlueUtils.getTokenFromIndex(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#126-128)
dexBlueStorage.token_indices (0x000000000000541e251335090ac5b47176af4f7e.sol#88) is never initialized. It is used in:
	- dexBlueUtils.getTokenIndex(address) (0x000000000000541e251335090ac5b47176af4f7e.sol#118-120)
dexBlueStorage.token_arr (0x000000000000541e251335090ac5b47176af4f7e.sol#89) is never initialized. It is used in:
	- dexBlueUtils.getTokens() (0x000000000000541e251335090ac5b47176af4f7e.sol#133-135)
dexBlueStorage.reserves (0x000000000000541e251335090ac5b47176af4f7e.sol#91) is never initialized. It is used in:
	- dexBlueUtils.getReserveFromIndex(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#149-151)
	- dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883)
	- dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#906-922)
	- dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#929-950)
	- dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#955-967)
	- dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#974-990)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
dexBlueStorage.reserve_indices (0x000000000000541e251335090ac5b47176af4f7e.sol#92) is never initialized. It is used in:
	- dexBlueUtils.getReserveIndex(address) (0x000000000000541e251335090ac5b47176af4f7e.sol#141-143)
dexBlueStorage.public_reserves (0x000000000000541e251335090ac5b47176af4f7e.sol#93) is never initialized. It is used in:
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
dexBlueStorage.public_reserve_arr (0x000000000000541e251335090ac5b47176af4f7e.sol#94) is never initialized. It is used in:
	- dexBlueUtils.getReserves() (0x000000000000541e251335090ac5b47176af4f7e.sol#156-158)
	- dexBlueSettlementModule.getBestReserve(address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1328-1342)
dexBlueStorage.arbiters (0x000000000000541e251335090ac5b47176af4f7e.sol#97) is never initialized. It is used in:
	- dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883)
	- dexBlueSettlementModule.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#890-900)
	- dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#906-922)
	- dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#929-950)
	- dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#955-967)
	- dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#974-990)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
dexBlueStorage.feeCollector (0x000000000000541e251335090ac5b47176af4f7e.sol#99) is never initialized. It is used in:
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
dexBlueStructs.EIP712_DOMAIN_SEPARATOR (0x000000000000541e251335090ac5b47176af4f7e.sol#208) is never initialized. It is used in:
	- dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#254-314)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

WETH (0x000000000000541e251335090ac5b47176af4f7e.sol#2700-2704) has incorrect ERC20 function interface:Token.transfer(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2669)
WETH (0x000000000000541e251335090ac5b47176af4f7e.sol#2700-2704) has incorrect ERC20 function interface:Token.transferFrom(address,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2677)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491) uses a dangerous strict equality:
	- require(bool)(balanceBefore + amount == address(this).balance) (0x000000000000541e251335090ac5b47176af4f7e.sol#1486)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Contract locking ether found:
	Contract dexBlueReserve (0x000000000000541e251335090ac5b47176af4f7e.sol#2627-2648) has payable functions:
	 - dexBlueReserve.trade(address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2629)
	 - dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2632)
	 - dexBlueReserve.swap(address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2644)
	But does not have a function to withdraw the ether
Contract locking ether found:
	Contract WETH (0x000000000000541e251335090ac5b47176af4f7e.sol#2700-2704) has payable functions:
	 - WETH.deposit() (0x000000000000541e251335090ac5b47176af4f7e.sol#2701)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883):
	External calls:
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#874-878)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
	State variables written after the call(s):
	- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#850-854)
		- balances[makerOrder.sellToken][makerOrder.signee] -= trade.makerAmount - trade.makerRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#541)
		- balances[takerOrder.sellToken][takerOrder.signee] -= trade.takerAmount (0x000000000000541e251335090ac5b47176af4f7e.sol#542)
		- balances[makerOrder.buyToken][makerOrder.signee] += trade.takerAmount - trade.makerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#545)
		- balances[takerOrder.buyToken][takerOrder.signee] += trade.makerAmount - trade.takerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#546)
		- balances[takerOrder.buyToken][feeCollector] += trade.takerFee - trade.makerRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#553)
		- balances[makerOrder.buyToken][feeCollector] += trade.makerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#554)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- balances[order.sellToken][order.signee] -= trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#606)
		- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#629)
		- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (0x000000000000541e251335090ac5b47176af4f7e.sol#632)
		- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#638)
		- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#639)
		- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#653)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- balances[order.sellToken][order.signee] -= trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#606)
		- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#629)
		- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (0x000000000000541e251335090ac5b47176af4f7e.sol#632)
		- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#638)
		- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#639)
		- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#653)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#850-854)
		- matched[makerOrder.hash] += trade.makerAmount - trade.makerRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#549)
		- matched[takerOrder.hash] += trade.takerAmount (0x000000000000541e251335090ac5b47176af4f7e.sol#550)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- matched[order.hash] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#635)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- matched[order.hash] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#635)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1926-1934)
	State variables written after the call(s):
	- balances[trade.takerToken][takerReserve] -= trade.takerAmount (0x000000000000541e251335090ac5b47176af4f7e.sol#1936)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2017-2026)
	State variables written after the call(s):
	- balances[trade.takerToken][takerReserve] -= trade.takerAmount (0x000000000000541e251335090ac5b47176af4f7e.sol#2028)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlue.blockFundsForSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1712-1720)
	- dexBlue.depositEther() (0x000000000000541e251335090ac5b47176af4f7e.sol#1456-1459)
	- dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505)
	- dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491)
	- dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623)
	- dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995)
	- dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088)
	- dexBlue.executeReserveTrade(address,uint256,address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2097-2136)
	- dexBlue.executeReserveTradeWithData(address,uint256,address,uint256,address,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2146-2187)
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760)
	- dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568)
	- dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1579-1606)
	- dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703)
Reentrancy in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660):
	External calls:
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	State variables written after the call(s):
	- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#629)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (0x000000000000541e251335090ac5b47176af4f7e.sol#632)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#638)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#639)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#653)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- matched[order.hash] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#635)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
Reentrancy in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757):
	External calls:
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (0x000000000000541e251335090ac5b47176af4f7e.sol#704-718)
	State variables written after the call(s):
	- balances[order.buyToken][reserve] -= trade.reserveAmount - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#726)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.buyToken][order.signee] += trade.reserveAmount - trade.orderFee (0x000000000000541e251335090ac5b47176af4f7e.sol#729)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.buyToken][feeCollector] += trade.orderFee - trade.reserveRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#735)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.sellToken][feeCollector] += trade.reserveFee - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#736)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- balances[order.sellToken][order.signee] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#750)
	dexBlueStorage.balances (0x000000000000541e251335090ac5b47176af4f7e.sol#78) can be used in cross function reentrancies:
	- dexBlueUtils.getBalance(address,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#110-112)
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
	- dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445)
	- matched[order.hash] += trade.orderAmount - trade.orderRebate (0x000000000000541e251335090ac5b47176af4f7e.sol#732)
	dexBlueStorage.matched (0x000000000000541e251335090ac5b47176af4f7e.sol#83) can be used in cross function reentrancies:
	- dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660)
	- dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757)
	- dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566)
	- dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144)
	- dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306)
Reentrancy in dexBlue.spendGasTokens(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2320-2332):
	External calls:
	- restoreChildContractAddress(i).call() (0x000000000000541e251335090ac5b47176af4f7e.sol#2327)
	State variables written after the call(s):
	- gas_token_nonce_tail = tail + amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2330)
	dexBlue.gas_token_nonce_tail (0x000000000000541e251335090ac5b47176af4f7e.sol#2298) can be used in cross function reentrancies:
	- dexBlue.getAvailableGasTokens() (0x000000000000541e251335090ac5b47176af4f7e.sol#2303-2305)
	- dexBlue.spendGasTokens(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2320-2332)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#1769-1778) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1772)
dexBlue.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#1784-1793) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1787)
dexBlue.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1800-1809) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1803)
dexBlue.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#1814-1823) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1817)
dexBlue.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1830-1839) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1833)
dexBlue.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1846-1862) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1849)
dexBlue.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1868-1884) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1871)
dexBlue.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1891-1907) ignores return value by settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1894)
dexBlue.spendGasTokens(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2320-2332) ignores return value by restoreChildContractAddress(i).call() (0x000000000000541e251335090ac5b47176af4f7e.sol#2327)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

dexBlue.getBestReserve(address,uint256,address).bestReserve (0x000000000000541e251335090ac5b47176af4f7e.sol#2210) is a local variable never initialized
dexBlueSettlementModule.getBestReserve(address,uint256,address).bestReserve (0x000000000000541e251335090ac5b47176af4f7e.sol#1329) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

dexBlue.changeSingleSigWaitingPeriod(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2467-2474) should emit an event for: 
	- single_sig_waiting_period = waiting_period (0x000000000000541e251335090ac5b47176af4f7e.sol#2473) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

dexBlue.changeOwner(address).new_owner (0x000000000000541e251335090ac5b47176af4f7e.sol#2479) lacks a zero-check on :
		- owner = new_owner (0x000000000000541e251335090ac5b47176af4f7e.sol#2481)
dexBlue.nominateFeeCollector(address).collector (0x000000000000541e251335090ac5b47176af4f7e.sol#2572) lacks a zero-check on :
		- feeCollector = collector (0x000000000000541e251335090ac5b47176af4f7e.sol#2574)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660) has external calls inside a loop: (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#765-788) has external calls inside a loop: (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1030-1038)
dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144) has external calls inside a loop: Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1043)
dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1190-1199)
dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306) has external calls inside a loop: Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1204)
dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306) has external calls inside a loop: require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
dexBlueSettlementModule.getBestReserve(address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1328-1342) has external calls inside a loop: output = dexBlueReserve(public_reserve_arr[i]).getSwapOutput(sell_token,sell_amount,buy_token) (0x000000000000541e251335090ac5b47176af4f7e.sol#1334)
dexBlue.getBestReserve(address,uint256,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2209-2223) has external calls inside a loop: output = dexBlueReserve(public_reserve_arr[i]).getSwapOutput(sell_token,sell_amount,buy_token) (0x000000000000541e251335090ac5b47176af4f7e.sol#2215)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883):
	External calls:
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#874-878)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
	State variables written after the call(s):
	- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#850-854)
		- blocked_for_single_sig_withdrawal[makerOrder.sellToken][makerOrder.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#557)
		- blocked_for_single_sig_withdrawal[takerOrder.sellToken][takerOrder.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#558)
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#642)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#642)
Reentrancy in dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505):
	External calls:
	- Token(token).transferFrom(msg.sender,address(this),amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1498)
	State variables written after the call(s):
	- balances[token][msg.sender] += amount (0x000000000000541e251335090ac5b47176af4f7e.sol#1503)
Reentrancy in dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491):
	External calls:
	- Token(wrappedEtherContract).transferFrom(msg.sender,address(this),amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1475)
	- WETH(wrappedEtherContract).withdraw(amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1484)
	State variables written after the call(s):
	- balances[address(0)][msg.sender] += amount (0x000000000000541e251335090ac5b47176af4f7e.sol#1488)
Reentrancy in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660):
	External calls:
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#642)
Reentrancy in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757):
	External calls:
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (0x000000000000541e251335090ac5b47176af4f7e.sol#704-718)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#739)
Reentrancy in dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568):
	External calls:
	- Token(token).transfer(receiving_address,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1555)
	External calls sending eth:
	- require(bool,string)(receiving_address.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1550-1553)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[token][msg.sender] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#1562)
Reentrancy in dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144):
	External calls:
	- require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1030-1038)
	- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1043)
	- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	External calls sending eth:
	- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#1103)
Reentrancy in dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306):
	External calls:
	- require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1190-1199)
	- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1204)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	External calls sending eth:
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[order.sellToken][order.signee] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#1265)
Reentrancy in dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445):
	External calls:
	- Token(sell_token).transferFrom(msg.sender,reserve,sell_amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1404)
	- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1413-1418)
	External calls sending eth:
	- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1413-1418)
	State variables written after the call(s):
	- balances[buy_token][reserve] -= output (0x000000000000541e251335090ac5b47176af4f7e.sol#1424)
Reentrancy in dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703):
	External calls:
	- Token(token).transfer(account,amount - fee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1685)
	External calls sending eth:
	- require(bool,string)(account.send(amount - fee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1680-1683)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[token][account] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#1692)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883):
	External calls:
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#874-878)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
	Event emitted after the call(s):
	- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#649)
		- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
	- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#649)
		- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
	- LogTrade(makerOrder.sellToken,trade.makerAmount,takerOrder.sellToken,trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#560)
		- ! matchOrders(orders[makerIdentifier],orders[takerIdentifier],tradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#850-854)
	- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#645)
		- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
	- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#645)
		- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
	- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#647)
		- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
	- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#647)
		- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
	- LogTradeFailed() (0x000000000000541e251335090ac5b47176af4f7e.sol#855)
Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883):
	External calls:
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#874-878)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
	Event emitted after the call(s):
	- LogTradeFailed() (0x000000000000541e251335090ac5b47176af4f7e.sol#863)
Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883):
	External calls:
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchReserveWithReserve(reserves[makerIdentifier],reserves[takerIdentifier],reserveReserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#874-878)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
	Event emitted after the call(s):
	- LogTradeFailed() (0x000000000000541e251335090ac5b47176af4f7e.sol#871)
Reentrancy in dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883):
	External calls:
	- ! matchOrderWithReserve(orders[makerIdentifier],reserves[takerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#858-862)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchOrderWithReserve(orders[takerIdentifier],reserves[makerIdentifier],reserveTradeFromInput(tradeInput[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#866-870)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	Event emitted after the call(s):
	- LogTradeFailed() (0x000000000000541e251335090ac5b47176af4f7e.sol#879)
Reentrancy in dexBlue.depositToken(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1497-1505):
	External calls:
	- Token(token).transferFrom(msg.sender,address(this),amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1498)
	Event emitted after the call(s):
	- LogDeposit(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1504)
Reentrancy in dexBlue.depositWrappedEther(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1473-1491):
	External calls:
	- Token(wrappedEtherContract).transferFrom(msg.sender,address(this),amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1475)
	- WETH(wrappedEtherContract).withdraw(amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1484)
	Event emitted after the call(s):
	- LogDeposit(msg.sender,address(0),amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1490)
Reentrancy in dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623):
	External calls:
	- Token(token).transfer(msg.sender,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2611)
	External calls sending eth:
	- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#2606-2609)
	Event emitted after the call(s):
	- LogDirectWithdrawal(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2618)
Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offer(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1926-1934)
	- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1939)
	- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1970)
	- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1978-1983)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	External calls sending eth:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1965-1968)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	Event emitted after the call(s):
	- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1991)
	- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1992)
	- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1989)
Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088):
	External calls:
	- require(bool)(dexBlueReserve(takerReserve).offerWithData(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee,takerData) && balances[trade.takerToken][takerReserve] >= trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2017-2026)
	- Token(trade.takerToken).transfer(makerReserve,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2031)
	- Token(trade.makerToken).transfer(takerReserve,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2063)
	- dexBlueReserve(takerReserve).offerExecuted(trade.takerToken,trade.takerAmount,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2071-2076)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	External calls sending eth:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#2058-2061)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	Event emitted after the call(s):
	- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2084)
	- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2085)
	- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2082)
Reentrancy in dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760):
	External calls:
	- Token(token).transfer(msg.sender,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1749)
	External calls sending eth:
	- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1744-1747)
	Event emitted after the call(s):
	- LogSingleSigWithdrawal(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1756)
Reentrancy in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660):
	External calls:
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	Event emitted after the call(s):
	- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#649)
	- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#645)
	- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#647)
Reentrancy in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757):
	External calls:
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (0x000000000000541e251335090ac5b47176af4f7e.sol#704-718)
	Event emitted after the call(s):
	- LogDirectWithdrawal(reserve,order.sellToken,trade.orderAmount - trade.reserveFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#746)
	- LogTrade(order.sellToken,trade.orderAmount,order.buyToken,trade.reserveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#742)
	- LogTrade(order.buyToken,trade.reserveAmount,order.sellToken,trade.orderAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#744)
Reentrancy in dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568):
	External calls:
	- Token(token).transfer(receiving_address,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1555)
	External calls sending eth:
	- require(bool,string)(receiving_address.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1550-1553)
	Event emitted after the call(s):
	- LogWithdrawal(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1564)
Reentrancy in dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#906-922):
	External calls:
	- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput)) (0x000000000000541e251335090ac5b47176af4f7e.sol#909-919)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput)) (0x000000000000541e251335090ac5b47176af4f7e.sol#909-919)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
	Event emitted after the call(s):
	- LogTradeFailed() (0x000000000000541e251335090ac5b47176af4f7e.sol#920)
Reentrancy in dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#929-950):
	External calls:
	- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput),data) (0x000000000000541e251335090ac5b47176af4f7e.sol#936-947)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (0x000000000000541e251335090ac5b47176af4f7e.sol#704-718)
	- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput),data) (0x000000000000541e251335090ac5b47176af4f7e.sol#936-947)
		- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (0x000000000000541e251335090ac5b47176af4f7e.sol#704-718)
	Event emitted after the call(s):
	- LogTradeFailed() (0x000000000000541e251335090ac5b47176af4f7e.sol#948)
Reentrancy in dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144):
	External calls:
	- require(bool)(dexBlueReserve(reserve).offer(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1030-1038)
	- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1043)
	- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	External calls sending eth:
	- require(bool)(dexBlueReserve(reserve).trade.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	- require(bool)(dexBlueReserve(reserve).trade.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1050-1059)
	Event emitted after the call(s):
	- LogDirectWithdrawal(reserve,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1065)
	- LogTrade(trades[prev].giveToken,trades[prev].giveAmount,trades[i].giveToken,trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1106)
Reentrancy in dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306):
	External calls:
	- require(bool)(dexBlueReserve(reserve).offerWithData(trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee,data[i]) && balances[trades[i].giveToken][reserve] >= trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1190-1199)
	- Token(trades[prev].giveToken).transfer(reserve,receiveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1204)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	External calls sending eth:
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(receiveAmount)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	- require(bool)(dexBlueReserve(reserve).tradeWithData.value(0)(trades[prev].giveToken,receiveAmount,trades[i].giveToken,trades[i].giveAmount - trades[i].rebate,data[i])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1211-1221)
	Event emitted after the call(s):
	- LogDirectWithdrawal(reserve,trades[prev].giveToken,trades[prev].giveAmount - trades[i].fee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1227)
	- LogTrade(trades[prev].giveToken,trades[prev].giveAmount,trades[i].giveToken,trades[i].giveAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1268)
Reentrancy in dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445):
	External calls:
	- Token(sell_token).transferFrom(msg.sender,reserve,sell_amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1404)
	- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1413-1418)
	- Token(buy_token).transfer(msg.sender,output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1432)
	External calls sending eth:
	- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1413-1418)
	- require(bool,string)(msg.sender.send(output),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1427-1430)
	Event emitted after the call(s):
	- LogSwap(sell_token,sell_amount,buy_token,output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1439)
Reentrancy in dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703):
	External calls:
	- Token(token).transfer(account,amount - fee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1685)
	External calls sending eth:
	- require(bool,string)(account.send(amount - fee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1680-1683)
	Event emitted after the call(s):
	- LogWithdrawal(account,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1694)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

dexBlueSettlementModule.matchOrders(dexBlueStructs.Order,dexBlueStructs.Order,dexBlueStructs.Trade) (0x000000000000541e251335090ac5b47176af4f7e.sol#497-566) uses timestamp for comparisons
	Dangerous comparisons:
	- makerOrder.buyToken == takerOrder.sellToken && takerOrder.buyToken == makerOrder.sellToken && makerOrder.expiry > block.timestamp && takerOrder.expiry > block.timestamp && balances[makerOrder.sellToken][makerOrder.signee] >= trade.makerAmount - trade.makerRebate && balances[takerOrder.sellToken][takerOrder.signee] >= trade.takerAmount && trade.makerAmount - trade.makerRebate <= makerOrder.sellAmount * trade.takerAmount / makerOrder.buyAmount + 1 && trade.takerAmount <= takerOrder.sellAmount * trade.makerAmount / takerOrder.buyAmount + 1 && makerOrder.sellAmount > makerOrderMatched && takerOrder.sellAmount > takerOrderMatched && trade.makerAmount - trade.makerRebate + makerOrderMatched <= makerOrder.sellAmount && trade.takerAmount + takerOrderMatched <= takerOrder.sellAmount && trade.makerFee <= trade.takerAmount / 20 && trade.takerFee <= trade.makerAmount / 20 && trade.makerRebate <= trade.takerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#508-536)
dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660) uses timestamp for comparisons
	Dangerous comparisons:
	- balances[order.sellToken][order.signee] >= trade.orderAmount - trade.orderRebate && order.expiry > block.timestamp && trade.orderAmount - trade.orderRebate <= order.sellAmount * trade.reserveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trade.orderAmount - trade.orderRebate + orderMatched <= order.sellAmount && trade.orderFee <= trade.reserveAmount / 20 && trade.reserveFee <= trade.orderAmount / 20 && trade.orderRebate <= trade.reserveFee && trade.reserveRebate <= trade.orderFee (0x000000000000541e251335090ac5b47176af4f7e.sol#584-604)
dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757) uses timestamp for comparisons
	Dangerous comparisons:
	- balances[order.sellToken][order.signee] >= trade.orderAmount - trade.orderRebate && order.expiry > block.timestamp && trade.orderAmount - trade.orderRebate <= order.sellAmount * trade.reserveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trade.orderAmount - trade.orderRebate + orderMatched <= order.sellAmount && trade.orderFee <= trade.reserveAmount / 20 && trade.reserveFee <= trade.orderAmount / 20 && trade.orderRebate <= trade.reserveFee && trade.reserveRebate <= trade.orderFee (0x000000000000541e251335090ac5b47176af4f7e.sol#680-700)
dexBlueSettlementModule.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#996-1144) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(order.buyToken == trades[prev].giveToken && order.sellToken == trades[i].giveToken && order.expiry > block.timestamp && balances[order.sellToken][order.signee] >= trades[i].giveAmount - trades[i].rebate && trades[i].giveAmount - trades[i].rebate <= order.sellAmount * trades[prev].giveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trades[i].giveAmount - trades[i].rebate + orderMatched <= order.sellAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1072-1091)
dexBlueSettlementModule.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1152-1306) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(order.buyToken == trades[prev].giveToken && order.sellToken == trades[i].giveToken && order.expiry > block.timestamp && balances[order.sellToken][order.signee] >= trades[i].giveAmount - trades[i].rebate && trades[i].giveAmount - trades[i].rebate <= order.sellAmount * trades[prev].giveAmount / order.buyAmount + 1 && order.sellAmount > orderMatched && trades[i].giveAmount - trades[i].rebate + orderMatched <= order.sellAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1234-1253)
dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1352-1369) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((deadline == 0 || deadline > block.timestamp),Call deadline exceeded.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1353-1359)
dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((deadline == 0 || deadline > block.timestamp),Call deadline exceeded.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1380-1386)
dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760) uses timestamp for comparisons
	Dangerous comparisons:
	- balances[token][msg.sender] >= amount && ((blocked_for_single_sig_withdrawal[token][msg.sender] >= amount && last_blocked_timestamp[msg.sender] + single_sig_waiting_period <= block.timestamp) || single_sig_waiting_period == 0) (0x000000000000541e251335090ac5b47176af4f7e.sol#1728-1735)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

dexBlueUtils.checkERC20TransferSuccess() (0x000000000000541e251335090ac5b47176af4f7e.sol#180-195) uses assembly
	- INLINE ASM (0x000000000000541e251335090ac5b47176af4f7e.sol#183-192)
dexBlue.createChildContract() (0x000000000000541e251335090ac5b47176af4f7e.sol#2337-2343) uses assembly
	- INLINE ASM (0x000000000000541e251335090ac5b47176af4f7e.sol#2338-2342)
dexBlue.restoreChildContractAddress(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2349-2398) uses assembly
	- INLINE ASM (0x000000000000541e251335090ac5b47176af4f7e.sol#2387-2394)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

dexBlue.removePublicReserveAddress(address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2504-2519) has costly operations inside a loop:
	- delete public_reserve_arr[public_reserve_arr.length - 1] (0x000000000000541e251335090ac5b47176af4f7e.sol#2513)
dexBlue.removeTokenAddressFromArr(address) (0x000000000000541e251335090ac5b47176af4f7e.sol#2537-2550) has costly operations inside a loop:
	- delete token_arr[token_arr.length - 1] (0x000000000000541e251335090ac5b47176af4f7e.sol#2544)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Version constraint 0.5.11 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- YulOptimizerRedundantAssignmentBreakContinue0.5.
It is used by:
	- 0.5.11 (0x000000000000541e251335090ac5b47176af4f7e.sol#1)
solc-0.5.11 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in dexBlueSettlementModule.matchOrderWithReserve(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#574-660):
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTrade.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve))) (0x000000000000541e251335090ac5b47176af4f7e.sol#608-621)
Low level call in dexBlueSettlementModule.matchOrderWithReserveWithData(dexBlueStructs.Order,address,dexBlueStructs.ReserveTrade,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#669-757):
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveTradeWithData.selector,abi.encode(order.sellToken,trade.orderAmount - trade.reserveFee,order.buyToken,trade.reserveAmount - trade.reserveRebate,reserve,data))) (0x000000000000541e251335090ac5b47176af4f7e.sol#704-718)
Low level call in dexBlueSettlementModule.matchReserveWithReserve(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#765-788):
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTrade.selector,abi.encode(makerReserve,takerReserve,trade))) (0x000000000000541e251335090ac5b47176af4f7e.sol#771-782)
Low level call in dexBlueSettlementModule.matchReserveWithReserveWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#799-826):
	- (txSuccess,returnData) = address(this).call.gas(trade.gasLimit)(abi.encodePacked(dexBlue(address(0)).executeReserveReserveTradeWithData.selector,abi.encode(makerReserve,takerReserve,trade,makerData,takerData))) (0x000000000000541e251335090ac5b47176af4f7e.sol#807-820)
Low level call in dexBlue.settleTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#1769-1778):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1772)
Low level call in dexBlue.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#1784-1793):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1787)
Low level call in dexBlue.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1800-1809):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1803)
Low level call in dexBlue.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#1814-1823):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1817)
Low level call in dexBlue.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1830-1839):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1833)
Low level call in dexBlue.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1846-1862):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1849)
Low level call in dexBlue.settleRingTrade(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1868-1884):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1871)
Low level call in dexBlue.settleRingTradeWithData(dexBlueStructs.OrderInputPacked[],dexBlueStructs.RingTradeInputPacked[],bytes32[][]) (0x000000000000541e251335090ac5b47176af4f7e.sol#1891-1907):
	- settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#1894)
Low level call in dexBlue.swap(address,uint256,address,uint256,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2233-2240):
	- (success,returnData) = settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#2235)
Low level call in dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2250-2257):
	- (success,returnData) = settlementModuleAddress.delegatecall(msg.data) (0x000000000000541e251335090ac5b47176af4f7e.sol#2252)
Low level call in dexBlue.spendGasTokens(uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2320-2332):
	- restoreChildContractAddress(i).call() (0x000000000000541e251335090ac5b47176af4f7e.sol#2327)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Contract dexBlueEvents (0x000000000000541e251335090ac5b47176af4f7e.sol#4-73) is not in CapWords
Contract dexBlueStorage (0x000000000000541e251335090ac5b47176af4f7e.sol#75-102) is not in CapWords
Variable dexBlueStorage.blocked_for_single_sig_withdrawal (0x000000000000541e251335090ac5b47176af4f7e.sol#79) is not in mixedCase
Variable dexBlueStorage.last_blocked_timestamp (0x000000000000541e251335090ac5b47176af4f7e.sol#80) is not in mixedCase
Variable dexBlueStorage.processed_withdrawals (0x000000000000541e251335090ac5b47176af4f7e.sol#82) is not in mixedCase
Variable dexBlueStorage.token_indices (0x000000000000541e251335090ac5b47176af4f7e.sol#88) is not in mixedCase
Variable dexBlueStorage.token_arr (0x000000000000541e251335090ac5b47176af4f7e.sol#89) is not in mixedCase
Variable dexBlueStorage.reserve_indices (0x000000000000541e251335090ac5b47176af4f7e.sol#92) is not in mixedCase
Variable dexBlueStorage.public_reserves (0x000000000000541e251335090ac5b47176af4f7e.sol#93) is not in mixedCase
Variable dexBlueStorage.public_reserve_arr (0x000000000000541e251335090ac5b47176af4f7e.sol#94) is not in mixedCase
Variable dexBlueStorage.single_sig_waiting_period (0x000000000000541e251335090ac5b47176af4f7e.sol#101) is not in mixedCase
Contract dexBlueUtils (0x000000000000541e251335090ac5b47176af4f7e.sol#104-196) is not in CapWords
Contract dexBlueStructs (0x000000000000541e251335090ac5b47176af4f7e.sol#198-487) is not in CapWords
Struct dexBlueStructs.EIP712_Domain (0x000000000000541e251335090ac5b47176af4f7e.sol#201-206) is not in CapWords
Variable dexBlueStructs.EIP712_DOMAIN_SEPARATOR (0x000000000000541e251335090ac5b47176af4f7e.sol#208) is not in mixedCase
Contract dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446) is not in CapWords
Parameter dexBlueSettlementModule.getSwapOutput(address,uint256,address).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1317) is not in mixedCase
Parameter dexBlueSettlementModule.getSwapOutput(address,uint256,address).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#1317) is not in mixedCase
Parameter dexBlueSettlementModule.getSwapOutput(address,uint256,address).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1317) is not in mixedCase
Parameter dexBlueSettlementModule.getBestReserve(address,uint256,address).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1328) is not in mixedCase
Parameter dexBlueSettlementModule.getBestReserve(address,uint256,address).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#1328) is not in mixedCase
Parameter dexBlueSettlementModule.getBestReserve(address,uint256,address).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1328) is not in mixedCase
Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1352) is not in mixedCase
Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#1352) is not in mixedCase
Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1352) is not in mixedCase
Parameter dexBlueSettlementModule.swap(address,uint256,address,uint256,uint256).min_output (0x000000000000541e251335090ac5b47176af4f7e.sol#1352) is not in mixedCase
Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1379) is not in mixedCase
Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#1379) is not in mixedCase
Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#1379) is not in mixedCase
Parameter dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256).min_output (0x000000000000541e251335090ac5b47176af4f7e.sol#1379) is not in mixedCase
Contract dexBlue (0x000000000000541e251335090ac5b47176af4f7e.sol#1448-2624) is not in CapWords
Parameter dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address).receiving_address (0x000000000000541e251335090ac5b47176af4f7e.sol#1530) is not in mixedCase
Parameter dexBlue.multiSigTransfer(address,uint256,uint64,uint8,bytes32,bytes32,address).receiving_address (0x000000000000541e251335090ac5b47176af4f7e.sol#1579) is not in mixedCase
Parameter dexBlue.getSwapOutput(address,uint256,address).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2198) is not in mixedCase
Parameter dexBlue.getSwapOutput(address,uint256,address).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2198) is not in mixedCase
Parameter dexBlue.getSwapOutput(address,uint256,address).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2198) is not in mixedCase
Parameter dexBlue.getBestReserve(address,uint256,address).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2209) is not in mixedCase
Parameter dexBlue.getBestReserve(address,uint256,address).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2209) is not in mixedCase
Parameter dexBlue.getBestReserve(address,uint256,address).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2209) is not in mixedCase
Parameter dexBlue.swap(address,uint256,address,uint256,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2233) is not in mixedCase
Parameter dexBlue.swap(address,uint256,address,uint256,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2233) is not in mixedCase
Parameter dexBlue.swap(address,uint256,address,uint256,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2233) is not in mixedCase
Parameter dexBlue.swap(address,uint256,address,uint256,uint256).min_output (0x000000000000541e251335090ac5b47176af4f7e.sol#2233) is not in mixedCase
Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2250) is not in mixedCase
Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2250) is not in mixedCase
Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2250) is not in mixedCase
Parameter dexBlue.swapWithReserve(address,uint256,address,uint256,address,uint256).min_output (0x000000000000541e251335090ac5b47176af4f7e.sol#2250) is not in mixedCase
Parameter dexBlue.changeSingleSigWaitingPeriod(uint256).waiting_period (0x000000000000541e251335090ac5b47176af4f7e.sol#2467) is not in mixedCase
Parameter dexBlue.changeOwner(address).new_owner (0x000000000000541e251335090ac5b47176af4f7e.sol#2479) is not in mixedCase
Parameter dexBlue.cacheReserveAddress(address,uint256,bool).is_public (0x000000000000541e251335090ac5b47176af4f7e.sol#2489) is not in mixedCase
Constant dexBlue.settlementModuleAddress (0x000000000000541e251335090ac5b47176af4f7e.sol#1450) is not in UPPER_CASE_WITH_UNDERSCORES
Constant dexBlue.wrappedEtherContract (0x000000000000541e251335090ac5b47176af4f7e.sol#1472) is not in UPPER_CASE_WITH_UNDERSCORES
Variable dexBlue.gas_token_nonce_head (0x000000000000541e251335090ac5b47176af4f7e.sol#2297) is not in mixedCase
Variable dexBlue.gas_token_nonce_tail (0x000000000000541e251335090ac5b47176af4f7e.sol#2298) is not in mixedCase
Contract dexBlueReserve (0x000000000000541e251335090ac5b47176af4f7e.sol#2627-2648) is not in CapWords
Parameter dexBlueReserve.trade(address,uint256,address,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2629) is not in mixedCase
Parameter dexBlueReserve.trade(address,uint256,address,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2629) is not in mixedCase
Parameter dexBlueReserve.trade(address,uint256,address,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2629) is not in mixedCase
Parameter dexBlueReserve.trade(address,uint256,address,uint256).buy_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2629) is not in mixedCase
Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2632) is not in mixedCase
Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2632) is not in mixedCase
Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2632) is not in mixedCase
Parameter dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]).buy_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2632) is not in mixedCase
Parameter dexBlueReserve.offer(address,uint256,address,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2635) is not in mixedCase
Parameter dexBlueReserve.offer(address,uint256,address,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2635) is not in mixedCase
Parameter dexBlueReserve.offer(address,uint256,address,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2635) is not in mixedCase
Parameter dexBlueReserve.offer(address,uint256,address,uint256).buy_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2635) is not in mixedCase
Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2638) is not in mixedCase
Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2638) is not in mixedCase
Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2638) is not in mixedCase
Parameter dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]).buy_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2638) is not in mixedCase
Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2641) is not in mixedCase
Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2641) is not in mixedCase
Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2641) is not in mixedCase
Parameter dexBlueReserve.offerExecuted(address,uint256,address,uint256).buy_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2641) is not in mixedCase
Parameter dexBlueReserve.swap(address,uint256,address,uint256).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2644) is not in mixedCase
Parameter dexBlueReserve.swap(address,uint256,address,uint256).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2644) is not in mixedCase
Parameter dexBlueReserve.swap(address,uint256,address,uint256).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2644) is not in mixedCase
Parameter dexBlueReserve.swap(address,uint256,address,uint256).min_output (0x000000000000541e251335090ac5b47176af4f7e.sol#2644) is not in mixedCase
Parameter dexBlueReserve.getSwapOutput(address,uint256,address).sell_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2647) is not in mixedCase
Parameter dexBlueReserve.getSwapOutput(address,uint256,address).sell_amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2647) is not in mixedCase
Parameter dexBlueReserve.getSwapOutput(address,uint256,address).buy_token (0x000000000000541e251335090ac5b47176af4f7e.sol#2647) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in dexBlue.directWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#2595-2623):
	External calls:
	- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#2606-2609)
	Event emitted after the call(s):
	- LogDirectWithdrawal(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2618)
Reentrancy in dexBlue.executeReserveReserveTrade(address,address,dexBlueStructs.ReserveReserveTrade) (0x000000000000541e251335090ac5b47176af4f7e.sol#1916-1995):
	External calls:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1965-1968)
	External calls sending eth:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1965-1968)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	- require(bool)(dexBlueReserve(makerReserve).trade.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1947-1959)
	State variables written after the call(s):
	- balances[trade.makerToken][feeCollector] += trade.takerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#1986)
	- balances[trade.takerToken][feeCollector] += trade.makerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#1987)
	Event emitted after the call(s):
	- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1991)
	- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#1992)
	- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1989)
Reentrancy in dexBlue.executeReserveReserveTradeWithData(address,address,dexBlueStructs.ReserveReserveTrade,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2005-2088):
	External calls:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#2058-2061)
	External calls sending eth:
	- require(bool,string)(takerReserve.send(trade.makerAmount - trade.takerFee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#2058-2061)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(trade.takerAmount - trade.makerFee)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	- require(bool)(dexBlueReserve(makerReserve).tradeWithData.value(0)(trade.takerToken,trade.takerAmount - trade.makerFee,trade.makerToken,trade.makerAmount,makerData) && balances[trade.makerToken][makerReserve] >= trade.makerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2039-2052)
	State variables written after the call(s):
	- balances[trade.makerToken][feeCollector] += trade.takerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#2079)
	- balances[trade.takerToken][feeCollector] += trade.makerFee (0x000000000000541e251335090ac5b47176af4f7e.sol#2080)
	Event emitted after the call(s):
	- LogDirectWithdrawal(makerReserve,trade.takerToken,trade.takerAmount - trade.makerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2084)
	- LogDirectWithdrawal(takerReserve,trade.makerToken,trade.makerAmount - trade.takerFee) (0x000000000000541e251335090ac5b47176af4f7e.sol#2085)
	- LogTrade(trade.makerToken,trade.makerAmount,trade.takerToken,trade.takerAmount) (0x000000000000541e251335090ac5b47176af4f7e.sol#2082)
Reentrancy in dexBlue.initiateSingleSigWithdrawal(address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1726-1760):
	External calls:
	- require(bool,string)(msg.sender.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1744-1747)
	Event emitted after the call(s):
	- LogSingleSigWithdrawal(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1756)
Reentrancy in dexBlue.multiSigSend(address,uint256,uint64,uint8,bytes32,bytes32,address) (0x000000000000541e251335090ac5b47176af4f7e.sol#1530-1568):
	External calls:
	- require(bool,string)(receiving_address.send(amount),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1550-1553)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[token][msg.sender] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#1562)
	Event emitted after the call(s):
	- LogWithdrawal(msg.sender,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1564)
Reentrancy in dexBlueSettlementModule.swapWithReserve(address,uint256,address,uint256,address,uint256) (0x000000000000541e251335090ac5b47176af4f7e.sol#1379-1445):
	External calls:
	- require(bool,string)(msg.sender.send(output),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1427-1430)
	External calls sending eth:
	- output = dexBlueReserve(reserve).swap.value(msg.value)(sell_token,sell_amount,buy_token,min_output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1413-1418)
	- require(bool,string)(msg.sender.send(output),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1427-1430)
	Event emitted after the call(s):
	- LogSwap(sell_token,sell_amount,buy_token,output) (0x000000000000541e251335090ac5b47176af4f7e.sol#1439)
Reentrancy in dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703):
	External calls:
	- require(bool,string)(account.send(amount - fee),Sending of ETH failed.) (0x000000000000541e251335090ac5b47176af4f7e.sol#1680-1683)
	State variables written after the call(s):
	- blocked_for_single_sig_withdrawal[token][account] = 0 (0x000000000000541e251335090ac5b47176af4f7e.sol#1692)
	- spendGasTokens(uint8(packedInput2[12])) (0x000000000000541e251335090ac5b47176af4f7e.sol#1698)
		- gas_token_nonce_tail = tail + amount (0x000000000000541e251335090ac5b47176af4f7e.sol#2330)
	Event emitted after the call(s):
	- LogWithdrawal(account,token,amount) (0x000000000000541e251335090ac5b47176af4f7e.sol#1694)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#254-314) uses literals with too many digits:
	- order = Order({sellToken:tokens[uint256(orderInput.packedInput2 >> 240)],sellAmount:uint256(orderInput.packedInput1 >> 128),buyToken:tokens[uint256((orderInput.packedInput2 & 0x0000ffff00000000000000000000000000000000000000000000000000000000) >> 224)],buyAmount:uint256(orderInput.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),expiry:uint256((orderInput.packedInput2 & 0x00000000ffffffff000000000000000000000000000000000000000000000000) >> 192),hash:0x0,signee:address(0x0)}) (0x000000000000541e251335090ac5b47176af4f7e.sol#256-264)
dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#254-314) uses literals with too many digits:
	- order.hash = keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,keccak256(bytes)(abi.encodePacked(order.sellToken,uint128(order.sellAmount),order.buyToken,uint128(order.buyAmount),uint32(order.expiry),uint64(uint256((orderInput.packedInput2 & 0x0000000000000000ffffffffffffffff00000000000000000000000000000000) >> 128)),address(this))))) (0x000000000000541e251335090ac5b47176af4f7e.sol#270-281)
dexBlueStructs.orderFromInput(dexBlueStructs.OrderInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#254-314) uses literals with too many digits:
	- order.hash = keccak256(bytes)(abi.encodePacked(,EIP712_DOMAIN_SEPARATOR,keccak256(bytes)(abi.encode(EIP712_ORDER_TYPEHASH,order.sellToken,order.sellAmount,order.buyToken,order.buyAmount,order.expiry,uint256((orderInput.packedInput2 & 0x0000000000000000ffffffffffffffff00000000000000000000000000000000) >> 128))))) (0x000000000000541e251335090ac5b47176af4f7e.sol#283-295)
dexBlueStructs.tradeFromInput(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#383-391) uses literals with too many digits:
	- Trade({makerAmount:uint256(packed.packedInput1 >> 128),takerAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerFee:uint256(packed.packedInput2 >> 128),takerFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerRebate:uint256(packed.packedInput3 >> 128)}) (0x000000000000541e251335090ac5b47176af4f7e.sol#384-390)
dexBlueStructs.reserveTradeFromInput(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#397-423) uses literals with too many digits:
	- ReserveTrade({orderAmount:uint256(packed.packedInput1 >> 128),reserveAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),orderFee:uint256(packed.packedInput2 >> 128),reserveFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),orderRebate:uint256((packed.packedInput3 & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128),reserveRebate:0,orderIsMaker:true,gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)}) (0x000000000000541e251335090ac5b47176af4f7e.sol#400-409)
dexBlueStructs.reserveTradeFromInput(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#397-423) uses literals with too many digits:
	- ReserveTrade({orderAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),reserveAmount:uint256(packed.packedInput1 >> 128),orderFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),reserveFee:uint256(packed.packedInput2 >> 128),orderRebate:0,reserveRebate:uint256((packed.packedInput3 & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128),orderIsMaker:false,gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)}) (0x000000000000541e251335090ac5b47176af4f7e.sol#412-421)
dexBlueStructs.reserveReserveTradeFromInput(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#429-439) uses literals with too many digits:
	- ReserveReserveTrade({makerToken:tokens[uint256((packed.packedInput3 & 0x000000000000000000000000000000000000000000ffff000000000000000000) >> 72)],takerToken:tokens[uint256((packed.packedInput3 & 0x0000000000000000000000000000000000000000000000ffff00000000000000) >> 56)],makerAmount:uint256(packed.packedInput1 >> 128),takerAmount:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),makerFee:uint256(packed.packedInput2 >> 128),takerFee:uint256(packed.packedInput2 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),gasLimit:uint256((packed.packedInput3 & 0x00000000000000000000000000000000000000000000000000ffffff00000000) >> 32)}) (0x000000000000541e251335090ac5b47176af4f7e.sol#430-438)
dexBlueStructs.ringTradeFromInput(dexBlueStructs.RingTradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#476-486) uses literals with too many digits:
	- RingTrade({isReserve:(packed.packedInput2[16] == bytes1(0x01)),identifier:uint256((packed.packedInput2 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104),giveToken:tokens[uint256((packed.packedInput2 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],giveAmount:uint256(packed.packedInput1 >> 128),fee:uint256(packed.packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff),rebate:uint256(packed.packedInput2 >> 128),gasLimit:uint256((packed.packedInput2 & 0x000000000000000000000000000000000000000000ffffff0000000000000000) >> 64)}) (0x000000000000541e251335090ac5b47176af4f7e.sol#477-485)
dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883) uses literals with too many digits:
	- makerIdentifier = uint256((tradeInput[i].packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104) (0x000000000000541e251335090ac5b47176af4f7e.sol#846)
dexBlueSettlementModule.batchSettleTrades(dexBlueStructs.OrderInputPacked[],dexBlueStructs.TradeInputPacked[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#832-883) uses literals with too many digits:
	- takerIdentifier = uint256((tradeInput[i].packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88) (0x000000000000541e251335090ac5b47176af4f7e.sol#847)
dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#906-922) uses literals with too many digits:
	- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput)) (0x000000000000541e251335090ac5b47176af4f7e.sol#909-919)
dexBlueSettlementModule.settleReserveTrade(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#906-922) uses literals with too many digits:
	- ! matchOrderWithReserve(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput)) (0x000000000000541e251335090ac5b47176af4f7e.sol#909-919)
dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#929-950) uses literals with too many digits:
	- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserveTradeFromInput(tradeInput),data) (0x000000000000541e251335090ac5b47176af4f7e.sol#936-947)
dexBlueSettlementModule.settleReserveTradeWithData(dexBlueStructs.OrderInputPacked,dexBlueStructs.TradeInputPacked,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#929-950) uses literals with too many digits:
	- ! matchOrderWithReserveWithData(orderFromInput(orderInput),reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveTradeFromInput(tradeInput),data) (0x000000000000541e251335090ac5b47176af4f7e.sol#936-947)
dexBlueSettlementModule.settleReserveReserveTrade(dexBlueStructs.TradeInputPacked) (0x000000000000541e251335090ac5b47176af4f7e.sol#955-967) uses literals with too many digits:
	- ! matchReserveWithReserve(reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveReserveTradeFromInput(tradeInput)) (0x000000000000541e251335090ac5b47176af4f7e.sol#960-964)
dexBlueSettlementModule.settleReserveReserveTradeWithData(dexBlueStructs.TradeInputPacked,bytes32[],bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#974-990) uses literals with too many digits:
	- ! matchReserveWithReserveWithData(reserves[uint256((tradeInput.packedInput3 & 0x0000000000000000000000000000000000ffff00000000000000000000000000) >> 104)],reserves[uint256((tradeInput.packedInput3 & 0x00000000000000000000000000000000000000ffff0000000000000000000000) >> 88)],reserveReserveTradeFromInput(tradeInput),makerData,takerData) (0x000000000000541e251335090ac5b47176af4f7e.sol#981-987)
dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703) uses literals with too many digits:
	- fee = uint256(packedInput1 & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff) (0x000000000000541e251335090ac5b47176af4f7e.sol#1638)
dexBlue.userSigWithdrawal(bytes32,bytes32,bytes32,bytes32) (0x000000000000541e251335090ac5b47176af4f7e.sol#1621-1703) uses literals with too many digits:
	- nonce = uint64(uint256((packedInput2 & 0x0000ffffffffffffffff00000000000000000000000000000000000000000000) >> 176)) (0x000000000000541e251335090ac5b47176af4f7e.sol#1640)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

dexBlueStorage.processed_withdrawals (0x000000000000541e251335090ac5b47176af4f7e.sol#82) is never used in dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446)
dexBlueStorage.owner (0x000000000000541e251335090ac5b47176af4f7e.sol#96) is never used in dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446)
dexBlueStorage.feeCollectorLocked (0x000000000000541e251335090ac5b47176af4f7e.sol#100) is never used in dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446)
dexBlueStorage.single_sig_waiting_period (0x000000000000541e251335090ac5b47176af4f7e.sol#101) is never used in dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446)
dexBlueStructs.EIP712_DOMAIN_TYPEHASH (0x000000000000541e251335090ac5b47176af4f7e.sol#207) is never used in dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446)
dexBlueStructs.EIP712_WITHDRAWAL_TYPEHASH (0x000000000000541e251335090ac5b47176af4f7e.sol#212) is never used in dexBlueSettlementModule (0x000000000000541e251335090ac5b47176af4f7e.sol#489-1446)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Loop condition i < public_reserve_arr.length (0x000000000000541e251335090ac5b47176af4f7e.sol#1333) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < public_reserve_arr.length (0x000000000000541e251335090ac5b47176af4f7e.sol#2214) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

Token.decimals (0x000000000000541e251335090ac5b47176af4f7e.sol#2695) should be constant 
Token.name (0x000000000000541e251335090ac5b47176af4f7e.sol#2696) should be constant 
dexBlueStorage.feeCollector (0x000000000000541e251335090ac5b47176af4f7e.sol#99) should be constant 
dexBlueStorage.feeCollectorLocked (0x000000000000541e251335090ac5b47176af4f7e.sol#100) should be constant 
dexBlueStorage.marketActive (0x000000000000541e251335090ac5b47176af4f7e.sol#98) should be constant 
dexBlueStorage.owner (0x000000000000541e251335090ac5b47176af4f7e.sol#96) should be constant 
dexBlueStorage.single_sig_waiting_period (0x000000000000541e251335090ac5b47176af4f7e.sol#101) should be constant 
dexBlueStructs.EIP712_DOMAIN_SEPARATOR (0x000000000000541e251335090ac5b47176af4f7e.sol#208) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

tradeWithData(address,uint256,address,uint256,bytes32[]) should be declared external:
	- dexBlueReserve.tradeWithData(address,uint256,address,uint256,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2632)
Moreover, the following function parameters should change its data location:
data location should be calldata
offerWithData(address,uint256,address,uint256,bytes32[]) should be declared external:
	- dexBlueReserve.offerWithData(address,uint256,address,uint256,bytes32[]) (0x000000000000541e251335090ac5b47176af4f7e.sol#2638)
Moreover, the following function parameters should change its data location:
data location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x000000000000541e251335090ac5b47176af4f7e.sol analyzed (9 contracts with 94 detectors), 241 result(s) found

real	0m15.321s
user	0m14.871s
sys	0m0.444s
