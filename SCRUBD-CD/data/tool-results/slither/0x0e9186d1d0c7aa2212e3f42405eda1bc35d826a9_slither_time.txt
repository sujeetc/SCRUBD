'solc --version' running
'solc ./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:95:5: Warning: No visibility specified. Defaulting to "public".
    function dividendsAcc(address _dividendsAccount) onlyOwner{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:144:5: Warning: No visibility specified. Defaulting to "public".
    function invested() constant returns (uint){
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:279:5: Warning: No visibility specified. Defaulting to "public".
    function bonusInfo() constant returns (uint,uint){
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:291:5: Warning: No visibility specified. Defaulting to "public".
    function ICOTimer() constant returns (uint){
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:323:5: Warning: No visibility specified. Defaulting to "public".
    function ICOaddress(address _t) onlyOwner{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:329:5: Warning: No visibility specified. Defaulting to "public".
    function() payable{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:342:5: Warning: No visibility specified. Defaulting to "public".
    function thisBalance() constant returns (uint){
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:346:5: Warning: No visibility specified. Defaulting to "public".
    function updatePaid(address from, address to, uint perc) {
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:384:5: Warning: No visibility specified. Defaulting to "public".
    function () payable{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:396:5: Warning: No visibility specified. Defaulting to "public".
    function Play() payable{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:409:5: Warning: No visibility specified. Defaulting to "public".
    function balances() constant returns(uint, uint time){
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:414:5: Warning: No visibility specified. Defaulting to "public".
    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:473:5: Warning: No visibility specified. Defaulting to "public".
    function () payable{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:485:5: Warning: No visibility specified. Defaulting to "public".
    function Play() payable{
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:498:5: Warning: No visibility specified. Defaulting to "public".
    function balances() constant returns(uint, uint time){
    ^
Spanning multiple lines.
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol:503:5: Warning: No visibility specified. Defaulting to "public".
    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {
    ^
Spanning multiple lines.


Ethernational.startDate (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#112) is never initialized. It is used in:
	- Ethernational.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#238-256)
	- Ethernational.buyEIT() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#258-276)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

dividendsContract.collectDividends(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#332-340) performs a multiplication on the result of a division:
	- Ownes = dc.balanceOf(member) / 1000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#334)
	- payout = (((address(this).balance + totalPaid) / totalSupply) * Ownes) - paid[member] (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#335)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Owned.transferOwnership(address)._newOwner (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#83) lacks a zero-check on :
		- newOwner = _newOwner (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#84)
Owned.dividendsAcc(address)._dividendsAccount (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#95) lacks a zero-check on :
		- dividendsAccount = _dividendsAccount (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#97)
dividendsContract.ICOaddress(address)._t (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#323) lacks a zero-check on :
		- ICOaddress = _t (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#325)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in dividendsContract.collectDividends(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#332-340):
	External calls:
	- require(bool)(msg.sender == member && dc.endDate() < now) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#333)
	- Ownes = dc.balanceOf(member) / 1000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#334)
	External calls sending eth:
	- member.transfer(payout) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#336)
	State variables written after the call(s):
	- paid[member] = paid[member] + payout (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#337)
	- totalPaid = totalPaid + payout (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#338)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Ethernational.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#238-256) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now >= startDate && now <= endDate && msg.value > 1000000000000000) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#239)
	- now <= bonus1Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#241)
	- now <= bonus2Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#243)
	- now <= bonus3Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#245)
Ethernational.buyEIT() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#258-276) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now >= startDate && now <= endDate && msg.value > 1000000000000000) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#259)
	- now <= bonus1Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#261)
	- now <= bonus2Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#263)
	- now <= bonus3Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#265)
Ethernational.bonusInfo() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#279-289) uses timestamp for comparisons
	Dangerous comparisons:
	- now <= bonus1Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#280)
	- now <= bonus2Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#282)
	- now <= bonus3Ends (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#284)
Ethernational.ICOTimer() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#291-295) uses timestamp for comparisons
	Dangerous comparisons:
	- now < endDate (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#292)
dividendsContract.collectDividends(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#332-340) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(msg.sender == member && dc.endDate() < now) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#333)
DailyDraw.start(bytes32) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#377-382) uses timestamp for comparisons
	Dangerous comparisons:
	- timeLimit < 1 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#378)
DailyDraw.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#384-394) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now < (timeLimit + 86400)) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#386)
DailyDraw.Play() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#396-406) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now < (timeLimit + 86400)) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#398)
DailyDraw.winner(uint256,bytes32) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#414-441) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((timeLimit + 86400) < now && number == keccak256()(_theNumber)) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#415)
WeeklyDraw.start(bytes32) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#466-471) uses timestamp for comparisons
	Dangerous comparisons:
	- timeLimit < 1 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#467)
WeeklyDraw.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#473-483) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now < (timeLimit + 604800)) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#475)
WeeklyDraw.Play() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#485-495) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now < (timeLimit + 604800)) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#487)
WeeklyDraw.winner(uint256,bytes32) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#503-530) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((timeLimit + 604800) < now && number == keccak256()(_theNumber)) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#504)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SafeMath.safeDiv(uint256,uint256) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#30-33) is never used and should be removed
SafeMath.safeMul(uint256,uint256) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#26-29) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint ^0.4.18 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.18 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#1)
solc-0.4.18 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Owned.transferOwnership(address)._newOwner (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#83) is not in mixedCase
Parameter Owned.dividendsAcc(address)._dividendsAccount (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#95) is not in mixedCase
Function Ethernational.ICOTimer() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#291-295) is not in mixedCase
Variable Ethernational._totalSupply (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#111) is not in mixedCase
Variable Ethernational.ETHinvested (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#117) is not in mixedCase
Contract dividendsContract (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#315-353) is not in CapWords
Function dividendsContract.ICOaddress(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#323-327) is not in mixedCase
Parameter dividendsContract.ICOaddress(address)._t (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#323) is not in mixedCase
Variable dividendsContract.ICOaddress (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#321) is not in mixedCase
Parameter DailyDraw.start(bytes32)._var1 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#377) is not in mixedCase
Function DailyDraw.Play() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#396-406) is not in mixedCase
Parameter DailyDraw.winner(uint256,bytes32)._theNumber (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#414) is not in mixedCase
Variable DailyDraw.Tickets (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#375) is not in mixedCase
Parameter WeeklyDraw.start(bytes32)._var1 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#466) is not in mixedCase
Function WeeklyDraw.Play() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#485-495) is not in mixedCase
Parameter WeeklyDraw.winner(uint256,bytes32)._theNumber (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#503) is not in mixedCase
Variable WeeklyDraw.Tickets (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#464) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in Ethernational.buyEIT() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#258-276):
	External calls:
	- owner.transfer(msg.value) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#274)
	State variables written after the call(s):
	- ETHinvested = ETHinvested + msg.value (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#275)
Reentrancy in dividendsContract.collectDividends(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#332-340):
	External calls:
	- member.transfer(payout) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#336)
	State variables written after the call(s):
	- paid[member] = paid[member] + payout (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#337)
	- totalPaid = totalPaid + payout (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#338)
Reentrancy in Ethernational.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#238-256):
	External calls:
	- owner.transfer(msg.value) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#254)
	State variables written after the call(s):
	- ETHinvested = ETHinvested + msg.value (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#255)
Reentrancy in DailyDraw.winner(uint256,bytes32) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#414-441):
	External calls:
	- winningTicket.transfer(winnings) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#431)
	- owner.transfer(fees) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#433)
	- dividendsAccount.transfer(dividends) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#435)
	State variables written after the call(s):
	- number = newNumber (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#439)
	- delete ticketsSold (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#437)
	- timeLimit = now (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#438)
Reentrancy in WeeklyDraw.winner(uint256,bytes32) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#503-530):
	External calls:
	- winningTicket.transfer(winnings) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#520)
	- owner.transfer(fees) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#522)
	- dividendsAccount.transfer(dividends) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#524)
	State variables written after the call(s):
	- number = newNumber (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#528)
	- delete ticketsSold (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#526)
	- timeLimit = now (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#527)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Ethernational.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#238-256) uses literals with too many digits:
	- require(bool)(now >= startDate && now <= endDate && msg.value > 1000000000000000) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#239)
Ethernational.buyEIT() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#258-276) uses literals with too many digits:
	- require(bool)(now >= startDate && now <= endDate && msg.value > 1000000000000000) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#259)
dividendsContract.ICOaddress(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#323-327) uses literals with too many digits:
	- totalSupply = dc.totalSupply() / 1000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#326)
dividendsContract.collectDividends(address) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#332-340) uses literals with too many digits:
	- Ownes = dc.balanceOf(member) / 1000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#334)
dividendsContract.updatePaid(address,address,uint256) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#346-351) uses literals with too many digits:
	- val = ((paid[from] * 1000000) / perc) / 1000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#348)
DailyDraw.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#384-394) uses literals with too many digits:
	- value = (msg.value) / 10000000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#385)
DailyDraw.Play() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#396-406) uses literals with too many digits:
	- value = msg.value / 10000000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#397)
WeeklyDraw.fallback() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#473-483) uses literals with too many digits:
	- value = (msg.value) / 100000000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#474)
WeeklyDraw.Play() (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#485-495) uses literals with too many digits:
	- value = msg.value / 100000000000000000 (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#486)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Ethernational.startDate (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#112) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

receiveApproval(address,uint256,address,bytes) should be declared external:
	- ApproveAndCallFallBack.receiveApproval(address,uint256,address,bytes) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#60)
approveAndCall(address,uint256,bytes) should be declared external:
	- Ethernational.approveAndCall(address,uint256,bytes) (0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol#228-233)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol analyzed (8 contracts with 94 detectors), 57 result(s) found

real	0m2.277s
user	0m2.078s
sys	0m0.203s
