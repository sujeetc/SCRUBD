'solc --version' running
'solc ./0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432):
	External calls:
	- previousBalances = namiToken.balanceOf(msg.sender) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1401)
	- namiToken.transfer(msg.sender,ask[_seller].volume) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1405)
	External calls sending eth:
	- _seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth)) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1403)
	State variables written after the call(s):
	- ask[_seller].volume = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1408)
	NamiExchange.ask (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1283) can be used in cross function reentrancies:
	- NamiExchange.ask (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1283)
	- NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432)
	- NamiExchange.closeAskOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1383-1394)
	- NamiExchange.tokenFallbackExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1373-1381)
Reentrancy in NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432):
	External calls:
	- previousBalances = namiToken.balanceOf(msg.sender) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1401)
	- namiToken.transfer(msg.sender,nac) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1420)
	External calls sending eth:
	- _seller.send(msg.value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1418)
	State variables written after the call(s):
	- ask[_seller].volume = (ask[_seller].volume).sub(nac) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1422)
	NamiExchange.ask (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1283) can be used in cross function reentrancies:
	- NamiExchange.ask (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1283)
	- NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432)
	- NamiExchange.closeAskOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1383-1394)
	- NamiExchange.tokenFallbackExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1373-1381)
Reentrancy in BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233):
	External calls:
	- price = namiContract.getPrice() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1206)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	External calls sending eth:
	- (session.investor[i]).transfer(etherReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1212)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	State variables written after the call(s):
	- i < session.investorCount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1208)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.investor[i] = 0x0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1218)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.win[i] = false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1219)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.amountInvest[i] = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1220)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.isOpen = false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1222)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.priceOpen = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1228)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.priceClose = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1229)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.isReset = true (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1230)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.investOpen = false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1231)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
	- session.investorCount = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1232)
	BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928) can be used in cross function reentrancies:
	- BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051)
	- BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043)
	- BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035)
	- BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017)
	- BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025)
	- BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177)
	- BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233)
	- BinaryOption.getAmount() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1104-1114)
	- BinaryOption.getChooses() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1092-1102)
	- BinaryOption.getInvestors() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1080-1090)
	- BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164)
	- BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148)
	- BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134)
	- BinaryOption.session (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#928)
Reentrancy in NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356):
	External calls:
	- require(bool)(namiToken.allowance(msg.sender,this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1331)
	- msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1333)
	External calls sending eth:
	- msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1333)
	State variables written after the call(s):
	- bid[_buyer].eth = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1335)
	NamiExchange.bid (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1282) can be used in cross function reentrancies:
	- NamiExchange.bid (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1282)
	- NamiExchange.closeBidOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1358-1365)
	- NamiExchange.placeBuyOrder(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1317-1324)
	- NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356)
Reentrancy in NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356):
	External calls:
	- require(bool)(namiToken.allowance(msg.sender,this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1331)
	- msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1345)
	External calls sending eth:
	- msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1345)
	State variables written after the call(s):
	- bid[_buyer].eth = (bid[_buyer].eth).sub(eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1347)
	NamiExchange.bid (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1282) can be used in cross function reentrancies:
	- NamiExchange.bid (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1282)
	- NamiExchange.closeBidOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1358-1365)
	- NamiExchange.placeBuyOrder(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1317-1324)
	- NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

NamiCrowdSale.slitherConstructorConstantVariables() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#435-911) performs a multiplication on the result of a division:
	- TOKEN_SUPPLY_LIMIT = 1000000000 * (1000000000000000000 / 1) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#458)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

NamiCrowdSale (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#435-911) has incorrect ERC20 function interface:NamiCrowdSale.transfer(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#570-574)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

NamiCrowdSale._transfer(address,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#536-552) uses a dangerous strict equality:
	- assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#551)
BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233) uses a dangerous strict equality:
	- session.win[i] == result (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1209)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in NamiPool._withdrawNAC(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#322-332):
	External calls:
	- previousBalances = namiToken.balanceOf(this) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#325)
	- namiToken.transfer(_shareAddress,namiPool[_roundIndex][_shareAddress].stake) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#326)
	State variables written after the call(s):
	- namiPool[_roundIndex][_shareAddress].stake = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#330)
	NamiPool.namiPool (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#106) can be used in cross function reentrancies:
	- NamiPool._withdrawNAC(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#322-332)
	- NamiPool.activateUser(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#210-219)
	- NamiPool.deactivateUser(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#221-230)
	- NamiPool.namiPool (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#106)
	- NamiPool.tokenFallbackExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#194-202)
	- NamiPool.withdrawNonTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#419-431)
	- NamiPool.withdrawNonTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#372-386)
	- NamiPool.withdrawTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#396-411)
	- NamiPool.withdrawTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340-361)
Reentrancy in NamiExchange.closeAskOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1383-1394):
	External calls:
	- previousBalances = namiToken.balanceOf(msg.sender) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1386)
	- namiToken.transfer(msg.sender,ask[msg.sender].volume) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1388)
	State variables written after the call(s):
	- ask[msg.sender].volume = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1390)
	NamiExchange.ask (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1283) can be used in cross function reentrancies:
	- NamiExchange.ask (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1283)
	- NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432)
	- NamiExchange.closeAskOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1383-1394)
	- NamiExchange.tokenFallbackExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1373-1381)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

BinaryOption.getChooses().listChooses (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1097) is a local variable never initialized
BinaryOption.getInvestors().listInvestor (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1085) is a local variable never initialized
BinaryOption.getAmount().listAmount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1109) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

NamiCrowdSale.transferToExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#865-880) ignores return value by receiver.tokenFallbackExchange(msg.sender,_value,_price) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#877)
NamiCrowdSale.transferToBuyer(address,uint256,address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#894-909) ignores return value by receiver.tokenFallbackBuyer(msg.sender,_value,_buyer) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#906)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

NamiPool.changeEscrow(address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#119-125) should emit an event for: 
	- escrow = _escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#124) 
NamiCrowdSale.changeEscrow(address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#641-646) should emit an event for: 
	- escrow = _escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#645) 
NamiCrowdSale.setCrowdsaleManager(address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#809-815) should emit an event for: 
	- crowdsaleManager = _mgr (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#814) 
BinaryOption.changeEscrow(address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#993-998) should emit an event for: 
	- escrow = _escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#997) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

NamiCrowdSale.changeBinary(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#649-654) should emit an event for: 
	- binary = _binary (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#653) 
BinaryOption.changeMinEth(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1001-1006) should emit an event for: 
	- minimunEth = _minimunEth (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1005) 
BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017) should emit an event for: 
	- timeInvestInMinute = _timeInvest (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1016) 
BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035) should emit an event for: 
	- rateWin = _rateWin (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1034) 
BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043) should emit an event for: 
	- rateLoss = _rateLoss (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1042) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

NamiPool.NamiPool(address,address,address)._escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#53) lacks a zero-check on :
		- escrow = _escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#55)
NamiPool.NamiPool(address,address,address)._namiAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#53) lacks a zero-check on :
		- NamiAddr = _namiAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#57)
NamiCrowdSale.NamiCrowdSale(address,address,address)._escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#440) lacks a zero-check on :
		- escrow = _escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#442)
NamiCrowdSale.NamiCrowdSale(address,address,address)._namiPresale (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#440) lacks a zero-check on :
		- namiPresale = _namiPresale (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#444)
NamiCrowdSale.setCrowdsaleManager(address)._mgr (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#809) lacks a zero-check on :
		- crowdsaleManager = _mgr (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#814)
BinaryOption.BinaryOption(address,address,address)._namiMultiSigWallet (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#973) lacks a zero-check on :
		- namiMultiSigWallet = _namiMultiSigWallet (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#977)
NamiExchange.NamiExchange(address)._namiAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1272) lacks a zero-check on :
		- NamiAddr = _namiAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1273)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233) has external calls inside a loop: (session.investor[i]).transfer(etherReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1212)
BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233) has external calls inside a loop: namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in NamiCrowdSale._migrateToken(address,address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#818-832):
	External calls:
	- newToken = presale.balanceOf(_from) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#822)
	- presale.burnTokens(_from) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#825)
	State variables written after the call(s):
	- balanceOf[_to] = balanceOf[_to].add(newToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#827)
	- totalSupply = totalSupply.add(newToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#829)
Reentrancy in NamiPool._withdrawNAC(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#322-332):
	External calls:
	- previousBalances = namiToken.balanceOf(this) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#325)
	- namiToken.transfer(_shareAddress,namiPool[_roundIndex][_shareAddress].stake) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#326)
	State variables written after the call(s):
	- round[_roundIndex].currentNAC = round[_roundIndex].currentNAC.sub(namiPool[_roundIndex][_shareAddress].stake) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#328)
Reentrancy in BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233):
	External calls:
	- price = namiContract.getPrice() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1206)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	External calls sending eth:
	- (session.investor[i]).transfer(etherReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1212)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	State variables written after the call(s):
	- sessionId += 1 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1224)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in NamiCrowdSale._migrateToken(address,address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#818-832):
	External calls:
	- newToken = presale.balanceOf(_from) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#822)
	- presale.burnTokens(_from) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#825)
	Event emitted after the call(s):
	- LogMigrate(_from,_to,newToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#830)
	- Transfer(this,_to,newToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#831)
Reentrancy in NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432):
	External calls:
	- previousBalances = namiToken.balanceOf(msg.sender) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1401)
	- namiToken.transfer(msg.sender,ask[_seller].volume) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1405)
	External calls sending eth:
	- _seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth)) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1403)
	Event emitted after the call(s):
	- SellHistory(_seller,msg.sender,ask[_seller].price,ask[_seller].volume,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1406)
	- UpdateAsk(_seller,ask[_seller].price,0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1409)
Reentrancy in NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432):
	External calls:
	- previousBalances = namiToken.balanceOf(msg.sender) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1401)
	- namiToken.transfer(msg.sender,nac) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1420)
	External calls sending eth:
	- _seller.send(msg.value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1418)
	Event emitted after the call(s):
	- SellHistory(_seller,msg.sender,ask[_seller].price,nac,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1424)
	- UpdateAsk(_seller,ask[_seller].price,ask[_seller].volume) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1423)
Reentrancy in NamiExchange.closeAskOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1383-1394):
	External calls:
	- previousBalances = namiToken.balanceOf(msg.sender) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1386)
	- namiToken.transfer(msg.sender,ask[msg.sender].volume) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1388)
	Event emitted after the call(s):
	- UpdateAsk(msg.sender,ask[msg.sender].price,0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1391)
Reentrancy in BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233):
	External calls:
	- price = namiContract.getPrice() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1206)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	External calls sending eth:
	- (session.investor[i]).transfer(etherReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1212)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	Event emitted after the call(s):
	- SessionClose(now,sessionId,_priceClose,price,rateWin,rateLoss,rateFee) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1223)
Reentrancy in NamiMultiSigWallet.executeTransaction(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1652-1667):
	External calls:
	- transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1660)
	Event emitted after the call(s):
	- Execution(transactionId) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1661)
Reentrancy in NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356):
	External calls:
	- require(bool)(namiToken.allowance(msg.sender,this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1331)
	- msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1333)
	External calls sending eth:
	- msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1333)
	Event emitted after the call(s):
	- BuyHistory(_buyer,msg.sender,bid[_buyer].price,maxToken,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1337)
	- UpdateBid(_buyer,bid[_buyer].price,bid[_buyer].eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1336)
Reentrancy in NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356):
	External calls:
	- require(bool)(namiToken.allowance(msg.sender,this) >= _value && _value > 0 && ethOfBuyer != 0 && _buyer != 0x0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1331)
	- msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1345)
	External calls sending eth:
	- msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1345)
	Event emitted after the call(s):
	- BuyHistory(_buyer,msg.sender,bid[_buyer].price,_value,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1349)
	- UpdateBid(_buyer,bid[_buyer].price,bid[_buyer].eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1348)
Reentrancy in NamiCrowdSale.transferToBuyer(address,uint256,address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#894-909):
	External calls:
	- receiver.tokenFallbackBuyer(msg.sender,_value,_buyer) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#906)
	Event emitted after the call(s):
	- TransferToBuyer(msg.sender,_to,_value,_buyer) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#907)
Reentrancy in NamiCrowdSale.transferToExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#865-880):
	External calls:
	- receiver.tokenFallbackExchange(msg.sender,_value,_price) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#877)
	Event emitted after the call(s):
	- TransferToExchange(msg.sender,_to,_value,_price) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#878)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

NamiCrowdSale.getPrice() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#686-717) uses timestamp for comparisons
	Dangerous comparisons:
	- now < 1517443200 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#687)
	- 1517443200 < now && now <= 1518048000 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#690)
	- 1518048000 < now && now <= 1518652800 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#693)
	- 1518652800 < now && now <= 1519257600 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#696)
	- 1519257600 < now && now <= 1519862400 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#699)
	- 1519862400 < now && now <= 1520467200 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#702)
	- 1520467200 < now && now <= 1521072000 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#705)
	- 1521072000 < now && now <= 1521676800 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#708)
	- 1521676800 < now && now <= 1522281600 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#711)
NamiCrowdSale.buy(address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#725-739) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now <= 1522281600 || msg.sender == binaryAddress) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#729)
BinaryOption.changeTimeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011-1017) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(! session.isOpen && _timeInvest < timeOneSession) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1015)
BinaryOption.changeTimeOneSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019-1025) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(! session.isOpen && _timeOneSession > timeInvestInMinute) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1023)
BinaryOption.changeRateWin(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029-1035) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(! session.isOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1033)
BinaryOption.changeRateLoss(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037-1043) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(! session.isOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1041)
BinaryOption.changeRateFee(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045-1051) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(! session.isOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1049)
BinaryOption.resetSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1118-1134) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(! session.isReset && ! session.isOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1122)
BinaryOption.openSession() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1137-1148) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(session.isReset && ! session.isOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1141)
BinaryOption.invest(bool) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152-1164) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(msg.value >= minimunEth && session.investOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1156)
	- require(bool)(now < (session.timeOpen + timeInvestInMinute * 60)) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1157)
	- require(bool)(session.investorCount < MAX_INVESTOR) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1158)
BinaryOption.closeInvest(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168-1177) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(_priceOpen != 0 && session.investOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1172)
	- require(bool)(now > (session.timeOpen + timeInvestInMinute * 60)) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1173)
BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(_priceClose != 0 && now > (session.timeOpen + timeOneSession * 60)) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1200)
	- require(bool)(! session.investOpen && session.isOpen) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1201)
	- i < session.investorCount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1208)
	- session.win[i] == result (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1209)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

NamiCrowdSale.transferToExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#865-880) uses assembly
	- INLINE ASM (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#868-872)
NamiCrowdSale.transferToBuyer(address,uint256,address) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#894-909) uses assembly
	- INLINE ASM (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#897-901)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

NamiPool.activateRound(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#171-179) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isOpen == false && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#175)
NamiPool.deactivateRound(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#181-187) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isOpen == true) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#185)
NamiPool.tokenFallbackExchange(address,uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#194-202) compares to a boolean constant:
	-require(bool)(round[_price].isOpen == true && _value > 0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#196)
NamiPool.activateUser(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#210-219) compares to a boolean constant:
	-require(bool)(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#215)
NamiPool.activateUser(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#210-219) compares to a boolean constant:
	-require(bool)(namiPool[_roundId][_shareAddress].isActive == false && namiPool[_roundId][_shareAddress].stake > 0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#214)
NamiPool.deactivateUser(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#221-230) compares to a boolean constant:
	-require(bool)(namiPool[_roundId][_shareAddress].isActive == true && namiPool[_roundId][_shareAddress].stake > 0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#225)
NamiPool.deactivateUser(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#221-230) compares to a boolean constant:
	-require(bool)(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#226)
NamiPool.closeActive(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#237-243) compares to a boolean constant:
	-require(bool)(round[_roundId].isCompleteActive == false && round[_roundId].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#241)
NamiPool.changeWithdrawable(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#249-255) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#253)
NamiPool.changeTopWithdrawable(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#264-270) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#268)
NamiPool.depositEthPool(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#278-287) compares to a boolean constant:
	-require(bool)(msg.value > 0 && round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#282)
NamiPool.withdrawEthPool(uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#291-303) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#295)
NamiPool.closeEthPool(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#308-314) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCloseEthPool == false && round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#312)
NamiPool.withdrawTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340-361) compares to a boolean constant:
	-namiPool[_roundIndex][_shareAddress].isActive == true (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#346)
NamiPool.withdrawTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340-361) compares to a boolean constant:
	-require(bool)(namiPool[_roundIndex][_shareAddress].isWithdrawn == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#347)
NamiPool.withdrawTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340-361) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#344)
NamiPool.withdrawNonTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#372-386) compares to a boolean constant:
	-require(bool)(namiPool[_roundIndex][_shareAddress].isWithdrawn == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#379)
NamiPool.withdrawNonTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#372-386) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#376)
NamiPool.withdrawNonTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#372-386) compares to a boolean constant:
	-namiPool[_roundIndex][_shareAddress].isActive == false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#378)
NamiPool.withdrawTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#396-411) compares to a boolean constant:
	-require(bool)(namiPool[_roundIndex][msg.sender].isWithdrawn == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#402)
NamiPool.withdrawTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#396-411) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isCloseEthPool == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#399)
NamiPool.withdrawTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#396-411) compares to a boolean constant:
	-namiPool[_roundIndex][msg.sender].isActive == true (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#401)
NamiPool.withdrawNonTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#419-431) compares to a boolean constant:
	-namiPool[_roundIndex][msg.sender].isActive == false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#424)
NamiPool.withdrawNonTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#419-431) compares to a boolean constant:
	-require(bool)(round[_roundIndex].isCompleteActive == true && round[_roundIndex].isOpen == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#422)
NamiPool.withdrawNonTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#419-431) compares to a boolean constant:
	-require(bool)(namiPool[_roundIndex][msg.sender].isWithdrawn == false) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#425)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Version constraint ^0.4.18 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.18 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1)
solc-0.4.18 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in NamiMultiSigWallet.executeTransaction(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1652-1667):
	- transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1660)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

NamiCrowdSale (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#435-911) should inherit from PresaleToken (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1237-1240)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Contract tokenRecipient (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#48) is not in CapWords
Parameter NamiPool.changeEscrow(address)._escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#119) is not in mixedCase
Parameter NamiPool.withdrawEther(uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#127) is not in mixedCase
Parameter NamiPool.withdrawNAC(uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#137) is not in mixedCase
Parameter NamiPool.activateRound(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#171) is not in mixedCase
Parameter NamiPool.deactivateRound(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#181) is not in mixedCase
Parameter NamiPool.tokenFallbackExchange(address,uint256,uint256)._from (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#194) is not in mixedCase
Parameter NamiPool.tokenFallbackExchange(address,uint256,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#194) is not in mixedCase
Parameter NamiPool.tokenFallbackExchange(address,uint256,uint256)._price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#194) is not in mixedCase
Parameter NamiPool.activateUser(address,uint256)._shareAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#210) is not in mixedCase
Parameter NamiPool.activateUser(address,uint256)._roundId (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#210) is not in mixedCase
Parameter NamiPool.deactivateUser(address,uint256)._shareAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#221) is not in mixedCase
Parameter NamiPool.deactivateUser(address,uint256)._roundId (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#221) is not in mixedCase
Parameter NamiPool.closeActive(uint256)._roundId (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#237) is not in mixedCase
Parameter NamiPool.changeWithdrawable(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#249) is not in mixedCase
Parameter NamiPool.changeTopWithdrawable(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#264) is not in mixedCase
Parameter NamiPool.depositEthPool(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#278) is not in mixedCase
Parameter NamiPool.withdrawEthPool(uint256,uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#291) is not in mixedCase
Parameter NamiPool.withdrawEthPool(uint256,uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#291) is not in mixedCase
Parameter NamiPool.closeEthPool(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#308) is not in mixedCase
Parameter NamiPool.withdrawTopForTeam(address,uint256)._shareAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340) is not in mixedCase
Parameter NamiPool.withdrawTopForTeam(address,uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340) is not in mixedCase
Parameter NamiPool.withdrawNonTopForTeam(address,uint256)._shareAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#372) is not in mixedCase
Parameter NamiPool.withdrawNonTopForTeam(address,uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#372) is not in mixedCase
Parameter NamiPool.withdrawTop(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#396) is not in mixedCase
Parameter NamiPool.withdrawNonTop(uint256)._roundIndex (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#419) is not in mixedCase
Variable NamiPool.NamiAddr (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#70) is not in mixedCase
Parameter NamiCrowdSale.transferForTeam(address,uint256)._to (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#556) is not in mixedCase
Parameter NamiCrowdSale.transferForTeam(address,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#556) is not in mixedCase
Parameter NamiCrowdSale.transfer(address,uint256)._to (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#570) is not in mixedCase
Parameter NamiCrowdSale.transfer(address,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#570) is not in mixedCase
Parameter NamiCrowdSale.transferFrom(address,address,uint256)._from (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#585) is not in mixedCase
Parameter NamiCrowdSale.transferFrom(address,address,uint256)._to (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#585) is not in mixedCase
Parameter NamiCrowdSale.transferFrom(address,address,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#585) is not in mixedCase
Parameter NamiCrowdSale.approve(address,uint256)._spender (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#604) is not in mixedCase
Parameter NamiCrowdSale.approve(address,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#604) is not in mixedCase
Parameter NamiCrowdSale.approveAndCall(address,uint256,bytes)._spender (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#621) is not in mixedCase
Parameter NamiCrowdSale.approveAndCall(address,uint256,bytes)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#621) is not in mixedCase
Parameter NamiCrowdSale.approveAndCall(address,uint256,bytes)._extraData (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#621) is not in mixedCase
Parameter NamiCrowdSale.changeEscrow(address)._escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#641) is not in mixedCase
Parameter NamiCrowdSale.changeBinary(uint256)._binary (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#649) is not in mixedCase
Parameter NamiCrowdSale.changeBinaryAddress(address)._binaryAddress (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#657) is not in mixedCase
Parameter NamiCrowdSale.buy(address)._buyer (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#725) is not in mixedCase
Parameter NamiCrowdSale.burnTokens(address)._owner (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#744) is not in mixedCase
Parameter NamiCrowdSale.setPresalePhase(NamiCrowdSale.Phase)._nextPhase (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#768) is not in mixedCase
Parameter NamiCrowdSale.withdrawEther(uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#789) is not in mixedCase
Parameter NamiCrowdSale.safeWithdraw(address,uint256)._withdraw (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#799) is not in mixedCase
Parameter NamiCrowdSale.safeWithdraw(address,uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#799) is not in mixedCase
Parameter NamiCrowdSale.setCrowdsaleManager(address)._mgr (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#809) is not in mixedCase
Parameter NamiCrowdSale.migrateToken(address,address)._from (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#835) is not in mixedCase
Parameter NamiCrowdSale.migrateToken(address,address)._to (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#835) is not in mixedCase
Parameter NamiCrowdSale.transferToExchange(address,uint256,uint256)._to (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#865) is not in mixedCase
Parameter NamiCrowdSale.transferToExchange(address,uint256,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#865) is not in mixedCase
Parameter NamiCrowdSale.transferToExchange(address,uint256,uint256)._price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#865) is not in mixedCase
Parameter NamiCrowdSale.transferToBuyer(address,uint256,address)._to (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#894) is not in mixedCase
Parameter NamiCrowdSale.transferToBuyer(address,uint256,address)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#894) is not in mixedCase
Parameter NamiCrowdSale.transferToBuyer(address,uint256,address)._buyer (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#894) is not in mixedCase
Variable NamiCrowdSale.TRANSFERABLE (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#456) is not in mixedCase
Parameter BinaryOption.changeEscrow(address)._escrow (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#993) is not in mixedCase
Parameter BinaryOption.changeMinEth(uint256)._minimunEth (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1001) is not in mixedCase
Parameter BinaryOption.changeTimeInvest(uint256)._timeInvest (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1011) is not in mixedCase
Parameter BinaryOption.changeTimeOneSession(uint256)._timeOneSession (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1019) is not in mixedCase
Parameter BinaryOption.changeRateWin(uint256)._rateWin (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1029) is not in mixedCase
Parameter BinaryOption.changeRateLoss(uint256)._rateLoss (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1037) is not in mixedCase
Parameter BinaryOption.changeRateFee(uint256)._rateFee (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1045) is not in mixedCase
Parameter BinaryOption.withdrawEther(uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1056) is not in mixedCase
Parameter BinaryOption.safeWithdraw(address,uint256)._withdraw (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1068) is not in mixedCase
Parameter BinaryOption.safeWithdraw(address,uint256)._amount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1068) is not in mixedCase
Parameter BinaryOption.invest(bool)._choose (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1152) is not in mixedCase
Parameter BinaryOption.closeInvest(uint256)._priceOpen (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1168) is not in mixedCase
Parameter BinaryOption.getEtherToBuy(uint256,bool)._ether (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1182) is not in mixedCase
Parameter BinaryOption.getEtherToBuy(uint256,bool)._status (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1182) is not in mixedCase
Parameter BinaryOption.closeSession(uint256)._priceClose (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196) is not in mixedCase
Parameter NamiExchange.placeBuyOrder(uint256)._price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1317) is not in mixedCase
Parameter NamiExchange.sellNac(uint256,address,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326) is not in mixedCase
Parameter NamiExchange.sellNac(uint256,address,uint256)._buyer (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326) is not in mixedCase
Parameter NamiExchange.sellNac(uint256,address,uint256)._price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326) is not in mixedCase
Parameter NamiExchange.tokenFallbackExchange(address,uint256,uint256)._from (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1373) is not in mixedCase
Parameter NamiExchange.tokenFallbackExchange(address,uint256,uint256)._value (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1373) is not in mixedCase
Parameter NamiExchange.tokenFallbackExchange(address,uint256,uint256)._price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1373) is not in mixedCase
Parameter NamiExchange.buyNac(address,uint256)._seller (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396) is not in mixedCase
Parameter NamiExchange.buyNac(address,uint256)._price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396) is not in mixedCase
Variable NamiExchange.NamiAddr (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1287) is not in mixedCase
Parameter NamiMultiSigWallet.changeRequirement(uint256)._required (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1603) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432):
	External calls:
	- _seller.send(maxEth) && msg.sender.send(msg.value.sub(maxEth)) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1403)
	State variables written after the call(s):
	- ask[_seller].volume = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1408)
	Event emitted after the call(s):
	- SellHistory(_seller,msg.sender,ask[_seller].price,ask[_seller].volume,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1406)
	- UpdateAsk(_seller,ask[_seller].price,0) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1409)
Reentrancy in NamiExchange.buyNac(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1396-1432):
	External calls:
	- _seller.send(msg.value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1418)
	State variables written after the call(s):
	- ask[_seller].volume = (ask[_seller].volume).sub(nac) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1422)
	Event emitted after the call(s):
	- SellHistory(_seller,msg.sender,ask[_seller].price,nac,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1424)
	- UpdateAsk(_seller,ask[_seller].price,ask[_seller].volume) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1423)
Reentrancy in NamiExchange.closeBidOrder() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1358-1365):
	External calls:
	- msg.sender.transfer(bid[msg.sender].eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1361)
	State variables written after the call(s):
	- bid[msg.sender].eth = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1363)
	Event emitted after the call(s):
	- UpdateBid(msg.sender,bid[msg.sender].price,bid[msg.sender].eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1364)
Reentrancy in BinaryOption.closeSession(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1196-1233):
	External calls:
	- (session.investor[i]).transfer(etherReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1212)
	External calls sending eth:
	- (session.investor[i]).transfer(etherReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1212)
	- namiContract.buy.value(etherToBuy)(session.investor[i]) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1216)
	State variables written after the call(s):
	- i < session.investorCount (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1208)
	- session.investor[i] = 0x0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1218)
	- session.win[i] = false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1219)
	- session.amountInvest[i] = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1220)
	- session.isOpen = false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1222)
	- session.priceOpen = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1228)
	- session.priceClose = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1229)
	- session.isReset = true (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1230)
	- session.investOpen = false (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1231)
	- session.investorCount = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1232)
	- sessionId += 1 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1224)
	Event emitted after the call(s):
	- SessionClose(now,sessionId,_priceClose,price,rateWin,rateLoss,rateFee) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1223)
Reentrancy in NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356):
	External calls:
	- msg.sender.send(ethOfBuyer) && namiToken.transferFrom(msg.sender,_buyer,maxToken) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1333)
	State variables written after the call(s):
	- bid[_buyer].eth = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1335)
	Event emitted after the call(s):
	- BuyHistory(_buyer,msg.sender,bid[_buyer].price,maxToken,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1337)
	- UpdateBid(_buyer,bid[_buyer].price,bid[_buyer].eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1336)
Reentrancy in NamiExchange.sellNac(uint256,address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1326-1356):
	External calls:
	- msg.sender.send(eth) && namiToken.transferFrom(msg.sender,_buyer,_value) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1345)
	State variables written after the call(s):
	- bid[_buyer].eth = (bid[_buyer].eth).sub(eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1347)
	Event emitted after the call(s):
	- BuyHistory(_buyer,msg.sender,bid[_buyer].price,_value,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1349)
	- UpdateBid(_buyer,bid[_buyer].price,bid[_buyer].eth) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1348)
Reentrancy in NamiPool.withdrawEthPool(uint256,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#291-303):
	External calls:
	- namiMultiSigWallet.transfer(_amount) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#299)
	State variables written after the call(s):
	- round[_roundIndex].ethBalance = round[_roundIndex].ethBalance.sub(_amount) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#300)
	Event emitted after the call(s):
	- WithdrawPool(_amount,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#301)
Reentrancy in NamiPool.withdrawTop(uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#396-411):
	External calls:
	- msg.sender.transfer(ethReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#404)
	State variables written after the call(s):
	- namiPool[_roundIndex][msg.sender].isWithdrawn = true (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#406)
	- _withdrawNAC(msg.sender,_roundIndex) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#409)
		- namiPool[_roundIndex][_shareAddress].stake = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#330)
	- _withdrawNAC(msg.sender,_roundIndex) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#409)
		- round[_roundIndex].currentNAC = round[_roundIndex].currentNAC.sub(namiPool[_roundIndex][_shareAddress].stake) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#328)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_roundIndex,ethReturn,namiPool[_roundIndex][msg.sender].stake,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#408)
Reentrancy in NamiPool.withdrawTopForTeam(address,uint256) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#340-361):
	External calls:
	- _shareAddress.transfer(ethReturn) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#352)
	State variables written after the call(s):
	- namiPool[_roundIndex][_shareAddress].isWithdrawn = true (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#355)
	- _withdrawNAC(_shareAddress,_roundIndex) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#359)
		- namiPool[_roundIndex][_shareAddress].stake = 0 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#330)
	- _withdrawNAC(_shareAddress,_roundIndex) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#359)
		- round[_roundIndex].currentNAC = round[_roundIndex].currentNAC.sub(namiPool[_roundIndex][_shareAddress].stake) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#328)
	Event emitted after the call(s):
	- Withdraw(_shareAddress,_roundIndex,ethReturn,namiPool[_roundIndex][_shareAddress].stake,now) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#356)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

NamiCrowdSale.slitherConstructorConstantVariables() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#435-911) uses literals with too many digits:
	- TOKEN_SUPPLY_LIMIT = 1000000000 * (1000000000000000000 / 1) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#458)
BinaryOption.slitherConstructorVariables() (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#917-1234) uses literals with too many digits:
	- minimunEth = 10000000000000000 (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#936)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition i < owners.length (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1678) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < owners.length (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1721) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < owners.length (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1763) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < owners.length (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1589) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

NamiCrowdSale.decimals (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#454) should be constant 
NamiCrowdSale.name (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#452) should be constant 
NamiCrowdSale.symbol (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#453) should be constant 
NamiExchange.name (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1284) should be constant 
NamiExchange.price (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1290) should be constant 
NamiPool.name (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#60) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

receiveApproval(address,uint256,address,bytes) should be declared external:
	- tokenRecipient.receiveApproval(address,uint256,address,bytes) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#48)
approveAndCall(address,uint256,bytes) should be declared external:
	- NamiCrowdSale.approveAndCall(address,uint256,bytes) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#621-631)
tokenFallback(address,uint256,bytes) should be declared external:
	- ERC223ReceivingContract.tokenFallback(address,uint256,bytes) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1258)
submitTransaction(address,uint256,bytes) should be declared external:
	- NamiMultiSigWallet.submitTransaction(address,uint256,bytes) (0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol#1617-1623)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol analyzed (10 contracts with 94 detectors), 199 result(s) found

real	0m8.036s
user	0m7.721s
sys	0m0.315s
