'solc --version' running
'solc ./0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> ./0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol:518:1:
    |
518 | contract ShiryoMarket is IERC1155Receiver, ReentrancyGuard {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084):
	External calls:
	- transferAnyToken(idToMarketItem[itemId].tokenType,idToMarketItem[itemId].tokenContract,address(this),offerIdToMarketOffer[_offerId].bidder,idToMarketItem[itemId].tokenId,idToMarketItem[itemId].amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1057-1064)
		- IERC721(_tokenContract).transferFrom(_from,_to,_tokenId) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#634)
		- IERC1155(_tokenContract).safeTransferFrom(_from,_to,_tokenId,1,) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#640-646)
		- IERC20(_tokenContract).approve(address(this),_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#653)
		- IERC20(_tokenContract).transferFrom(_from,_to,_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#655)
	External calls sending eth:
	- address(msg.sender).transfer(saleAmount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1052)
	State variables written after the call(s):
	- idToMarketItem[itemId].isSold = true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1068)
	ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583) can be used in cross function reentrancies:
	- ShiryoMarket.cancelMarketItem(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#715-734)
	- ShiryoMarket.getItemsByCategory(string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#931-968)
	- ShiryoMarket.getMarketItems() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#832-852)
	- ShiryoMarket.getMarketItemsByPage(uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798-829)
	- ShiryoMarket.getMarketItemsBySeller(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855-890)
	- ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893-927)
	- ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583)
	- idToMarketItem[itemId].buyer = offerIdToMarketOffer[_offerId].bidder (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1069)
	ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583) can be used in cross function reentrancies:
	- ShiryoMarket.cancelMarketItem(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#715-734)
	- ShiryoMarket.getItemsByCategory(string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#931-968)
	- ShiryoMarket.getMarketItems() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#832-852)
	- ShiryoMarket.getMarketItemsByPage(uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798-829)
	- ShiryoMarket.getMarketItemsBySeller(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855-890)
	- ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893-927)
	- ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583)
	- offerIdToMarketOffer[_offerId].accepted = true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1066)
	ShiryoMarket.offerIdToMarketOffer (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#587) can be used in cross function reentrancies:
	- ShiryoMarket.getItemOffers(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179-1212)
	- ShiryoMarket.getOffersByBidder(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105-1138)
	- ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144-1177)
	- ShiryoMarket.offerIdToMarketOffer (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#587)
Reentrancy in ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796):
	External calls:
	- transferAnyToken(idToMarketItem[itemId].tokenType,idToMarketItem[itemId].tokenContract,address(this),msg.sender,tokenId,idToMarketItem[itemId].amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#772-779)
		- IERC721(_tokenContract).transferFrom(_from,_to,_tokenId) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#634)
		- IERC1155(_tokenContract).safeTransferFrom(_from,_to,_tokenId,1,) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#640-646)
		- IERC20(_tokenContract).approve(address(this),_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#653)
		- IERC20(_tokenContract).transferFrom(_from,_to,_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#655)
	External calls sending eth:
	- idToMarketItem[itemId].seller.transfer(saleAmount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#769)
	State variables written after the call(s):
	- idToMarketItem[itemId].isSold = true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#781)
	ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583) can be used in cross function reentrancies:
	- ShiryoMarket.cancelMarketItem(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#715-734)
	- ShiryoMarket.getItemsByCategory(string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#931-968)
	- ShiryoMarket.getMarketItems() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#832-852)
	- ShiryoMarket.getMarketItemsByPage(uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798-829)
	- ShiryoMarket.getMarketItemsBySeller(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855-890)
	- ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893-927)
	- ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583)
	- idToMarketItem[itemId].buyer = address(msg.sender) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#782)
	ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583) can be used in cross function reentrancies:
	- ShiryoMarket.cancelMarketItem(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#715-734)
	- ShiryoMarket.getItemsByCategory(string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#931-968)
	- ShiryoMarket.getMarketItems() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#832-852)
	- ShiryoMarket.getMarketItemsByPage(uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798-829)
	- ShiryoMarket.getMarketItemsBySeller(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855-890)
	- ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893-927)
	- ShiryoMarket.idToMarketItem (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#583)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#623-658) ignores return value by IERC20(_tokenContract).transferFrom(_from,_to,_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#655)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

ShiryoMarket.supportsInterface(bytes4) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1258-1261) uses a Boolean constant improperly:
	-interfaceId == type()(IERC1155Receiver).interfaceId || true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1259-1260)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#misuse-of-a-boolean-constant

ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796) performs a multiplication on the result of a division:
	- fees = SafeMath.div(price,100).mul(saleFeePercentage) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#759)
ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796) performs a multiplication on the result of a division:
	- fees = fees.div(100).mul(feeDiscountPercent) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#765)
ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084) performs a multiplication on the result of a division:
	- fees = SafeMath.div(price,100).mul(saleFeePercentage) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1041)
ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084) performs a multiplication on the result of a division:
	- fees = fees.div(100).mul(feeDiscountPercent) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1048)
ShiryoMarket.withdraw_all() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1263-1270) performs a multiplication on the result of a division:
	- amountB = SafeMath.div(accumulatedFee,100).mul(walletBPercentage) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1265)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

ShiryoMarket.getItemOffers(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179-1212) uses a dangerous strict equality:
	- offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1189-1190)
ShiryoMarket.getItemOffers(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179-1212) uses a dangerous strict equality:
	- offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1200-1201)
ShiryoMarket.getOffersByBidder(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105-1138) uses a dangerous strict equality:
	- offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1115-1116)
ShiryoMarket.getOffersByBidder(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105-1138) uses a dangerous strict equality:
	- offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1126-1127)
ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144-1177) uses a dangerous strict equality:
	- offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1154-1155)
ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144-1177) uses a dangerous strict equality:
	- offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1165-1166)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

ShiryoMarket.getMarketItemsByPage(uint256,uint256).itemCount (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#801) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#623-658) ignores return value by IERC20(_tokenContract).approve(address(this),_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#653)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

ShiryoMarket.setOwner(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1220-1223) should emit an event for: 
	- owner = address(_owner) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1222) 
	- owner = address(_owner) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1222) 
ShiryoMarket.setWalletA(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1272-1275) should emit an event for: 
	- walletA = _walletA (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1274) 
ShiryoMarket.setWalletB(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1277-1280) should emit an event for: 
	- walletB = _walletB (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1279) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Reentrancy in ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084):
	External calls:
	- transferAnyToken(idToMarketItem[itemId].tokenType,idToMarketItem[itemId].tokenContract,address(this),offerIdToMarketOffer[_offerId].bidder,idToMarketItem[itemId].tokenId,idToMarketItem[itemId].amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1057-1064)
		- IERC721(_tokenContract).transferFrom(_from,_to,_tokenId) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#634)
		- IERC1155(_tokenContract).safeTransferFrom(_from,_to,_tokenId,1,) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#640-646)
		- IERC20(_tokenContract).approve(address(this),_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#653)
		- IERC20(_tokenContract).transferFrom(_from,_to,_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#655)
	External calls sending eth:
	- address(msg.sender).transfer(saleAmount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1052)
	State variables written after the call(s):
	- volumeTraded = volumeTraded.add(price) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1083)
Reentrancy in ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796):
	External calls:
	- transferAnyToken(idToMarketItem[itemId].tokenType,idToMarketItem[itemId].tokenContract,address(this),msg.sender,tokenId,idToMarketItem[itemId].amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#772-779)
		- IERC721(_tokenContract).transferFrom(_from,_to,_tokenId) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#634)
		- IERC1155(_tokenContract).safeTransferFrom(_from,_to,_tokenId,1,) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#640-646)
		- IERC20(_tokenContract).approve(address(this),_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#653)
		- IERC20(_tokenContract).transferFrom(_from,_to,_amount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#655)
	External calls sending eth:
	- idToMarketItem[itemId].seller.transfer(saleAmount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#769)
	State variables written after the call(s):
	- volumeTraded = volumeTraded.add(price) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#785)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(offerIdToMarketOffer[_offerId].accepted == false && offerIdToMarketOffer[_offerId].cancelled == false,Already accepted or cancelled.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1032-1036)
ShiryoMarket.canceItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1086-1103) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(offerIdToMarketOffer[_offerId].bidder == msg.sender && offerIdToMarketOffer[_offerId].cancelled == false,Wrong bidder or offer is already cancelled) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1087-1091)
	- require(bool,string)(offerIdToMarketOffer[_offerId].accepted == false,Already accepted.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1092-1095)
ShiryoMarket.getOffersByBidder(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105-1138) uses timestamp for comparisons
	Dangerous comparisons:
	- offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1115-1116)
	- offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1126-1127)
ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144-1177) uses timestamp for comparisons
	Dangerous comparisons:
	- offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1154-1155)
	- offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1165-1166)
ShiryoMarket.getItemOffers(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179-1212) uses timestamp for comparisons
	Dangerous comparisons:
	- offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1189-1190)
	- offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1200-1201)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#665-712) compares to a boolean constant:
	-require(bool,string)(approvedSourceContracts[_tokenContract] == true,Token contract not approved) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#675)
ShiryoMarket.cancelMarketItem(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#715-734) compares to a boolean constant:
	-require(bool)(idToMarketItem[itemId].cancelled == false && idToMarketItem[itemId].isSold == false) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#718-721)
ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796) compares to a boolean constant:
	-require(bool,string)(idToMarketItem[itemId].cancelled == false,This item is not for sale.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#749-752)
ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796) compares to a boolean constant:
	-require(bool,string)(idToMarketItem[itemId].isSold == false,This item is already sold.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#745-748)
ShiryoMarket.getMarketItemsByPage(uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798-829) compares to a boolean constant:
	-idToMarketItem[i_scope_0].buyer == address(0) && idToMarketItem[i_scope_0].cancelled == false && idToMarketItem[i_scope_0].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#817-819)
ShiryoMarket.getMarketItemsByPage(uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798-829) compares to a boolean constant:
	-idToMarketItem[i].buyer == address(0) && idToMarketItem[i].cancelled == false && idToMarketItem[i].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#804-806)
ShiryoMarket.getMarketItems() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#832-852) compares to a boolean constant:
	-idToMarketItem[i + 1].buyer == address(0) && idToMarketItem[i + 1].cancelled == false && idToMarketItem[i + 1].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#841-843)
ShiryoMarket.getMarketItemsBySeller(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855-890) compares to a boolean constant:
	-idToMarketItem[i_scope_0 + 1].seller == _seller && idToMarketItem[i_scope_0 + 1].cancelled == false && idToMarketItem[i_scope_0 + 1].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#878-880)
ShiryoMarket.getMarketItemsBySeller(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855-890) compares to a boolean constant:
	-idToMarketItem[i + 1].seller == _seller && idToMarketItem[i + 1].cancelled == false && idToMarketItem[i + 1].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#866-868)
ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893-927) compares to a boolean constant:
	-idToMarketItem[i_scope_0].seller == _seller && idToMarketItem[i_scope_0].cancelled == false && idToMarketItem[i_scope_0].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#916-918)
ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893-927) compares to a boolean constant:
	-idToMarketItem[i].seller == _seller && idToMarketItem[i].cancelled == false && idToMarketItem[i].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#905-907)
ShiryoMarket.getItemsByCategory(string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#931-968) compares to a boolean constant:
	-keccak256(bytes)(abi.encodePacked(idToMarketItem[i_scope_0 + 1].category)) == keccak256(bytes)(abi.encodePacked(category)) && idToMarketItem[i_scope_0 + 1].buyer == address(0) && idToMarketItem[i_scope_0 + 1].cancelled == false && idToMarketItem[i_scope_0 + 1].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#955-959)
ShiryoMarket.getItemsByCategory(string) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#931-968) compares to a boolean constant:
	-keccak256(bytes)(abi.encodePacked(idToMarketItem[i + 1].category)) == keccak256(bytes)(abi.encodePacked(category)) && idToMarketItem[i + 1].buyer == address(0) && idToMarketItem[i + 1].cancelled == false && idToMarketItem[i + 1].isSold == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#942-946)
ShiryoMarket.makeItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#992-1025) compares to a boolean constant:
	-require(bool,string)(idToMarketItem[_itemId].tokenContract != address(0x0) && idToMarketItem[_itemId].isSold == false && idToMarketItem[_itemId].cancelled == false,Invalid item id.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#993-998)
ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084) compares to a boolean constant:
	-require(bool,string)(offerIdToMarketOffer[_offerId].accepted == false && offerIdToMarketOffer[_offerId].cancelled == false,Already accepted or cancelled.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1032-1036)
ShiryoMarket.canceItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1086-1103) compares to a boolean constant:
	-require(bool,string)(offerIdToMarketOffer[_offerId].accepted == false,Already accepted.) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1092-1095)
ShiryoMarket.canceItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1086-1103) compares to a boolean constant:
	-require(bool,string)(offerIdToMarketOffer[_offerId].bidder == msg.sender && offerIdToMarketOffer[_offerId].cancelled == false,Wrong bidder or offer is already cancelled) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1087-1091)
ShiryoMarket.getOffersByBidder(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105-1138) compares to a boolean constant:
	-offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1126-1127)
ShiryoMarket.getOffersByBidder(address) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105-1138) compares to a boolean constant:
	-offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1115-1116)
ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144-1177) compares to a boolean constant:
	-offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1154-1155)
ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144-1177) compares to a boolean constant:
	-offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1165-1166)
ShiryoMarket.getItemOffers(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179-1212) compares to a boolean constant:
	-offerIdToMarketOffer[itemOfferIds[i]].accepted == false && offerIdToMarketOffer[itemOfferIds[i]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1189-1190)
ShiryoMarket.getItemOffers(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179-1212) compares to a boolean constant:
	-offerIdToMarketOffer[itemOfferIds[i_scope_0]].accepted == false && offerIdToMarketOffer[itemOfferIds[i_scope_0]].cancelled == false (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1200-1201)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Version constraint ^0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- ^0.8.4 (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256)._tokenType (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#624) is not in mixedCase
Parameter ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256)._tokenContract (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#625) is not in mixedCase
Parameter ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256)._from (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#626) is not in mixedCase
Parameter ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256)._to (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#627) is not in mixedCase
Parameter ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256)._tokenId (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#628) is not in mixedCase
Parameter ShiryoMarket.transferAnyToken(ShiryoMarket.TokenType,address,address,address,uint256,uint256)._amount (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#629) is not in mixedCase
Parameter ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string)._tokenContract (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#666) is not in mixedCase
Parameter ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string)._tokenType (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#667) is not in mixedCase
Parameter ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string)._tokenId (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#668) is not in mixedCase
Parameter ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string)._amount (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#669) is not in mixedCase
Parameter ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string)._price (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#670) is not in mixedCase
Parameter ShiryoMarket.createMarketItem(address,ShiryoMarket.TokenType,uint256,uint256,uint256,string)._category (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#671) is not in mixedCase
Parameter ShiryoMarket.getMarketItemsByPage(uint256,uint256)._from (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798) is not in mixedCase
Parameter ShiryoMarket.getMarketItemsByPage(uint256,uint256)._to (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#798) is not in mixedCase
Parameter ShiryoMarket.getMarketItemsBySeller(address)._seller (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#855) is not in mixedCase
Parameter ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256)._seller (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893) is not in mixedCase
Parameter ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256)._from (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893) is not in mixedCase
Parameter ShiryoMarket.getMarketItemsBySellerByPage(address,uint256,uint256)._to (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#893) is not in mixedCase
Parameter ShiryoMarket.makeItemOffer(uint256)._itemId (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#992) is not in mixedCase
Parameter ShiryoMarket.acceptItemOffer(uint256)._offerId (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027) is not in mixedCase
Parameter ShiryoMarket.canceItemOffer(uint256)._offerId (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1086) is not in mixedCase
Parameter ShiryoMarket.getOffersByBidder(address)._bidder (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1105) is not in mixedCase
Parameter ShiryoMarket.getTotalOffersMadeByBidder(address)._bidder (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1140) is not in mixedCase
Parameter ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256)._bidder (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144) is not in mixedCase
Parameter ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256)._from (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144) is not in mixedCase
Parameter ShiryoMarket.getOpenOffersByBidderByPage(address,uint256,uint256)._to (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1144) is not in mixedCase
Parameter ShiryoMarket.getItemOffers(uint256)._itemId (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1179) is not in mixedCase
Parameter ShiryoMarket.setSalePercentageFee(uint256)._amount (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1215) is not in mixedCase
Parameter ShiryoMarket.setOwner(address)._owner (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1220) is not in mixedCase
Parameter ShiryoMarket.setDiscountManager(address)._discountManager (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1225) is not in mixedCase
Parameter ShiryoMarket.setSourceContractApproved(address,bool)._tokenContract (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1230) is not in mixedCase
Parameter ShiryoMarket.setSourceContractApproved(address,bool)._approved (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1230) is not in mixedCase
Function ShiryoMarket.withdraw_all() (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1263-1270) is not in mixedCase
Parameter ShiryoMarket.setWalletA(address)._walletA (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1272) is not in mixedCase
Parameter ShiryoMarket.setWalletB(address)._walletB (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1277) is not in mixedCase
Parameter ShiryoMarket.setWalletBPercentage(uint256)._percentage (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1282) is not in mixedCase
Variable ShiryoMarket._itemIds (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#536) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in ShiryoMarket.acceptItemOffer(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1027-1084):
	External calls:
	- address(msg.sender).transfer(saleAmount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1052)
	State variables written after the call(s):
	- accumulatedFee += fees (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1054)
	- idToMarketItem[itemId].isSold = true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1068)
	- idToMarketItem[itemId].buyer = offerIdToMarketOffer[_offerId].bidder (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1069)
	- offerIdToMarketOffer[_offerId].accepted = true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1066)
	- volumeTraded = volumeTraded.add(price) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1083)
	Event emitted after the call(s):
	- MarketSaleCreated(itemId,idToMarketItem[itemId].tokenContract,idToMarketItem[itemId].tokenId,msg.sender,bidder,idToMarketItem[itemId].category,price) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#1073-1081)
Reentrancy in ShiryoMarket.createMarketSale(uint256) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#738-796):
	External calls:
	- idToMarketItem[itemId].seller.transfer(saleAmount) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#769)
	State variables written after the call(s):
	- accumulatedFee += fees (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#770)
	- idToMarketItem[itemId].isSold = true (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#781)
	- idToMarketItem[itemId].buyer = address(msg.sender) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#782)
	- volumeTraded = volumeTraded.add(price) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#785)
	Event emitted after the call(s):
	- MarketSaleCreated(itemId,idToMarketItem[itemId].tokenContract,tokenId,idToMarketItem[itemId].seller,msg.sender,idToMarketItem[itemId].category,price) (0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol#787-795)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
./0x11ce3c5ecfa4cc788eaa94157a63a1ca4863a90c.sol analyzed (10 contracts with 94 detectors), 90 result(s) found

real	0m18.805s
user	0m18.489s
sys	0m0.313s
