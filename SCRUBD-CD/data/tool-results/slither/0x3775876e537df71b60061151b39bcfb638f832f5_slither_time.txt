'solc --version' running
'solc ./0x3775876e537df71b60061151b39bcfb638f832f5.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588):
	External calls:
	- distributor.notifyJustBuyRecently(to) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1549)
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1646-1652)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	External calls sending eth:
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
		- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	State variables written after the call(s):
	- super._transfer(from,address(this),fees) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1574)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#519)
		- _balances[recipient] = _balances[recipient].add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#520)
	ERC20._balances (0x3775876e537df71b60061151b39bcfb638f832f5.sol#341) can be used in cross function reentrancies:
	- ERC20._mint(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#533-541)
	- ERC20._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#513-522)
	- ERC20.balanceOf(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#408-410)
	- super._transfer(from,to,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1581)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#519)
		- _balances[recipient] = _balances[recipient].add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#520)
	ERC20._balances (0x3775876e537df71b60061151b39bcfb638f832f5.sol#341) can be used in cross function reentrancies:
	- ERC20._mint(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#533-541)
	- ERC20._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#513-522)
	- ERC20.balanceOf(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#408-410)
Reentrancy in DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979):
	External calls:
	- (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#975)
	DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979)
	- DividendDistributor.getUnpaidEarnings(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#987-996)
	- DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925)
	- DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#976)
	DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979)
	- DividendDistributor.getUnpaidEarnings(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#987-996)
	- DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925)
	- DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870)
Reentrancy in Staking.harvest() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1219-1243):
	External calls:
	- USDT.transfer(address(msg.sender),pendingUsdt) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1228)
	External calls sending eth:
	- address(msg.sender).transfer(pendingEth) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1236)
	State variables written after the call(s):
	- lastEthBalance = address(this).balance (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1240)
	Staking.lastEthBalance (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1102) can be used in cross function reentrancies:
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- user.pendingEthReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1237)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.rewardEthDebt = user.amount.mul(accEthPerShare).div(PRECISION_FACTOR) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1238)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
Reentrancy in DividendDistributor.process(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#935-959):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#951)
		- (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
	State variables written after the call(s):
	- currentIndex = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#947)
	DividendDistributor.currentIndex (0x3775876e537df71b60061151b39bcfb638f832f5.sol#881) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#935-959)
	- currentIndex ++ (0x3775876e537df71b60061151b39bcfb638f832f5.sol#956)
	DividendDistributor.currentIndex (0x3775876e537df71b60061151b39bcfb638f832f5.sol#881) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#935-959)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925):
	External calls:
	- distributeDividend(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#909)
		- (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
	State variables written after the call(s):
	- shares[shareholder].amount = dividendAmount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#923)
	DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979)
	- DividendDistributor.getUnpaidEarnings(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#987-996)
	- DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925)
	- DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#924)
	DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979)
	- DividendDistributor.getUnpaidEarnings(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#987-996)
	- DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925)
	- DividendDistributor.shares (0x3775876e537df71b60061151b39bcfb638f832f5.sol#870)
Reentrancy in Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217):
	External calls:
	- token.transfer(address(msg.sender),user.amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1194)
	- USDT.transfer(address(msg.sender),pendingUsdt) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1198)
	External calls sending eth:
	- address(msg.sender).transfer(pendingEth) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1201)
	State variables written after the call(s):
	- lastEthBalance = address(this).balance (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1202)
	Staking.lastEthBalance (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1102) can be used in cross function reentrancies:
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- totalStakedAmount = totalStakedAmount.sub(user.amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1208)
	Staking.totalStakedAmount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1097) can be used in cross function reentrancies:
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.totalStakedAmount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1097)
	- user.amount = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1209)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.depositTime = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1210)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.rewardUsdtDebt = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1211)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.pendingUsdtReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1212)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.rewardEthDebt = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1213)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.pendingEthReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1214)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

BuffettBank._totalSupply (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1361) shadows:
	- ERC20._totalSupply (0x3775876e537df71b60061151b39bcfb638f832f5.sol#345)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing

Staking.deposit(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1157-1178) ignores return value by token.transferFrom(address(msg.sender),address(this),_amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1171)
Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217) ignores return value by token.transfer(address(msg.sender),user.amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1194)
Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217) ignores return value by USDT.transfer(address(msg.sender),pendingUsdt) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1198)
Staking.harvest() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1219-1243) ignores return value by USDT.transfer(address(msg.sender),pendingUsdt) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1228)
Staking.emergencyWithdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1245-1265) ignores return value by token.transfer(address(msg.sender),amountToTransfer) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1261)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

BuffettBank.manualswapcustom(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1494-1498) performs a multiplication on the result of a division:
	- swapbalance = contractBalance.div(10 ** 5).mul(percentage) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1496)
BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635) performs a multiplication on the result of a division:
	- maxroutersell = _totalSupply.div(1000).mul(maxrouterpercent) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1593)
BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635) performs a multiplication on the result of a division:
	- half = amountForLiquidity.div(2) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1607)
	- ethLiquid = ethBalance.mul(half).div(swapAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1616)
BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635) performs a multiplication on the result of a division:
	- amountForEthReflection = contractTokenBalance.mul(_ethReflectionFee).div(_totalFee) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1602)
	- ethReflection = ethBalance.mul(amountForEthReflection).div(swapAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1617)
BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635) performs a multiplication on the result of a division:
	- amountForStaking = contractTokenBalance.mul(_stakingFee).div(_totalFee) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1603)
	- ethStaking = ethBalance.mul(amountForStaking).div(swapAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1618)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reentrancy in Staking.deposit(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1157-1178):
	External calls:
	- token.transferFrom(address(msg.sender),address(this),_amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1171)
	State variables written after the call(s):
	- totalStakedAmount = totalStakedAmount.add(_amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1173)
	Staking.totalStakedAmount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1097) can be used in cross function reentrancies:
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.totalStakedAmount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1097)
	- user.rewardUsdtDebt = user.amount.mul(accUsdtPerShare).div(PRECISION_FACTOR) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1174)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.rewardEthDebt = user.amount.mul(accEthPerShare).div(PRECISION_FACTOR) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1175)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
Reentrancy in Staking.harvest() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1219-1243):
	External calls:
	- USDT.transfer(address(msg.sender),pendingUsdt) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1228)
	State variables written after the call(s):
	- user.pendingUsdtReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1229)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
	- user.rewardUsdtDebt = user.amount.mul(accUsdtPerShare).div(PRECISION_FACTOR) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1230)
	Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104) can be used in cross function reentrancies:
	- Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- Staking.userInfo (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1104)
Reentrancy in Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217):
	External calls:
	- token.transfer(address(msg.sender),user.amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1194)
	State variables written after the call(s):
	- amountEthForReward = amountEthForReward.add(pendingEth) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1206)
	Staking.amountEthForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1091) can be used in cross function reentrancies:
	- Staking.amountEthForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1091)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
	- amountUsdtForReward = amountUsdtForReward.add(pendingUsdt) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1205)
	Staking.amountUsdtForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1086) can be used in cross function reentrancies:
	- Staking.amountUsdtForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1086)
	- Staking.distributeUsdtToStaking() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1135-1151)
	- Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217) contains a tautology or contradiction:
	- require(bool,string)(user.amount >= 0,You havent invested yet) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1187)
Staking.harvest() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1219-1243) contains a tautology or contradiction:
	- require(bool,string)(user.amount >= 0,You havent invested yet) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1221)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction

Staking.distributeUsdtToStaking() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1135-1151) ignores return value by uniswapV2Router.swapExactETHForTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1142-1147)
BuffettBank.addLiquidity(uint256,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1655-1668) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

DividendDistributor.setDistributionCriteria(uint256,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#902-905) should emit an event for: 
	- minPeriod = _minPeriod (0x3775876e537df71b60061151b39bcfb638f832f5.sol#903) 
DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925) should emit an event for: 
	- totalShares = totalShares.sub(shares[shareholder].amount).add(dividendAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#922) 
Staking.setLimitRewardUsdtPerSecond(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1153-1155) should emit an event for: 
	- limitRewardUsdtPerSecond = _limitRewardEthPerSecond (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1154) 
Staking.setTimeRequireForRewardStaking(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1180-1183) should emit an event for: 
	- requiredTimeForReward = _second (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1182) 
BuffettBank.setMaxPerWalletPercent(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1433-1436) should emit an event for: 
	- numMaxPerWalletPercent = _percentTime10 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1435) 
BuffettBank.setRouterSellLimitpercent(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1438-1440) should emit an event for: 
	- maxrouterpercent = amount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1439) 
BuffettBank.setMaxPerBuyPercent(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1442-1445) should emit an event for: 
	- numMaxPerBuyPercent = _percentTime10 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1444) 
BuffettBank.updateTaxFees(uint256,uint256,uint256,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1503-1509) should emit an event for: 
	- _liquidityFee = _liquid (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1505) 
	- _ethReflectionFee = _ethReflection (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1506) 
	- _stakingFee = _staking (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1507) 
	- _marketingFee = _marketing (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1508) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979) has external calls inside a loop: (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588):
	External calls:
	- distributor.notifyJustBuyRecently(to) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1549)
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1646-1652)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	External calls sending eth:
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
		- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	State variables written after the call(s):
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- _allowances[owner][spender] = amount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#581)
Reentrancy in DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979):
	External calls:
	- (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x3775876e537df71b60061151b39bcfb638f832f5.sol#974)
	- totalDistributed = totalDistributed.add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#973)
Reentrancy in Staking.distributeUsdtToStaking() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1135-1151):
	External calls:
	- uniswapV2Router.swapExactETHForTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1142-1147)
	State variables written after the call(s):
	- amountUsdtForReward = amountUsdtForReward.add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1150)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#907-925):
	External calls:
	- distributeDividend(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#909)
		- (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#914)
		- shareholderIndexes[shareholder] = shareholders.length (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1007)
	- removeShareholder(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#919)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1013)
	- addShareholder(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#914)
		- shareholders.push(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1008)
	- removeShareholder(shareholder) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#919)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1012)
		- shareholders.pop() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1014)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(dividendAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#922)
Reentrancy in BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635):
	External calls:
	- swapTokensForEth(swapAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1612)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1646-1652)
	- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
	- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
	External calls sending eth:
	- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
	- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
	- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
	- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
	State variables written after the call(s):
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- _allowances[owner][spender] = amount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#581)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588):
	External calls:
	- distributor.notifyJustBuyRecently(to) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1549)
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1646-1652)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	External calls sending eth:
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
		- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#582)
		- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
	- Transfer(sender,recipient,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#521)
		- super._transfer(from,address(this),fees) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1574)
	- Transfer(sender,recipient,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#521)
		- super._transfer(from,to,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1581)
Reentrancy in BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635):
	External calls:
	- swapTokensForEth(swapAmount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1612)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1646-1652)
	- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
	- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
	External calls sending eth:
	- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
	- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
	- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
	- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#582)
		- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979) tries to limit the gas of an external call that controls implicit decoding
	(success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#return-bomb

DividendDistributor.shouldDistribute(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#961-964) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > 0 && (lastBought[shareholder] + (43200)) < block.timestamp (0x3775876e537df71b60061151b39bcfb638f832f5.sol#962-963)
Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > user.depositTime.add(requiredTimeForReward) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1196)
	- pendingUsdt > 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1197)
Staking.harvest() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1219-1243) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(user.amount >= 0,You havent invested yet) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1221)
	- require(bool,string)(block.timestamp > user.depositTime.add(requiredTimeForReward),Check locking time require) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1222)
	- pendingUsdt > 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1227)
Staking.pendingReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267-1292) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > lastRewardTime && totalStakedAmount != 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1272)
	- usdtReward > amountUsdtForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1275)
Staking.ableToHarvestReward(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294-1301) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > user.depositTime.add(requiredTimeForReward) && usdtAmount > 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1297)
Staking._updatePool() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1303-1335) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= lastRewardTime (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1304)
	- usdtReward > amountUsdtForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1315)
BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= _lastSellingTime[from].add(3600),Only sell once ) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1544)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588) compares to a boolean constant:
	-require(bool,string)(isInBlacklist[from] == false,You're in blacklist) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1536)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

DividendDistributor.process(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#935-959) has costly operations inside a loop:
	- currentIndex = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#947)
DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#973)
DividendDistributor.process(uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#935-959) has costly operations inside a loop:
	- currentIndex ++ (0x3775876e537df71b60061151b39bcfb638f832f5.sol#956)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588) has a high cyclomatic complexity (17).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Context._msgData() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#21-24) is never used and should be removed
ERC20._burn(address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#554-562) is never used and should be removed
ERC20._setupDecimals(uint8) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#592-594) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

BuffettBank.numTokensSellToAddToLiquidity (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1362) is set pre-construction with a non-constant function or state variable:
	- _totalSupply / 10000
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- ^0.8.4 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in DividendDistributor.distributeDividend(address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#966-979):
	- (success,None) = address(shareholder).call{gas: 3000,value: amount}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#971)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Event Ownable.onOwnershipTransferred(address,address) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#616) is not in CapWords
Parameter Ownable.transferOwnership(address)._newOwner (0x3775876e537df71b60061151b39bcfb638f832f5.sol#629) is not in mixedCase
Variable Ownable._owner (0x3775876e537df71b60061151b39bcfb638f832f5.sol#615) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#672) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#673) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#689) is not in mixedCase
Function IUniswapV2Router01.WETH() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#710) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (0x3775876e537df71b60061151b39bcfb638f832f5.sol#902) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDividendForReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#902) is not in mixedCase
Parameter Staking.setLimitRewardUsdtPerSecond(uint256)._limitRewardEthPerSecond (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1153) is not in mixedCase
Parameter Staking.deposit(uint256)._amount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1157) is not in mixedCase
Parameter Staking.setTimeRequireForRewardStaking(uint256)._second (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1180) is not in mixedCase
Parameter Staking.pendingReward(address)._user (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1267) is not in mixedCase
Parameter Staking.ableToHarvestReward(address)._user (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1294) is not in mixedCase
Variable Staking.USDT (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1083) is not in mixedCase
Variable Staking.PRECISION_FACTOR (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1096) is not in mixedCase
Parameter BuffettBank.setMarketingWallet(address)._marketingWallet (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1423) is not in mixedCase
Parameter BuffettBank.setDevelopmentgWallet(address)._developmentWallet (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1428) is not in mixedCase
Parameter BuffettBank.setMaxPerWalletPercent(uint256)._percentTime10 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1433) is not in mixedCase
Parameter BuffettBank.setMaxPerBuyPercent(uint256)._percentTime10 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1442) is not in mixedCase
Parameter BuffettBank.setSwapAndLiquifyEnabled(bool)._enabled (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1468) is not in mixedCase
Parameter BuffettBank.setmaxrouterlimitenabled(bool)._enabled (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1472) is not in mixedCase
Parameter BuffettBank.updateTaxFees(uint256,uint256,uint256,uint256)._liquid (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1503) is not in mixedCase
Parameter BuffettBank.updateTaxFees(uint256,uint256,uint256,uint256)._ethReflection (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1503) is not in mixedCase
Parameter BuffettBank.updateTaxFees(uint256,uint256,uint256,uint256)._staking (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1503) is not in mixedCase
Parameter BuffettBank.updateTaxFees(uint256,uint256,uint256,uint256)._marketing (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1503) is not in mixedCase
Parameter BuffettBank.setDistributionCriteria(uint256,uint256)._minPeriod (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1523) is not in mixedCase
Parameter BuffettBank.setDistributionCriteria(uint256,uint256)._minTokenForReceiveReward (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1523) is not in mixedCase
Variable BuffettBank._liquidityFee (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1347) is not in mixedCase
Variable BuffettBank._ethReflectionFee (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1348) is not in mixedCase
Variable BuffettBank._stakingFee (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1349) is not in mixedCase
Variable BuffettBank._marketingFee (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1350) is not in mixedCase
Variable BuffettBank._isFeesExempt (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1353) is not in mixedCase
Variable BuffettBank._isDividendExempt (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1354) is not in mixedCase
Variable BuffettBank._isMaxPerWalletExempt (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1355) is not in mixedCase
Variable BuffettBank._isMaxBuyExempt (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1356) is not in mixedCase
Variable BuffettBank._lastSellingTime (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1359) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x3775876e537df71b60061151b39bcfb638f832f5.sol#22)" inContext (0x3775876e537df71b60061151b39bcfb638f832f5.sol#16-25)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in BuffettBank._transfer(address,address,uint256) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1527-1588):
	External calls:
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
		- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
	External calls sending eth:
	- swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1562)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
		- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
		- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
		- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
		- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	State variables written after the call(s):
	- super._transfer(from,address(this),fees) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1574)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#519)
		- _balances[recipient] = _balances[recipient].add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#520)
	- super._transfer(from,to,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1581)
		- _balances[sender] = _balances[sender].sub(amount,ERC20: transfer amount exceeds balance) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#519)
		- _balances[recipient] = _balances[recipient].add(amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#520)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#521)
		- super._transfer(from,to,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1581)
	- Transfer(sender,recipient,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#521)
		- super._transfer(from,address(this),fees) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1574)
Reentrancy in Staking.harvest() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1219-1243):
	External calls:
	- address(msg.sender).transfer(pendingEth) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1236)
	State variables written after the call(s):
	- lastEthBalance = address(this).balance (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1240)
	- user.pendingEthReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1237)
	- user.rewardEthDebt = user.amount.mul(accEthPerShare).div(PRECISION_FACTOR) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1238)
	Event emitted after the call(s):
	- Harvest(msg.sender,pendingEth) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1241)
Reentrancy in BuffettBank.swapAndSend() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1590-1635):
	External calls:
	- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
	- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
	External calls sending eth:
	- address(marketingWallet).transfer(ethMarketingAndDev.mul(70).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1622)
	- address(developmentWallet).transfer(ethMarketingAndDev.mul(30).div(100)) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1623)
	- distributor.deposit{value: ethReflection}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1627)
	- staking.distributeUsdtToStaking{value: ethStaking}() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1630)
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1660-1667)
	State variables written after the call(s):
	- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
		- _allowances[owner][spender] = amount (0x3775876e537df71b60061151b39bcfb638f832f5.sol#581)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#582)
		- addLiquidity(otherHalf,ethLiquid) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1634)
Reentrancy in Staking.withdraw() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1185-1217):
	External calls:
	- address(msg.sender).transfer(pendingEth) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1201)
	State variables written after the call(s):
	- lastEthBalance = address(this).balance (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1202)
	- totalStakedAmount = totalStakedAmount.sub(user.amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1208)
	- user.amount = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1209)
	- user.depositTime = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1210)
	- user.rewardUsdtDebt = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1211)
	- user.pendingUsdtReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1212)
	- user.rewardEthDebt = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1213)
	- user.pendingEthReward = 0 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1214)
	Event emitted after the call(s):
	- Withdraw(msg.sender,user.amount) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1216)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

BuffettBank.slitherConstructorVariables() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1339-1671) uses literals with too many digits:
	- _totalSupply = 69000000000 * (10 ** 18) (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1361)
BuffettBank.slitherConstructorVariables() (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1339-1671) uses literals with too many digits:
	- distributorGas = 300000 (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1374)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

BuffettBank.swapping (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1345) is never used in BuffettBank (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1339-1671)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

BuffettBank._totalSupply (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1361) should be constant 
BuffettBank.distributorGas (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1374) should be constant 
BuffettBank.swapping (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1345) should be constant 
DividendDistributor.dividendsPerShareAccuracyFactor (0x3775876e537df71b60061151b39bcfb638f832f5.sol#876) should be constant 
Staking.USDT (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1083) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

BuffettBank.distributor (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1373) should be immutable 
BuffettBank.numTokensSellToAddToLiquidity (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1362) should be immutable 
BuffettBank.staking (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1376) should be immutable 
BuffettBank.uniswapV2Pair (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1343) should be immutable 
BuffettBank.uniswapV2Router (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1342) should be immutable 
DividendDistributor._token (0x3775876e537df71b60061151b39bcfb638f832f5.sol#857) should be immutable 
Staking.PRECISION_FACTOR (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1096) should be immutable 
Staking.token (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1082) should be immutable 
Staking.uniswapV2Router (0x3775876e537df71b60061151b39bcfb638f832f5.sol#1116) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x3775876e537df71b60061151b39bcfb638f832f5.sol analyzed (14 contracts with 94 detectors), 118 result(s) found

real	0m6.429s
user	0m6.186s
sys	0m0.244s
