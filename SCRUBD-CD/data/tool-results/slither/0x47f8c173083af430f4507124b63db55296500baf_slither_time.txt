'solc --version' running
'solc ./0x47f8c173083af430f4507124b63db55296500baf.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x47f8c173083af430f4507124b63db55296500baf.sol:
./0x47f8c173083af430f4507124b63db55296500baf.sol:5:5: Warning: No visibility specified. Defaulting to "public".
    function balanceOf(address who) constant returns (uint);
    ^------------------------------------------------------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:40:5: Warning: No visibility specified. Defaulting to "public".
    function Deal(address tokenAddress, address _owner, address _fee) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:84:5: Warning: No visibility specified. Defaulting to "public".
    function changeFeeAddress(address newFee) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:88:5: Warning: No visibility specified. Defaulting to "public".
    function createCampaign(bytes32 id, uint value, address campaignCreator) onlyOwner returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:95:5: Warning: No visibility specified. Defaulting to "public".
    function addTokensToCampaign(bytes32 id, uint value) onlyOwner returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:101:5: Warning: No visibility specified. Defaulting to "public".
    function updateTokenAddress(address newAddr) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:105:5: Warning: No visibility specified. Defaulting to "public".
    function destroyCampaign(bytes32 id) onlyOwner returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:127:5: Warning: No visibility specified. Defaulting to "public".
    function finishCampaign(bytes32 id) onlyOwner returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:133:5: Warning: No visibility specified. Defaulting to "public".
    function sendCoin(address[] _routerOwners, uint[] amount, bytes32 id) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:138:14: Warning: Use of the "var" keyword is deprecated.
        for (var i = 0; i < amount.length; i++) {
             ^---^
./0x47f8c173083af430f4507124b63db55296500baf.sol:92:8: Warning: Invoking events without "emit" prefix is deprecated.
       CreateCampaign(id);
       ^----------------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:138:14: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.
        for (var i = 0; i < amount.length; i++) {
             ^-------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:143:9: Warning: Invoking events without "emit" prefix is deprecated.
        SendCoinForCampaign(id);
        ^---------------------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:95:77: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function addTokensToCampaign(bytes32 id, uint value) onlyOwner returns (bool success) {
                                                                            ^----------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:105:61: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function destroyCampaign(bytes32 id) onlyOwner returns (bool success) {
                                                            ^----------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:127:60: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function finishCampaign(bytes32 id) onlyOwner returns (bool success) {
                                                           ^----------^
./0x47f8c173083af430f4507124b63db55296500baf.sol:52:5: Warning: Function state mutability can be restricted to pure
    function safeMul(uint a, uint b) internal returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:58:5: Warning: Function state mutability can be restricted to pure
    function safeDiv(uint a, uint b) internal returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:65:5: Warning: Function state mutability can be restricted to pure
    function safeSub(uint a, uint b) internal returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:70:5: Warning: Function state mutability can be restricted to pure
    function safeAdd(uint a, uint b) internal returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
./0x47f8c173083af430f4507124b63db55296500baf.sol:76:5: Warning: Function state mutability can be restricted to pure
    function sum(uint[] array) public returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).


Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93) uses arbitrary from in transferFrom: token.transferFrom(campaignCreator,this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#90)
Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99) uses arbitrary from in transferFrom: token.transferFrom(getAddressCreatorById(id),this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#96)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom

Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93) ignores return value by token.transferFrom(campaignCreator,this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#90)
Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99) ignores return value by token.transferFrom(getAddressCreatorById(id),this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#96)
Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109) ignores return value by token.transfer(campaigns[id].creator,campaigns[id].tokenAmount) (0x47f8c173083af430f4507124b63db55296500baf.sol#106)
Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131) ignores return value by token.transfer(campaigns[id].creator,campaigns[id].currentBalance) (0x47f8c173083af430f4507124b63db55296500baf.sol#129)
Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144) ignores return value by token.transfer(_routerOwners[i],safeDiv(safeMul(amount[i],95),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#139)
Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144) ignores return value by token.transfer(fee,safeDiv(safeMul(sum(amount),5),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#141)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99):
	External calls:
	- token.transferFrom(getAddressCreatorById(id),this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#96)
	State variables written after the call(s):
	- campaigns[id].tokenAmount += value (0x47f8c173083af430f4507124b63db55296500baf.sol#97)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
	- campaigns[id].currentBalance += value (0x47f8c173083af430f4507124b63db55296500baf.sol#98)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
Reentrancy in Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93):
	External calls:
	- token.transferFrom(campaignCreator,this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#90)
	State variables written after the call(s):
	- campaigns[id] = Campaign(campaignCreator,value,value,Status.created) (0x47f8c173083af430f4507124b63db55296500baf.sol#91)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
Reentrancy in Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109):
	External calls:
	- token.transfer(campaigns[id].creator,campaigns[id].tokenAmount) (0x47f8c173083af430f4507124b63db55296500baf.sol#106)
	State variables written after the call(s):
	- campaigns[id].status = Status.destroyed (0x47f8c173083af430f4507124b63db55296500baf.sol#107)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
	- campaigns[id].currentBalance = 0 (0x47f8c173083af430f4507124b63db55296500baf.sol#108)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
Reentrancy in Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131):
	External calls:
	- token.transfer(campaigns[id].creator,campaigns[id].currentBalance) (0x47f8c173083af430f4507124b63db55296500baf.sol#129)
	State variables written after the call(s):
	- campaigns[id].currentBalance = 0 (0x47f8c173083af430f4507124b63db55296500baf.sol#130)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
Reentrancy in Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144):
	External calls:
	- token.transfer(_routerOwners[i],safeDiv(safeMul(amount[i],95),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#139)
	- token.transfer(fee,safeDiv(safeMul(sum(amount),5),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#141)
	State variables written after the call(s):
	- campaigns[id].currentBalance = safeSub(campaigns[id].currentBalance,sum(amount)) (0x47f8c173083af430f4507124b63db55296500baf.sol#142)
	Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33) can be used in cross function reentrancies:
	- Deal.addTokensToCampaign(bytes32,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#95-99)
	- Deal.campaigns (0x47f8c173083af430f4507124b63db55296500baf.sol#33)
	- Deal.checkStatus(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#111-113)
	- Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93)
	- Deal.destroyCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#105-109)
	- Deal.finishCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#127-131)
	- Deal.getAddressCreatorById(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#115-117)
	- Deal.getCurrentBalanceForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#123-125)
	- Deal.getTokenAmountForCampaign(bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#119-121)
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Deal.transferOwnership(address) (0x47f8c173083af430f4507124b63db55296500baf.sol#46-50) should emit an event for: 
	- owner = newOwner (0x47f8c173083af430f4507124b63db55296500baf.sol#48) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Deal.Deal(address,address,address)._owner (0x47f8c173083af430f4507124b63db55296500baf.sol#40) lacks a zero-check on :
		- owner = _owner (0x47f8c173083af430f4507124b63db55296500baf.sol#41)
Deal.Deal(address,address,address)._fee (0x47f8c173083af430f4507124b63db55296500baf.sol#40) lacks a zero-check on :
		- fee = _fee (0x47f8c173083af430f4507124b63db55296500baf.sol#42)
Deal.changeFeeAddress(address).newFee (0x47f8c173083af430f4507124b63db55296500baf.sol#84) lacks a zero-check on :
		- fee = newFee (0x47f8c173083af430f4507124b63db55296500baf.sol#85)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144) has external calls inside a loop: token.transfer(_routerOwners[i],safeDiv(safeMul(amount[i],95),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#139)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in Deal.createCampaign(bytes32,uint256,address) (0x47f8c173083af430f4507124b63db55296500baf.sol#88-93):
	External calls:
	- token.transferFrom(campaignCreator,this,value) (0x47f8c173083af430f4507124b63db55296500baf.sol#90)
	Event emitted after the call(s):
	- CreateCampaign(id) (0x47f8c173083af430f4507124b63db55296500baf.sol#92)
Reentrancy in Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144):
	External calls:
	- token.transfer(_routerOwners[i],safeDiv(safeMul(amount[i],95),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#139)
	- token.transfer(fee,safeDiv(safeMul(sum(amount),5),100)) (0x47f8c173083af430f4507124b63db55296500baf.sol#141)
	Event emitted after the call(s):
	- SendCoinForCampaign(id) (0x47f8c173083af430f4507124b63db55296500baf.sol#143)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Deal.safeAdd(uint256,uint256) (0x47f8c173083af430f4507124b63db55296500baf.sol#70-74) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint ^0.4.21 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.21 (0x47f8c173083af430f4507124b63db55296500baf.sol#1)
solc-0.4.21 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Deal.sendCoin(address[],uint256[],bytes32)._routerOwners (0x47f8c173083af430f4507124b63db55296500baf.sol#133) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

transfer(address,uint256,bytes) should be declared external:
	- ERC223Interface.transfer(address,uint256,bytes) (0x47f8c173083af430f4507124b63db55296500baf.sol#7)
sendCoin(address[],uint256[],bytes32) should be declared external:
	- Deal.sendCoin(address[],uint256[],bytes32) (0x47f8c173083af430f4507124b63db55296500baf.sol#133-144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./0x47f8c173083af430f4507124b63db55296500baf.sol analyzed (2 contracts with 94 detectors), 26 result(s) found

real	0m1.875s
user	0m1.635s
sys	0m0.243s
