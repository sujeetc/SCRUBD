{"error": null, "issues": [{"address": 11, "code": "function Conference() {\r\n\t\torganizer = msg.sender;\t\t\r\n\t\tquota = 100;\r\n\t\tnumRegistrants = 0;\r\n\t}", "contract": "Conference", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x7fe180e63198e50057c3f2817d058e8904c650e3.sol", "function": "constructor", "lineno": 13, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "396:95", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606460038190555060006002819055505b5b61060d8061006f6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313381fbf1461008e57806361203265146100d8578063705099b91461012a57806383197ef014610169578063a977c71e1461017b578063cebe09c91461019b578063ec3a6f73146101c1578063edca914c146101e7575bfe5b341561009657fe5b6100c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506101f9565b6040518082815260200191505060405180910390f35b34156100e057fe5b6100e8610211565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013257fe5b610167600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610237565b005b341561017157fe5b610179610403565b005b341561018357fe5b6101996004808035906020019091905050610497565b005b34156101a357fe5b6101ab6104fe565b6040518082815260200191505060405180910390f35b34156101c957fe5b6101d1610504565b6040518082815260200191505060405180910390f35b34156101ef57fe5b6101f761050a565b005b60016020528060005260406000206000915090505481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610295576103fe565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156103fd57309050818173ffffffffffffffffffffffffffffffffffffffff16311015156103fc578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051809050600060405180830381858888f19350505050507fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260008154809291906001900391905055505b5b5b505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561049457600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104f3576104fb565b806003819055505b50565b60035481565b60025481565b60035460025410151561051d5760006000fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002600081548092919060010191905055507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5600a165627a7a72305820b84ea61ec2018800a99fa4a1b41ed6b2bc4259c38c2944fd1b84068db8b61db20029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 141, "code": "contract Conference {  // can be killed, so the owner gets sent the money in the end\r\n\r\n\taddress public organizer;\r\n\tmapping (address => uint) public registrantsPaid;\r\n\tuint public numRegistrants;\r\n\tuint public quota;\r\n\r\n\tevent Deposit(address _from, uint _amount); // so you can log the event\r\n\tevent Refund(address _to, uint _amount); // so you can log the event\r\n\r\n\tfunction Conference() {\r\n\t\torganizer = msg.sender;\t\t\r\n\t\tquota = 100;\r\n\t\tnumRegistrants = 0;\r\n\t}\r\n\r\n\tfunction buyTicket() public {\r\n\t\tif (numRegistrants >= quota) { \r\n\t\t\tthrow; // throw ensures funds will be returned\r\n\t\t}\r\n\t\tregistrantsPaid[msg.sender] = msg.value;\r\n\t\tnumRegistrants++;\r\n\t\tDeposit(msg.sender, msg.value);\r\n\t}\r\n\r\n\tfunction changeQuota(uint newquota) public {\r\n\t\tif (msg.sender != organizer) { return; }\r\n\t\tquota = newquota;\r\n\t}\r\n\r\n\tfunction refundTicket(address recipient, uint amount) public {\r\n\t\tif (msg.sender != organizer) { return; }\r\n\t\tif (registrantsPaid[recipient] == amount) { \r\n\t\t\taddress myAddress = this;\r\n\t\t\tif (myAddress.balance >= amount) { \r\n\t\t\t\t(recipient.send(amount));\r\n\t\t\t\tRefund(recipient, amount);\r\n\t\t\t\tregistrantsPaid[recipient] = 0;\r\n\t\t\t\tnumRegistrants--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\tfunction destroy() {\r\n\t\tif (msg.sender == organizer) { // without this funds could be locked in the contract forever!\r\n\t\t\tsuicide(organizer);\r\n\t\t}\r\n\t}\r\n}", "contract": "Conference", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x7fe180e63198e50057c3f2817d058e8904c650e3.sol", "function": "fallback", "lineno": 3, "max_gas_used": 132, "min_gas_used": 37, "severity": "Medium", "sourceMap": "27:1347:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606460038190555060006002819055505b5b61060d8061006f6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313381fbf1461008e57806361203265146100d8578063705099b91461012a57806383197ef014610169578063a977c71e1461017b578063cebe09c91461019b578063ec3a6f73146101c1578063edca914c146101e7575bfe5b341561009657fe5b6100c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506101f9565b6040518082815260200191505060405180910390f35b34156100e057fe5b6100e8610211565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013257fe5b610167600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610237565b005b341561017157fe5b610179610403565b005b341561018357fe5b6101996004808035906020019091905050610497565b005b34156101a357fe5b6101ab6104fe565b6040518082815260200191505060405180910390f35b34156101c957fe5b6101d1610504565b6040518082815260200191505060405180910390f35b34156101ef57fe5b6101f761050a565b005b60016020528060005260406000206000915090505481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610295576103fe565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156103fd57309050818173ffffffffffffffffffffffffffffffffffffffff16311015156103fc578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051809050600060405180830381858888f19350505050507fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260008154809291906001900391905055505b5b5b505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561049457600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104f3576104fb565b806003819055505b50565b60035481565b60025481565b60035460025410151561051d5760006000fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002600081548092919060010191905055507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5600a165627a7a72305820b84ea61ec2018800a99fa4a1b41ed6b2bc4259c38c2944fd1b84068db8b61db20029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "value": "0x0"}]}}, {"address": 818, "code": "recipient.send(amount)", "contract": "Conference", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "filename": "./0x7fe180e63198e50057c3f2817d058e8904c650e3.sol", "function": "refundTicket(address,uint256)", "lineno": 38, "max_gas_used": 90976, "min_gas_used": 15353, "severity": "Medium", "sourceMap": "1074:22", "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606460038190555060006002819055505b5b61060d8061006f6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313381fbf1461008e57806361203265146100d8578063705099b91461012a57806383197ef014610169578063a977c71e1461017b578063cebe09c91461019b578063ec3a6f73146101c1578063edca914c146101e7575bfe5b341561009657fe5b6100c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506101f9565b6040518082815260200191505060405180910390f35b34156100e057fe5b6100e8610211565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013257fe5b610167600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610237565b005b341561017157fe5b610179610403565b005b341561018357fe5b6101996004808035906020019091905050610497565b005b34156101a357fe5b6101ab6104fe565b6040518082815260200191505060405180910390f35b34156101c957fe5b6101d1610504565b6040518082815260200191505060405180910390f35b34156101ef57fe5b6101f761050a565b005b60016020528060005260406000206000915090505481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610295576103fe565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156103fd57309050818173ffffffffffffffffffffffffffffffffffffffff16311015156103fc578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051809050600060405180830381858888f19350505050507fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260008154809291906001900391905055505b5b5b505050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561049457600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104f3576104fb565b806003819055505b50565b60035481565b60025481565b60035460025410151561051d5760006000fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002600081548092919060010191905055507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5600a165627a7a72305820b84ea61ec2018800a99fa4a1b41ed6b2bc4259c38c2944fd1b84068db8b61db20029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x705099b9", "input": "0x705099b9", "name": "refundTicket(address,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x705099b9", "input": "0x705099b9", "name": "refundTicket(address,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}], "success": true}
