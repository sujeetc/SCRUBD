{
    "0x03fb31bb6def4dd3a7ea3b0fa6bdecc940e75795.sol": [
        {
            "attack_type": "DAO",
            "composed_functions": [
                "bid",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "bid",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 305\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 306\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 307\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 309\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 310\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 311\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 312\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 315\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 320\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 321\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "bid",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "bid",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 326\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 327\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 328\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 330\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 331\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 332\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 333\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 336\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 341\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 342\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "bid",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "bid",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 122\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "bid",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "bid",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 122\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "bid",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "bid",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "bid",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "bid",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 119\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 135\nFunction: collect\nNode: \nEXPRESSION tokenOpenForSale[_mintableToken][tokenID] = false\nIRS: \nREF_138 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 119\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 135\nFunction: collect\nNode: \nEXPRESSION tokenOpenForSale[_mintableToken][tokenID] = false\nIRS: \nREF_138 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 355\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 348\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 351\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 352\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 356\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 357\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 358\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 360\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 363\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 365\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 379\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 382\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 383\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 387\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 388\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 389\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 391\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 394\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 396\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 417\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 410\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 413\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 414\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 418\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 419\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 420\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 422\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 425\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 427\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 441\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 444\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 445\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 449\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 450\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 451\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 453\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 456\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 458\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 171\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 135\nFunction: collect\nNode: \nEXPRESSION tokenOpenForSale[_mintableToken][tokenID] = false\nIRS: \nREF_138 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 171\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 135\nFunction: collect\nNode: \nEXPRESSION tokenOpenForSale[_mintableToken][tokenID] = false\nIRS: \nREF_138 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "collect",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "collect",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 119\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 163\nFunction: buy\nNode: \nEXPRESSION tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] = false\nIRS: \nREF_181 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 113\nFunction: bid\nNode: \nEXPRESSION auctions[_mintableToken][tokenID] = _auction\nIRS: \nREF_110 := _auction\"",
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 119\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 163\nFunction: buy\nNode: \nEXPRESSION tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] = false\nIRS: \nREF_181 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "bid"
            ],
            "from_function": "bid",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 100\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 101\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(msg.value > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_93 = SOLIDITY_CALL require(bool,string)(TMP_92,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 102\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= amount,Allowance is less than amount sent for bidding.)\nIRS: \nTMP_98(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_97']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: bid\nNode: \nEXPRESSION require(bool,string)(amount > _auction.currentBid,Insufficient bidding amount.)\nIRS: \nTMP_102 = SOLIDITY_CALL require(bool,string)(TMP_101,Insufficient bidding amount.)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 105\nFunction: bid\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),amount)\nIRS: \nTMP_104(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_103', 'amount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_105\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 107\nFunction: bid\nNode: \nEXPRESSION erc20Token.transfer(_auction.highestBidder,_auction.currentBid)\nIRS: \nTMP_106(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['REF_103', 'REF_104']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 110\nFunction: bid\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_114\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 115\nFunction: bid\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_94\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: bid\nNode: \nEXPRESSION _auction.highestBidder.transfer(_auction.currentBid)\nIRS: \nTransfer dest:REF_94 value:REF_96\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: collect\nNode: \nEXPRESSION delete auctions[_mintableToken][tokenID]\nIRS: \nREF_156 = delete REF_156 \"",
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 122\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "collect"
            ],
            "from_function": "collect",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 122\nFunction: collect\nNode: \nEXPRESSION require(bool,string)(block.timestamp > _auction.closingTime,Auction Not Over!)\nIRS: \nTMP_120 = SOLIDITY_CALL require(bool,string)(TMP_119,Auction Not Over!)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: collect\nNode: \nIF _auction.buyer == true\nIRS: \nCONDITION TMP_129\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 126\nFunction: collect\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_131\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: collect\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 131\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(creator,royality)\nIRS: \nTMP_135(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: collect\nNode: \nEXPRESSION erc20Token.transfer(lastOwner2,lastOwner_funds)\nIRS: \nTMP_136(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transfer, arguments:['lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: collect\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_136 = REF_136 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 137\nFunction: collect\nNode: \nEXPRESSION Token.safeTransferFrom(Token.ownerOf(tokenID),_auction.highestBidder,tokenID)\nIRS: \nHIGH_LEVEL_CALL, dest:Token(IMintableToken), function:safeTransferFrom, arguments:['TMP_137', 'REF_141', 'tokenID']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: collect\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 486\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 473\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 474\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 475\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 476\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 477\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 478\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 479\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 481\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 487\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 488\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 490\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 163\nFunction: buy\nNode: \nEXPRESSION tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] = false\nIRS: \nREF_181 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 154\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 155\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 156\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 157\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 158\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 159\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 160\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 162\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 168\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 519\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \"",
                        "\"BlockID: 169\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 506\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 507\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 508\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 509\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 510\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 511\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 512\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 514\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 520\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 521\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 523\nFunction: onSaleOnly\nNode: \nEXPRESSION require(bool,string)(tokenOpenForSale[_mintableToken][tokenID] == true,Token Not For Sale)\nIRS: \nTMP_250 = SOLIDITY_CALL require(bool,string)(TMP_249,Token Not For Sale)\"",
                        "\"BlockID: 163\nFunction: buy\nNode: \nEXPRESSION tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] = false\nIRS: \nREF_181 := false\""
                    ],
                    "state_variable": "tokenOpenForSale"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 539\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 540\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 541\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 542\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 543\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 544\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 545\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 547\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 553\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 554\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buy",
                "buy"
            ],
            "from_function": "buy",
            "to_function": "buy",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 572\nFunction: buy\nNode: \nIF _auction.erc20Token == address(0)\nIRS: \nCONDITION TMP_155\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 573\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(msg.value >= _auction.buyPrice,Insufficient Payment)\nIRS: \nTMP_157 = SOLIDITY_CALL require(bool,string)(TMP_156,Insufficient Payment)\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 574\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_162(uint256) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:allowance, arguments:['msg.sender', 'TMP_161']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 575\nFunction: buy\nNode: \nEXPRESSION require(bool,string)(erc20Token.allowance(msg.sender,address(this)) >= _auction.buyPrice,Insufficient spent allowance )\nIRS: \nTMP_164 = SOLIDITY_CALL require(bool,string)(TMP_163,Insufficient spent allowance )\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 576\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,creator,royality)\nIRS: \nTMP_165(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'creator', 'royality']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 577\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,address(this),brokerageAmount)\nIRS: \nTMP_167(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'TMP_166', 'brokerageAmount']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 578\nFunction: buy\nNode: \nEXPRESSION erc20Token.transferFrom(msg.sender,lastOwner2,lastOwner_funds)\nIRS: \nTMP_168(bool) = HIGH_LEVEL_CALL, dest:erc20Token(IERC20), function:transferFrom, arguments:['msg.sender', 'lastOwner2', 'lastOwner_funds']  \"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 580\nFunction: buy\nNode: \nEXPRESSION brokerageBalance[_auction.erc20Token] += brokerageAmount\nIRS: \nREF_177 = REF_177 + brokerageAmount\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 586\nFunction: buy\nNode: \nEXPRESSION creator.transfer(royality)\nIRS: \nTransfer dest:creator value:royality\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                },
                {
                    "path": [
                        "\"BlockID: 587\nFunction: buy\nNode: \nEXPRESSION lastOwner2.transfer(lastOwner_funds)\nIRS: \nTransfer dest:lastOwner2 value:lastOwner_funds\"",
                        "\"BlockID: 167\nFunction: buy\nNode: \nEXPRESSION delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID]\nIRS: \nREF_197 = delete REF_197 \""
                    ],
                    "state_variable": "auctions"
                }
            ]
        }
    ]
}