{
    "0x24a57f642948e36e8f0ce0a4b3b940cbfe14bd4c.sol": [
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buyTokens",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "buyTokens",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 38\nFunction: buyTokens\nNode: \nIF erc20TokensContract.balanceOf(this) < _quantity\nIRS: \nTMP_25(uint256) = HIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:balanceOf, arguments:['this']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 40\nFunction: buyTokens\nNode: \nEXPRESSION erc20TokensContract.transfer(msg.sender,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['msg.sender', '_quantity']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 41\nFunction: buyTokens\nNode: \nIF currentBalance == erc20TokensContract.balanceOf(this)\nIRS: \nTMP_28(uint256) = HIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:balanceOf, arguments:['this']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buyTokens",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "buyTokens",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 40\nFunction: buyTokens\nNode: \nEXPRESSION erc20TokensContract.transfer(msg.sender,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['msg.sender', '_quantity']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 41\nFunction: buyTokens\nNode: \nIF currentBalance == erc20TokensContract.balanceOf(this)\nIRS: \nTMP_28(uint256) = HIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:balanceOf, arguments:['this']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buyTokens",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "buyTokens",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 41\nFunction: buyTokens\nNode: \nIF currentBalance == erc20TokensContract.balanceOf(this)\nIRS: \nTMP_28(uint256) = HIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:balanceOf, arguments:['this']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "transferTokensTo",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "transferTokensTo",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 49\nFunction: transferTokensTo\nNode: \nIF erc20TokensContract.balanceOf(this) < _quantity\nIRS: \nCONDITION TMP_35\""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 50\nFunction: transferTokensTo\nNode: \nEXPRESSION erc20TokensContract.transfer(_to,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['_to', '_quantity']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "transferAllTokensToOwner",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "transferAllTokensToOwner",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 55\nFunction: transferTokensTo\nNode: \nIF _quantity <= 0\nIRS: \nCONDITION TMP_33\""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 56\nFunction: transferTokensTo\nNode: \nIF erc20TokensContract.balanceOf(this) < _quantity\nIRS: \nTMP_34(uint256) = HIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:balanceOf, arguments:['this']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 57\nFunction: transferTokensTo\nNode: \nIF erc20TokensContract.balanceOf(this) < _quantity\nIRS: \nCONDITION TMP_35\""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 58\nFunction: transferTokensTo\nNode: \nEXPRESSION erc20TokensContract.transfer(_to,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['_to', '_quantity']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "transferAllTokensToOwner",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "transferAllTokensToOwner",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 57\nFunction: transferTokensTo\nNode: \nIF erc20TokensContract.balanceOf(this) < _quantity\nIRS: \nCONDITION TMP_35\""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 58\nFunction: transferTokensTo\nNode: \nEXPRESSION erc20TokensContract.transfer(_to,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['_to', '_quantity']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "transferAllTokensToOwner",
                "changeOwner"
            ],
            "from_function": "changeOwner",
            "to_function": "transferAllTokensToOwner",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 15\nFunction: changeOwner\nNode: \nEXPRESSION owner = _newOwner\nIRS: \nowner := _newOwner\"",
                        "\"BlockID: 54\nFunction: transferTokensTo\nNode: \nIF msg.sender != owner\nIRS: \nCONDITION TMP_32\""
                    ],
                    "state_variable": "owner"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: changeOwner\nNode: \nEXPRESSION owner = _newOwner\nIRS: \nowner := _newOwner\"",
                        "\"BlockID: 58\nFunction: transferTokensTo\nNode: \nEXPRESSION erc20TokensContract.transfer(_to,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['_to', '_quantity']  \""
                    ],
                    "state_variable": "owner"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "transferTokensToContractOwner",
                "setErc20TokensContract"
            ],
            "from_function": "setErc20TokensContract",
            "to_function": "transferTokensToContractOwner",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 65\nFunction: transferTokensTo\nNode: \nIF erc20TokensContract.balanceOf(this) < _quantity\nIRS: \nCONDITION TMP_35\""
                    ],
                    "state_variable": "erc20TokensContract"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: setErc20TokensContract\nNode: \nEXPRESSION erc20TokensContract = Erc20TokensContract(_erc20TokensContractAddress)\nIRS: \nerc20TokensContract := TMP_2\"",
                        "\"BlockID: 66\nFunction: transferTokensTo\nNode: \nEXPRESSION erc20TokensContract.transfer(_to,_quantity)\nIRS: \nHIGH_LEVEL_CALL, dest:erc20TokensContract(Erc20TokensContract), function:transfer, arguments:['_to', '_quantity']  \""
                    ],
                    "state_variable": "erc20TokensContract"
                }
            ]
        }
    ]
}