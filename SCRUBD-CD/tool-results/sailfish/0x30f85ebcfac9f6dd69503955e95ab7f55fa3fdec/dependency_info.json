{
    "0x30f85ebcfac9f6dd69503955e95ab7f55fa3fdec.sol": [
        {
            "attack_type": "DAO",
            "composed_functions": [
                "createSwap",
                "withdraw"
            ],
            "from_function": "withdraw",
            "to_function": "createSwap",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 21\nFunction: withdraw\nNode: \nEXPRESSION require(bool)(swap.secretHash == ripemd160()(_secret))\nIRS: \nTMP_37 = SOLIDITY_CALL require(bool)(TMP_36)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 22\nFunction: withdraw\nNode: \nEXPRESSION require(bool)(swap.balance > uint256(0))\nIRS: \nTMP_40 = SOLIDITY_CALL require(bool)(TMP_39)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 23\nFunction: withdraw\nNode: \nEXPRESSION require(bool)(swap.createdAt.add(SafeTime) > now)\nIRS: \nTMP_43 = SOLIDITY_CALL require(bool)(TMP_42)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw\nNode: \nEXPRESSION ERC20(swap.token).transfer(swap.targetWallet,swap.balance)\nIRS: \nHIGH_LEVEL_CALL, dest:TMP_44(ERC20), function:transfer, arguments:['REF_26', 'REF_27']  \"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "createSwap",
                "withdrawNoMoney"
            ],
            "from_function": "withdrawNoMoney",
            "to_function": "createSwap",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 31\nFunction: withdrawNoMoney\nNode: \nEXPRESSION require(bool)(swap.secretHash == ripemd160()(_secret))\nIRS: \nTMP_49 = SOLIDITY_CALL require(bool)(TMP_48)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdrawNoMoney\nNode: \nEXPRESSION require(bool)(swap.balance > uint256(0))\nIRS: \nTMP_52 = SOLIDITY_CALL require(bool)(TMP_51)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 33\nFunction: withdrawNoMoney\nNode: \nEXPRESSION require(bool)(swap.createdAt.add(SafeTime) > now)\nIRS: \nTMP_55 = SOLIDITY_CALL require(bool)(TMP_54)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdrawNoMoney\nNode: \nEXPRESSION ERC20(swap.token).transfer(swap.targetWallet,swap.balance)\nIRS: \nHIGH_LEVEL_CALL, dest:TMP_56(ERC20), function:transfer, arguments:['REF_42', 'REF_43']  \"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "createSwap",
                "refund"
            ],
            "from_function": "refund",
            "to_function": "createSwap",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 41\nFunction: refund\nNode: \nEXPRESSION require(bool)(swap.balance > uint256(0))\nIRS: \nTMP_61 = SOLIDITY_CALL require(bool)(TMP_60)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: refund\nNode: \nEXPRESSION require(bool)(swap.createdAt.add(SafeTime) < now)\nIRS: \nTMP_64 = SOLIDITY_CALL require(bool)(TMP_63)\"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 43\nFunction: refund\nNode: \nEXPRESSION ERC20(swap.token).transfer(msg.sender,swap.balance)\nIRS: \nHIGH_LEVEL_CALL, dest:TMP_65(ERC20), function:transfer, arguments:['msg.sender', 'REF_60']  \"",
                        "\"BlockID: 8\nFunction: createSwap\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_participantAddress,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_5 := TMP_22\""
                    ],
                    "state_variable": "swaps"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "createSwapTarget",
                "withdraw"
            ],
            "from_function": "withdraw",
            "to_function": "createSwapTarget",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 21\nFunction: withdraw\nNode: \nEXPRESSION require(bool)(swap.secretHash == ripemd160()(_secret))\nIRS: \nTMP_37 = SOLIDITY_CALL require(bool)(TMP_36)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 22\nFunction: withdraw\nNode: \nEXPRESSION require(bool)(swap.balance > uint256(0))\nIRS: \nTMP_40 = SOLIDITY_CALL require(bool)(TMP_39)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 23\nFunction: withdraw\nNode: \nEXPRESSION require(bool)(swap.createdAt.add(SafeTime) > now)\nIRS: \nTMP_43 = SOLIDITY_CALL require(bool)(TMP_42)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw\nNode: \nEXPRESSION ERC20(swap.token).transfer(swap.targetWallet,swap.balance)\nIRS: \nHIGH_LEVEL_CALL, dest:TMP_44(ERC20), function:transfer, arguments:['REF_26', 'REF_27']  \"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "createSwapTarget",
                "withdrawNoMoney"
            ],
            "from_function": "withdrawNoMoney",
            "to_function": "createSwapTarget",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 31\nFunction: withdrawNoMoney\nNode: \nEXPRESSION require(bool)(swap.secretHash == ripemd160()(_secret))\nIRS: \nTMP_49 = SOLIDITY_CALL require(bool)(TMP_48)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdrawNoMoney\nNode: \nEXPRESSION require(bool)(swap.balance > uint256(0))\nIRS: \nTMP_52 = SOLIDITY_CALL require(bool)(TMP_51)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 33\nFunction: withdrawNoMoney\nNode: \nEXPRESSION require(bool)(swap.createdAt.add(SafeTime) > now)\nIRS: \nTMP_55 = SOLIDITY_CALL require(bool)(TMP_54)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdrawNoMoney\nNode: \nEXPRESSION ERC20(swap.token).transfer(swap.targetWallet,swap.balance)\nIRS: \nHIGH_LEVEL_CALL, dest:TMP_56(ERC20), function:transfer, arguments:['REF_42', 'REF_43']  \"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "createSwapTarget",
                "refund"
            ],
            "from_function": "refund",
            "to_function": "createSwapTarget",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 41\nFunction: refund\nNode: \nEXPRESSION require(bool)(swap.balance > uint256(0))\nIRS: \nTMP_61 = SOLIDITY_CALL require(bool)(TMP_60)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: refund\nNode: \nEXPRESSION require(bool)(swap.createdAt.add(SafeTime) < now)\nIRS: \nTMP_64 = SOLIDITY_CALL require(bool)(TMP_63)\"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                },
                {
                    "path": [
                        "\"BlockID: 43\nFunction: refund\nNode: \nEXPRESSION ERC20(swap.token).transfer(msg.sender,swap.balance)\nIRS: \nHIGH_LEVEL_CALL, dest:TMP_65(ERC20), function:transfer, arguments:['msg.sender', 'REF_60']  \"",
                        "\"BlockID: 15\nFunction: createSwapTarget\nNode: \nEXPRESSION swaps[msg.sender][_participantAddress] = Swap(_token,_targetWallet,bytes32(0),_secretHash,now,_value)\nIRS: \nREF_11 := TMP_33\""
                    ],
                    "state_variable": "swaps"
                }
            ]
        }
    ]
}