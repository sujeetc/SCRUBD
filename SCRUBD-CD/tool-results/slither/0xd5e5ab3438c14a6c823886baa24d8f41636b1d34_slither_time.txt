'solc --version' running
'solc ./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:103:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member.
            if(this.balance < amount ){
               ^----------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:104:26: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member.
                amount = this.balance;
                         ^----------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:107:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            sender.send(amount);
            ^-----------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:125:21: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                    a.send(msg.value * 8 / 100 ); 
                    ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:130:21: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                    a.send(msg.value * 5 / 100 );
                    ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:135:21: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                    a.send(msg.value * 3 / 100 ); 
                    ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:140:21: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                    a.send(msg.value * 1 / 100 ); 
                    ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:150:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        _owner.send(_amount);
        ^------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:156:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        owner.send(users[msg.sender].pot);
        ^-------------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:177:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member.
        return this.balance;
               ^----------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:204:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                a.send(msg.value * 8 / 100 );
                ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:209:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                a.send(msg.value * 5 / 100 );
                ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:214:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                a.send(msg.value * 3 / 100 ); 
                ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:219:17: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
                a.send(msg.value * 1 / 100 );
                ^--------------------------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:233:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member.
            if(this.balance < amount ){
               ^----------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:234:26: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member.
                amount = this.balance;
                         ^----------^
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol:237:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            sender.send(amount);
            ^-----------------^


TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#125)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#126)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#130)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#131)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#135)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#136)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#140)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#141)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#204)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#205)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#209)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#210)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#214)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#215)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#219)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) use msg.value in a loop: users[a].yongjin = users[a].yongjin.add(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#220)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#msgvalue-inside-a-loop

TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) performs a multiplication on the result of a division:
	- amount = users[msg.sender].invested * 25 / 1000 * (now - users[msg.sender].atblock) / 86400 (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#100)
TokenERC20.gettw(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#166-172) performs a multiplication on the result of a division:
	- amount = users[_owner].invested * 2 / 100 * (now - users[_owner].atblock) / 86400 (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#169)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) performs a multiplication on the result of a division:
	- amount = users[msg.sender].invested * 25 / 1000 * (now - users[msg.sender].atblock) / 86400 (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#230)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) ignores return value by sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#107)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) ignores return value by a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#125)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) ignores return value by a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#130)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) ignores return value by a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#135)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) ignores return value by a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#140)
TokenERC20.withdraw(uint256,address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#149-152) ignores return value by _owner.send(_amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#150)
TokenERC20.withdrawcommissions() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#155-158) ignores return value by owner.send(users[msg.sender].pot) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#156)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) ignores return value by a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#204)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) ignores return value by a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#209)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) ignores return value by a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#214)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) ignores return value by a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#219)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) ignores return value by sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-send

TokenERC20.commissions(uint256) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#161-163) should emit an event for: 
	- commission = _amount (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#162) 
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) should emit an event for: 
	- investeds = investeds.add(msg.value) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#196) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

TokenERC20.fallback().sender (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#106) lacks a zero-check on :
		- sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#107)
TokenERC20.withdraw(uint256,address)._owner (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#149) lacks a zero-check on :
		- _owner.send(_amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#150)
TokenERC20.investedbuy(address).sender (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#236) lacks a zero-check on :
		- sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#237)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) has external calls inside a loop: a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#125)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) has external calls inside a loop: a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#130)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) has external calls inside a loop: a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#135)
TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) has external calls inside a loop: a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#140)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) has external calls inside a loop: a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#204)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) has external calls inside a loop: a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#209)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) has external calls inside a loop: a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#214)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) has external calls inside a loop: a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#219)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146) uses timestamp for comparisons
	Dangerous comparisons:
	- this.balance < amount (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#103)
TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243) uses timestamp for comparisons
	Dangerous comparisons:
	- this.balance < amount (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#233)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Version constraint ^0.4.21 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.21 (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#15)
solc-0.4.21 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter TokenERC20.withdraw(uint256,address)._amount (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#149) is not in mixedCase
Parameter TokenERC20.withdraw(uint256,address)._owner (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#149) is not in mixedCase
Parameter TokenERC20.commissions(uint256)._amount (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#161) is not in mixedCase
Parameter TokenERC20.gettw(address)._owner (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#166) is not in mixedCase
Parameter TokenERC20.gets(address)._owner (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#186) is not in mixedCase
Parameter TokenERC20.investedbuy(address)._owner (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146):
	External calls:
	- sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#107)
	State variables written after the call(s):
	- amountren ++ (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#117)
	- investeds = investeds.add(msg.value) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#118)
	- users[msg.sender].tixianzongshu = amount.add(users[msg.sender].tixianzongshu) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#108)
	- users[msg.sender].atblock = now (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#112)
	- users[msg.sender].invested += msg.value (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#113)
	- users[msg.sender].touzizongshu = msg.value.add(users[msg.sender].touzizongshu) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#114)
	- users[owner].pot = users[owner].pot + (msg.value * commission / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#121)
Reentrancy in TokenERC20.fallback() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#92-146):
	External calls:
	- sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#107)
	- a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#125)
	- a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#130)
	- a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#135)
	- a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#140)
	State variables written after the call(s):
	- users[a].yongjin = users[a].yongjin.add(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#126)
	- users[a].yongjin = users[a].yongjin.add(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#131)
	- users[a].yongjin = users[a].yongjin.add(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#136)
	- users[a].yongjin = users[a].yongjin.add(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#141)
Reentrancy in TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243):
	External calls:
	- a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#204)
	- a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#209)
	- a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#214)
	- a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#219)
	State variables written after the call(s):
	- users[a].yongjin = users[a].yongjin.add(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#205)
	- users[a].yongjin = users[a].yongjin.add(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#210)
	- users[a].yongjin = users[a].yongjin.add(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#215)
	- users[a].yongjin = users[a].yongjin.add(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#220)
	- users[msg.sender].touzizongshu = msg.value.add(users[msg.sender].touzizongshu) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#224)
Reentrancy in TokenERC20.investedbuy(address) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#193-243):
	External calls:
	- a.send(msg.value * 8 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#204)
	- a.send(msg.value * 5 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#209)
	- a.send(msg.value * 3 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#214)
	- a.send(msg.value * 1 / 100) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#219)
	- sender.send(amount) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#237)
	State variables written after the call(s):
	- users[msg.sender].tixianzongshu = amount.add(users[msg.sender].tixianzongshu) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#238)
	- users[msg.sender].atblock = now (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#240)
	- users[msg.sender].invested += msg.value (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#241)
Reentrancy in TokenERC20.withdrawcommissions() (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#155-158):
	External calls:
	- owner.send(users[msg.sender].pot) (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#156)
	State variables written after the call(s):
	- users[msg.sender].pot = 0 (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#157)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

TokenERC20.owner (0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol#74) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0xd5e5ab3438c14a6c823886baa24d8f41636b1d34.sol analyzed (3 contracts with 94 detectors), 60 result(s) found

real	0m3.046s
user	0m2.772s
sys	0m0.276s
