'solc --version' running
'solc ./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol:
./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol:190:13: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
            ESDatasets.Plan plan = plan_[player_[rId_][uid].plans[i].planId];
            ^------------------^
./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol:207:13: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
            sender.send(amount);
            ^-----------------^
./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol:215:13: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        if (this.balance < 100000000000000) { //0.0001eth
            ^----------^
./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol:221:5: Warning: Function state mutability can be restricted to pure
    function bytesToUint(bytes b) private returns (uint256){
    ^ (Relevant source part starts here and spans across multiple lines).


EasySmart.withdraw() (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#179-219) performs a multiplication on the result of a division:
	- amount = player_[rId_][uid].plans[i].invested * plan.interest / 10000 * (blockNumber - player_[rId_][uid].plans[i].atBlock) / G_DayBlocks (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#203)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

EasySmart.withdraw() (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#179-219) ignores return value by sender.send(amount) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#207)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-send

Version constraint ^0.4.25 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x.
It is used by:
	- ^0.4.25 (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#1)
solc-0.4.25 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function EasySmart.GetIdByAddr(address) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#42-46) is not in mixedCase
Function EasySmart.GetPlayerByUid(uint256) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#49-58) is not in mixedCase
Function EasySmart.GetPlanByUid(uint256) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#60-88) is not in mixedCase
Function EasySmart.GetPlanTimeByUid(uint256) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#90-103) is not in mixedCase
Variable EasySmart.G_DayBlocks (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#33) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in EasySmart.withdraw() (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#179-219):
	External calls:
	- sender.send(amount) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#207)
	State variables written after the call(s):
	- player_[rId_][uid].plans[i].atBlock = block.number (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#210)
	- player_[rId_][uid].plans[i].isClose = bClose (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#211)
	- player_[rId_][uid].plans[i].payEth += amount (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#212)
	- rId_ = rId_.add(1) (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#216)
	- round_[rId_].startTime = now (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#217)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

EasySmart.invest() (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#139-176) uses literals with too many digits:
	- msg.value > 1000000000 (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#169)
EasySmart.withdraw() (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#179-219) uses literals with too many digits:
	- this.balance < 100000000000000 (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#215)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

EasySmart.G_DayBlocks (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#33) should be constant 
EasySmart.promoAddr_ (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#29) should be constant 
EasySmart.ruleSum_ (0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol#31) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e.sol analyzed (3 contracts with 94 detectors), 15 result(s) found

real	0m2.138s
user	0m1.889s
sys	0m0.250s
