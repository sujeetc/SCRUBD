'solc --version' running
'solc ./0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

Reentrancy in Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733):
	External calls:
	- swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#688)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#793-799)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
		- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	External calls sending eth:
	- swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#688)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
		- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#691-694)
	Pepe._balances (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#525) can be used in cross function reentrancies:
	- Pepe._basicTransfer(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#735-747)
	- Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733)
	- Pepe.balanceOf(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#599-601)
	- Pepe.constructor() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#545-579)
	- Pepe.setIsDividendExempt(address,bool) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#857-868)
	- Pepe.shouldSwapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#770-776)
	- Pepe.takeFee(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#749-752)
	- takeFee(sender,feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#708)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#750)
	Pepe._balances (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#525) can be used in cross function reentrancies:
	- Pepe._basicTransfer(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#735-747)
	- Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733)
	- Pepe.balanceOf(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#599-601)
	- Pepe.constructor() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#545-579)
	- Pepe.setIsDividendExempt(address,bool) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#857-868)
	- Pepe.shouldSwapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#770-776)
	- Pepe.takeFee(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#749-752)
	- takeFee(sender,feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#713)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#750)
	Pepe._balances (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#525) can be used in cross function reentrancies:
	- Pepe._basicTransfer(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#735-747)
	- Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733)
	- Pepe.balanceOf(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#599-601)
	- Pepe.constructor() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#545-579)
	- Pepe.setIsDividendExempt(address,bool) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#857-868)
	- Pepe.shouldSwapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#770-776)
	- Pepe.takeFee(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#749-752)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#718)
	Pepe._balances (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#525) can be used in cross function reentrancies:
	- Pepe._basicTransfer(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#735-747)
	- Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733)
	- Pepe.balanceOf(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#599-601)
	- Pepe.constructor() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#545-579)
	- Pepe.setIsDividendExempt(address,bool) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#857-868)
	- Pepe.shouldSwapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#770-776)
	- Pepe.takeFee(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#749-752)
	- setBuyAccFee(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#709)
		- _liquidityFeeCount += _amount.mul(_liquidityBuyFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#755)
	Pepe._liquidityFeeCount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#511) can be used in cross function reentrancies:
	- Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759)
	- Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768)
	- Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831)
	- setSellAccFee(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#714)
		- _liquidityFeeCount += _amount.mul(_liquiditySellFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#762-764)
	Pepe._liquidityFeeCount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#511) can be used in cross function reentrancies:
	- Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759)
	- Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768)
	- Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831)
	- setBuyAccFee(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#709)
		- _reflectionFeeCount += _amount.mul(_reflectionBuyFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#756-758)
	Pepe._reflectionFeeCount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#510) can be used in cross function reentrancies:
	- Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759)
	- Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768)
	- Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831)
	- setSellAccFee(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#714)
		- _reflectionFeeCount += _amount.mul(_reflectionSellFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#765-767)
	Pepe._reflectionFeeCount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#510) can be used in cross function reentrancies:
	- Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759)
	- Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768)
	- Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831)
Reentrancy in Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#793-799)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
	- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	External calls sending eth:
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
	- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	State variables written after the call(s):
	- _liquidityFeeCount = 0 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#829)
	Pepe._liquidityFeeCount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#511) can be used in cross function reentrancies:
	- Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759)
	- Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768)
	- Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831)
	- _reflectionFeeCount = 0 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#830)
	Pepe._reflectionFeeCount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#510) can be used in cross function reentrancies:
	- Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759)
	- Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768)
	- Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428) ignores return value by USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428):
	External calls:
	- USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#421-423)
	DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428)
	- DividendDistributor.getPaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#434-440)
	- DividendDistributor.getUnpaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#442-461)
	- DividendDistributor.setShare(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#332-352)
	- DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#424-426)
	DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428)
	- DividendDistributor.getPaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#434-440)
	- DividendDistributor.getUnpaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#442-461)
	- DividendDistributor.setShare(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#332-352)
	- DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294)
Reentrancy in DividendDistributor.process(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#373-399):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#391)
		- USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
	State variables written after the call(s):
	- currentIndex = 0 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#387)
	DividendDistributor.currentIndex (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#305) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#373-399)
	- currentIndex ++ (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#396)
	DividendDistributor.currentIndex (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#305) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#373-399)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#332-352):
	External calls:
	- distributeDividend(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#338)
		- USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#348)
	DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428)
	- DividendDistributor.getPaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#434-440)
	- DividendDistributor.getUnpaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#442-461)
	- DividendDistributor.setShare(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#332-352)
	- DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#349-351)
	DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428)
	- DividendDistributor.getPaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#434-440)
	- DividendDistributor.getUnpaidEarnings(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#442-461)
	- DividendDistributor.setShare(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#332-352)
	- DividendDistributor.shares (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#294)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) ignores return value by router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

DividendDistributor.setDistributionCriteria(uint256,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#324-330) should emit an event for: 
	- minPeriod = _minPeriod (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#328) 
	- minDistribution = _minDistribution (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#329) 
Pepe.setBuyFees(uint256,uint256,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#914-927) should emit an event for: 
	- _reflectionBuyFee = _reflectionFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#919) 
	- _liquidityBuyFee = _liquidityFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#920) 
	- feeDenominator = _feeDenominator (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#922) 
Pepe.setSellFees(uint256,uint256,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#929-942) should emit an event for: 
	- _liquiditySellFee = _liquidityFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#934) 
	- _reflectionSellFee = _reflectionFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#935) 
	- feeDenominator = _feeDenominator (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#937) 
Pepe.setSwapBackSettings(bool,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#951-958) should emit an event for: 
	- swapThreshold = _amount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#957) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Pepe.setFeeReceivers(address)._autoLiquidityReceiver (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#944) lacks a zero-check on :
		- autoLiquidityReceiver = _autoLiquidityReceiver (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#948)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428) has external calls inside a loop: USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) has external calls inside a loop: path[1] = router.WETH() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#790)
Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) has external calls inside a loop: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#793-799)
Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) has external calls inside a loop: router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) has external calls inside a loop: distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733) has external calls inside a loop: distributor.setShare(sender,_balances[sender]) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#721)
Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733) has external calls inside a loop: distributor.setShare(recipient,_balances[recipient]) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#724-726)
Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733) has external calls inside a loop: distributor.process(distributorGas) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#729)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in DividendDistributor.deposit() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#354-371):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#361-363)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#368-370)
	- totalDividends = totalDividends.add(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#367)
Reentrancy in DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428):
	External calls:
	- USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#420)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#332-352):
	External calls:
	- distributeDividend(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#338)
		- USDC.transfer(shareholder,amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#419)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#342)
		- shareholderIndexes[shareholder] = shareholders.length (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#473)
	- removeShareholder(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#344)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#481-483)
	- addShareholder(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#342)
		- shareholders.push(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#474)
	- removeShareholder(shareholder) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#344)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#478-480)
		- shareholders.pop() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#484)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#347)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733):
	External calls:
	- swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#688)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#793-799)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
		- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	External calls sending eth:
	- swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#688)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
		- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#751)
		- takeFee(sender,feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#713)
	- Transfer(sender,address(this),feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#751)
		- takeFee(sender,feeAmount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#708)
Reentrancy in Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733):
	External calls:
	- swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#688)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#793-799)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
		- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	- distributor.setShare(sender,_balances[sender]) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#721)
	- distributor.setShare(recipient,_balances[recipient]) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#724-726)
	- distributor.process(distributorGas) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#729)
	External calls sending eth:
	- swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#688)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
		- distributor.deposit{value: amountBNBReflection}() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#826)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#731)
Reentrancy in Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#793-799)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
	External calls sending eth:
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#811-818)
	Event emitted after the call(s):
	- AutoLiquify(amountBNBLiquidity,amountToLiquify) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#819)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

DividendDistributor.shouldDistribute(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#401-409) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#406-408)
Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < launchedAt + snipingTime && sender != address(router) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#665-666)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

DividendDistributor.process(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#373-399) has costly operations inside a loop:
	- currentIndex = 0 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#387)
DividendDistributor.distributeDividend(address) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#411-428) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#418)
DividendDistributor.process(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#373-399) has costly operations inside a loop:
	- currentIndex ++ (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#396)
Pepe.swapping() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#537-541) has costly operations inside a loop:
	- inSwap = true (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#538)
Pepe.swapping() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#537-541) has costly operations inside a loop:
	- inSwap = false (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#540)
Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) has costly operations inside a loop:
	- _liquidityFeeCount = 0 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#829)
Pepe.swapBack() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#778-831) has costly operations inside a loop:
	- _reflectionFeeCount = 0 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#830)
Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759) has costly operations inside a loop:
	- _liquidityFeeCount += _amount.mul(_liquidityBuyFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#755)
Pepe.setBuyAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754-759) has costly operations inside a loop:
	- _reflectionFeeCount += _amount.mul(_reflectionBuyFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#756-758)
Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768) has costly operations inside a loop:
	- _liquidityFeeCount += _amount.mul(_liquiditySellFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#762-764)
Pepe.setSellAccFee(uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761-768) has costly operations inside a loop:
	- _reflectionFeeCount += _amount.mul(_reflectionSellFee).div(feeDenominator) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#765-767)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Pepe._transferFrom(address,address,uint256) (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#647-733) has a high cyclomatic complexity (18).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Context._msgData() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#205-208) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

DividendDistributor.minDistribution (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#303) is set pre-construction with a non-constant function or state variable:
	- 1 * (10 ** USDC.decimals())
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Version constraint ^0.8.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- ^0.8.10 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#3)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function IDexRouter.WETH() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#130) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#325) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDistribution (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#326) is not in mixedCase
Parameter DividendDistributor.claimDividend(address)._user (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#430) is not in mixedCase
Variable DividendDistributor.USDC (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#286-287) is not in mixedCase
Parameter Pepe.setBuyAccFee(uint256)._amount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#754) is not in mixedCase
Parameter Pepe.setSellAccFee(uint256)._amount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#761) is not in mixedCase
Parameter Pepe.setBuyFees(uint256,uint256,uint256)._reflectionFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#915) is not in mixedCase
Parameter Pepe.setBuyFees(uint256,uint256,uint256)._liquidityFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#916) is not in mixedCase
Parameter Pepe.setBuyFees(uint256,uint256,uint256)._feeDenominator (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#917) is not in mixedCase
Parameter Pepe.setSellFees(uint256,uint256,uint256)._liquidityFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#930) is not in mixedCase
Parameter Pepe.setSellFees(uint256,uint256,uint256)._reflectionFee (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#931) is not in mixedCase
Parameter Pepe.setSellFees(uint256,uint256,uint256)._feeDenominator (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#932) is not in mixedCase
Parameter Pepe.setFeeReceivers(address)._autoLiquidityReceiver (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#944) is not in mixedCase
Parameter Pepe.setSwapBackSettings(bool,uint256)._enabled (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#951) is not in mixedCase
Parameter Pepe.setSwapBackSettings(bool,uint256)._amount (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#951) is not in mixedCase
Parameter Pepe.setDistributionCriteria(uint256,uint256)._minPeriod (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#961) is not in mixedCase
Parameter Pepe.setDistributionCriteria(uint256,uint256)._minDistribution (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#962) is not in mixedCase
Constant Pepe._name (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#492) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Pepe._symbol (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#493) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Pepe._decimals (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#494) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Pepe._totalSupply (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#495) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Pepe.USDC (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#497) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#206)" inContext (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#200-209)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Pepe.slitherConstructorVariables() (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#489-982) uses literals with too many digits:
	- distributorGas = 500000 (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#518)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

DividendDistributor.USDC (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#286-287) should be constant 
DividendDistributor.dividendsPerShareAccuracyFactor (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#300) should be constant 
Pepe.USDC (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#497) should be constant 
Pepe.snipingTime (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#523) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

DividendDistributor.router (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#288) should be immutable 
DividendDistributor.token (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#278) should be immutable 
Pepe.distributor (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#517) should be immutable 
Pepe.pair (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#501) should be immutable 
Pepe.router (0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol#500) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x108523415a8cd7cb8ef2d6b12177181f489ec210.sol analyzed (9 contracts with 94 detectors), 77 result(s) found

real	0m3.240s
user	0m3.002s
sys	0m0.239s
