'solc --version' running
'solc ./0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running

BuybackBabyToken.swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1265-1320) sends eth to arbitrary user
	Dangerous calls:
	- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
	- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
BuybackBabyToken.buyTokens(uint256,address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1355-1363) sends eth to arbitrary user
	Dangerous calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195):
	External calls:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1283-1289)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	External calls sending eth:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1171-1174)
	BuybackBabyToken._balances (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#994) can be used in cross function reentrancies:
	- BuybackBabyToken._basicTransfer(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1197-1209)
	- BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195)
	- BuybackBabyToken.balanceOf(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1107-1109)
	- BuybackBabyToken.constructor(string,string,uint256,address,address,uint256[5],address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1016-1068)
	- BuybackBabyToken.setIsDividendExempt(address,bool) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1390-1401)
	- BuybackBabyToken.shouldSwapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1257-1263)
	- BuybackBabyToken.takeFee(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1242-1255)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1180)
	BuybackBabyToken._balances (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#994) can be used in cross function reentrancies:
	- BuybackBabyToken._basicTransfer(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1197-1209)
	- BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195)
	- BuybackBabyToken.balanceOf(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1107-1109)
	- BuybackBabyToken.constructor(string,string,uint256,address,address,uint256[5],address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1016-1068)
	- BuybackBabyToken.setIsDividendExempt(address,bool) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1390-1401)
	- BuybackBabyToken.shouldSwapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1257-1263)
	- BuybackBabyToken.takeFee(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1242-1255)
	- amountReceived = takeFee(sender,recipient,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1176-1178)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1251)
	BuybackBabyToken._balances (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#994) can be used in cross function reentrancies:
	- BuybackBabyToken._basicTransfer(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1197-1209)
	- BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195)
	- BuybackBabyToken.balanceOf(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1107-1109)
	- BuybackBabyToken.constructor(string,string,uint256,address,address,uint256[5],address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1016-1068)
	- BuybackBabyToken.setIsDividendExempt(address,bool) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1390-1401)
	- BuybackBabyToken.shouldSwapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1257-1263)
	- BuybackBabyToken.takeFee(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1242-1255)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- inSwap = true (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1006)
		- inSwap = false (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1008)
	BuybackBabyToken.inSwap (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1004) can be used in cross function reentrancies:
	- BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195)
	- BuybackBabyToken.shouldAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1322-1329)
	- BuybackBabyToken.shouldSwapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1257-1263)
	- BuybackBabyToken.swapping() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1005-1009)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854) ignores return value by rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854):
	External calls:
	- rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
	State variables written after the call(s):
	- shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#847-849)
	DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854)
	- DividendDistributor.getUnpaidEarnings(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#860-879)
	- DividendDistributor.setShare(address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#756-776)
	- DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#850-852)
	DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854)
	- DividendDistributor.getUnpaidEarnings(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#860-879)
	- DividendDistributor.setShare(address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#756-776)
	- DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713)
Reentrancy in DividendDistributor.process(uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#799-825):
	External calls:
	- distributeDividend(shareholders[currentIndex]) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#817)
		- rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
	State variables written after the call(s):
	- currentIndex = 0 (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#813)
	DividendDistributor.currentIndex (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#724) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#799-825)
	- currentIndex ++ (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#822)
	DividendDistributor.currentIndex (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#724) can be used in cross function reentrancies:
	- DividendDistributor.process(uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#799-825)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#756-776):
	External calls:
	- distributeDividend(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#762)
		- rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
	State variables written after the call(s):
	- shares[shareholder].amount = amount (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#772)
	DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854)
	- DividendDistributor.getUnpaidEarnings(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#860-879)
	- DividendDistributor.setShare(address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#756-776)
	- DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713)
	- shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#773-775)
	DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713) can be used in cross function reentrancies:
	- DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854)
	- DividendDistributor.getUnpaidEarnings(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#860-879)
	- DividendDistributor.setShare(address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#756-776)
	- DividendDistributor.shares (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#713)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

BuybackBabyToken.swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1265-1320) ignores return value by router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

DividendDistributor.setDistributionCriteria(uint256,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#748-754) should emit an event for: 
	- minPeriod = _minPeriod (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#752) 
	- minDistribution = _minDistribution (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#753) 
BuybackBabyToken.setAutoBuybackSettings(bool,uint256,uint256,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1365-1377) should emit an event for: 
	- autoBuybackCap = _cap (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1372) 
	- autoBuybackAmount = _amount (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1374) 
BuybackBabyToken.setBuybackMultiplierSettings(uint256,uint256,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1379-1388) should emit an event for: 
	- buybackMultiplierNumerator = numerator (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1385) 
	- buybackMultiplierDenominator = denominator (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1386) 
	- buybackMultiplierLength = length (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1387) 
BuybackBabyToken.setSwapBackSettings(bool,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1456-1462) should emit an event for: 
	- swapThreshold = _amount (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1461) 
BuybackBabyToken.setTargetLiquidity(uint256,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1464-1470) should emit an event for: 
	- targetLiquidity = _target (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1468) 
	- targetLiquidityDenominator = _denominator (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1469) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Auth.transferOwnership(address).adr (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#664) lacks a zero-check on :
		- owner = adr (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#665)
BuybackBabyToken.constructor(string,string,uint256,address,address,uint256[5],address,uint256).rewardToken_ (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1020) lacks a zero-check on :
		- rewardToken = rewardToken_ (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1030)
BuybackBabyToken.constructor(string,string,uint256,address,address,uint256[5],address,uint256).serviceFeeReceiver_ (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1023) lacks a zero-check on :
		- address(serviceFeeReceiver_).transfer(serviceFee_) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1067)
BuybackBabyToken.setFeeReceivers(address,address)._autoLiquidityReceiver (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1449) lacks a zero-check on :
		- autoLiquidityReceiver = _autoLiquidityReceiver (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1452)
BuybackBabyToken.setFeeReceivers(address,address)._marketingFeeReceiver (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1450) lacks a zero-check on :
		- marketingFeeReceiver = _marketingFeeReceiver (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1453)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854) has external calls inside a loop: rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in DividendDistributor.deposit() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#778-797):
	External calls:
	- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(0,path,address(this),block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#785-787)
	State variables written after the call(s):
	- dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares)) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#794-796)
	- totalDividends = totalDividends.add(amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#793)
Reentrancy in DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854):
	External calls:
	- rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
	State variables written after the call(s):
	- shareholderClaims[shareholder] = block.timestamp (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#846)
Reentrancy in DividendDistributor.setShare(address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#756-776):
	External calls:
	- distributeDividend(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#762)
		- rewardToken.transfer(shareholder,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#845)
	State variables written after the call(s):
	- addShareholder(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#766)
		- shareholderIndexes[shareholder] = shareholders.length (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#891)
	- removeShareholder(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#768)
		- shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder] (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#899-901)
	- addShareholder(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#766)
		- shareholders.push(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#892)
	- removeShareholder(shareholder) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#768)
		- shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1] (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#896-898)
		- shareholders.pop() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#902)
	- totalShares = totalShares.sub(shares[shareholder].amount).add(amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#771)
Reentrancy in BuybackBabyToken.triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1346-1353):
	External calls:
	- buyTokens(autoBuybackAmount,DEAD) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1347)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	State variables written after the call(s):
	- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1349)
	- autoBuybackBlockLast = block.number (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1348)
	- autoBuybackEnabled = false (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1351)
Reentrancy in BuybackBabyToken.triggerZeusBuyback(uint256,bool) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1331-1340):
	External calls:
	- buyTokens(amount,DEAD) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1335)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	State variables written after the call(s):
	- buybackMultiplierTriggeredAt = block.timestamp (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1337)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195):
	External calls:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1283-1289)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	- distributor.setShare(sender,_balances[sender]) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1183)
	- distributor.setShare(recipient,_balances[recipient]) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1186-1188)
	- distributor.process(distributorGas) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1191)
	External calls sending eth:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	Event emitted after the call(s):
	- Transfer(sender,recipient,amountReceived) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1193)
Reentrancy in BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195):
	External calls:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1283-1289)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	External calls sending eth:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1252)
		- amountReceived = takeFee(sender,recipient,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1176-1178)
Reentrancy in BuybackBabyToken.swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1265-1320):
	External calls:
	- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1283-1289)
	- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	External calls sending eth:
	- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
	- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	Event emitted after the call(s):
	- AutoLiquify(amountBNBLiquidity,amountToLiquify) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1318)
Reentrancy in BuybackBabyToken.triggerZeusBuyback(uint256,bool) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1331-1340):
	External calls:
	- buyTokens(amount,DEAD) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1335)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	Event emitted after the call(s):
	- BuybackMultiplierActive(buybackMultiplierLength) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1338)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

DividendDistributor.shouldDistribute(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#827-835) uses timestamp for comparisons
	Dangerous comparisons:
	- shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#832-834)
BuybackBabyToken.getMultipliedFee() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1222-1240) uses timestamp for comparisons
	Dangerous comparisons:
	- buybackMultiplierTriggeredAt.add(buybackMultiplierLength) > block.timestamp (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1224-1225)
BuybackBabyToken.shouldSwapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1257-1263) uses timestamp for comparisons
	Dangerous comparisons:
	- msg.sender != pair && ! inSwap && swapEnabled && _balances[address(this)] >= swapThreshold (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1258-1262)
BuybackBabyToken.isOverLiquified(uint256,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1496-1502) uses timestamp for comparisons
	Dangerous comparisons:
	- getLiquidityBacking(accuracy) > target (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1501)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Clones.clone(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#255-264) uses assembly
	- INLINE ASM (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#256-262)
Clones.cloneDeterministic(address,bytes32) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#273-282) uses assembly
	- INLINE ASM (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#274-280)
Clones.predictDeterministicAddress(address,bytes32,address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#287-302) uses assembly
	- INLINE ASM (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#292-301)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

BuybackBabyToken.onlyBuybacker() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1011-1014) compares to a boolean constant:
	-require(bool,string)(buyBacker[msg.sender] == true,Not a buybacker) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1012)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

DividendDistributor.process(uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#799-825) has costly operations inside a loop:
	- currentIndex = 0 (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#813)
DividendDistributor.distributeDividend(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#837-854) has costly operations inside a loop:
	- totalDistributed = totalDistributed.add(amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#844)
DividendDistributor.process(uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#799-825) has costly operations inside a loop:
	- currentIndex ++ (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#822)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195) has a high cyclomatic complexity (12).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

Version constraint =0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- =0.8.4 (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#934)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function IUniswapV2Router01.WETH() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#359) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minPeriod (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#749) is not in mixedCase
Parameter DividendDistributor.setDistributionCriteria(uint256,uint256)._minDistribution (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#750) is not in mixedCase
Variable DividendDistributor._token (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#698) is not in mixedCase
Parameter BuybackBabyToken.setAutoBuybackSettings(bool,uint256,uint256,uint256)._enabled (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1366) is not in mixedCase
Parameter BuybackBabyToken.setAutoBuybackSettings(bool,uint256,uint256,uint256)._cap (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1367) is not in mixedCase
Parameter BuybackBabyToken.setAutoBuybackSettings(bool,uint256,uint256,uint256)._amount (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1368) is not in mixedCase
Parameter BuybackBabyToken.setAutoBuybackSettings(bool,uint256,uint256,uint256)._period (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1369) is not in mixedCase
Parameter BuybackBabyToken.setFees(uint256,uint256,uint256,uint256,uint256)._liquidityFee (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1412) is not in mixedCase
Parameter BuybackBabyToken.setFees(uint256,uint256,uint256,uint256,uint256)._buybackFee (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1413) is not in mixedCase
Parameter BuybackBabyToken.setFees(uint256,uint256,uint256,uint256,uint256)._reflectionFee (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1414) is not in mixedCase
Parameter BuybackBabyToken.setFees(uint256,uint256,uint256,uint256,uint256)._marketingFee (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1415) is not in mixedCase
Parameter BuybackBabyToken.setFees(uint256,uint256,uint256,uint256,uint256)._feeDenominator (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1416) is not in mixedCase
Parameter BuybackBabyToken.setFeeReceivers(address,address)._autoLiquidityReceiver (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1449) is not in mixedCase
Parameter BuybackBabyToken.setFeeReceivers(address,address)._marketingFeeReceiver (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1450) is not in mixedCase
Parameter BuybackBabyToken.setSwapBackSettings(bool,uint256)._enabled (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1456) is not in mixedCase
Parameter BuybackBabyToken.setSwapBackSettings(bool,uint256)._amount (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1456) is not in mixedCase
Parameter BuybackBabyToken.setTargetLiquidity(uint256,uint256)._target (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1464) is not in mixedCase
Parameter BuybackBabyToken.setTargetLiquidity(uint256,uint256)._denominator (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1464) is not in mixedCase
Parameter BuybackBabyToken.setDistributionCriteria(uint256,uint256)._minPeriod (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1473) is not in mixedCase
Parameter BuybackBabyToken.setDistributionCriteria(uint256,uint256)._minDistribution (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1474) is not in mixedCase
Constant BuybackBabyToken._decimals (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#952) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in BuybackBabyToken._transferFrom(address,address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1155-1195):
	External calls:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
	External calls sending eth:
	- swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1165)
		- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
		- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
		- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1360-1362)
	State variables written after the call(s):
	- _balances[sender] = _balances[sender].sub(amount,Insufficient Balance) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1171-1174)
	- _balances[recipient] = _balances[recipient].add(amountReceived) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1180)
	- amountReceived = takeFee(sender,recipient,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1176-1178)
		- _balances[address(this)] = _balances[address(this)].add(feeAmount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1251)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1349)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- autoBuybackBlockLast = block.number (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1348)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- autoBuybackEnabled = false (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1351)
	- triggerAutoBuyback() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1168)
		- inSwap = true (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1006)
		- inSwap = false (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1008)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1252)
		- amountReceived = takeFee(sender,recipient,amount) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1176-1178)
	- Transfer(sender,recipient,amountReceived) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1193)
Reentrancy in BuybackBabyToken.swapBack() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1265-1320):
	External calls:
	- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
	External calls sending eth:
	- distributor.deposit{value: amountBNBReflection}() (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1306)
	- address(marketingFeeReceiver).transfer(amountBNBMarketing) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1307)
	- router.addLiquidityETH{value: amountBNBLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1310-1317)
	Event emitted after the call(s):
	- AutoLiquify(amountBNBLiquidity,amountToLiquify) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1318)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Clones.clone(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#255-264) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#258)
Clones.clone(address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#255-264) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#260)
Clones.cloneDeterministic(address,bytes32) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#273-282) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#276)
Clones.cloneDeterministic(address,bytes32) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#273-282) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#278)
Clones.predictDeterministicAddress(address,bytes32,address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#287-302) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#294)
Clones.predictDeterministicAddress(address,bytes32,address) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#287-302) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#296)
BuybackBabyToken.constructor(string,string,uint256,address,address,uint256[5],address,uint256) (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1016-1068) uses literals with too many digits:
	- distributorGas = 500000 (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#1041)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

BuybackBabyToken._totalSupply (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#956) should be immutable 
BuybackBabyToken.distributor (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#987) should be immutable 
BuybackBabyToken.pair (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#960) should be immutable 
BuybackBabyToken.rewardToken (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#958) should be immutable 
BuybackBabyToken.router (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#959) should be immutable 
DividendDistributor._token (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#698) should be immutable 
DividendDistributor.dividendsPerShareAccuracyFactor (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#719) should be immutable 
DividendDistributor.rewardToken (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#706) should be immutable 
DividendDistributor.router (0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol#707) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
./0x19b423e5131d8e4996a18e69d0cb99674ba34c21.sol analyzed (11 contracts with 94 detectors), 81 result(s) found

real	0m3.716s
user	0m3.407s
sys	0m0.311s
