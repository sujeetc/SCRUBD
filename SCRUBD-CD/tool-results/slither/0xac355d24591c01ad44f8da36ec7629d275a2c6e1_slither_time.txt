'solc --version' running
'solc ./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/empirical-study/data/extracted_solc_codes/crowdsource_contracts' running
Compilation warnings/errors on ./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:5:3: Warning: No visibility specified. Defaulting to "public".
  function totalSupply() constant returns (uint256 supply) {}
  ^---------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:9:3: Warning: No visibility specified. Defaulting to "public".
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  ^----------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:15:3: Warning: No visibility specified. Defaulting to "public".
  function transfer(address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:22:3: Warning: No visibility specified. Defaulting to "public".
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:28:3: Warning: No visibility specified. Defaulting to "public".
  function approve(address _spender,uint256 _value) returns (bool success) {}
  ^-------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:33:3: Warning: No visibility specified. Defaulting to "public".
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
  ^-----------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:97:3: Warning: No visibility specified. Defaulting to "public".
  function ShortOrder() {
  ^
Spanning multiple lines.
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:5:44: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function totalSupply() constant returns (uint256 supply) {}
                                           ^------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:9:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function balanceOf(address _owner) constant returns (uint256 balance) {}
                     ^------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:9:56: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function balanceOf(address _owner) constant returns (uint256 balance) {}
                                                       ^-------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:15:21: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to,uint256 _value) returns (bool success) {}
                    ^---------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:15:33: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to,uint256 _value) returns (bool success) {}
                                ^------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:15:58: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to,uint256 _value) returns (bool success) {}
                                                         ^----------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:22:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                        ^-----------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:22:39: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                                      ^---------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:22:51: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                                                  ^------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:22:76: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                                                                           ^----------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:28:20: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender,uint256 _value) returns (bool success) {}
                   ^--------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:28:37: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender,uint256 _value) returns (bool success) {}
                                    ^------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:28:62: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender,uint256 _value) returns (bool success) {}
                                                             ^----------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:33:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
                     ^------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:33:37: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
                                    ^--------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:33:73: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
                                                                        ^---------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:43:3: Warning: Function state mutability can be restricted to pure
  function safeMul(uint a,uint b) internal returns (uint) {
  ^
Spanning multiple lines.
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:50:3: Warning: Function state mutability can be restricted to pure
  function safeDiv(uint a,uint b) internal returns (uint) {
  ^
Spanning multiple lines.
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:55:3: Warning: Function state mutability can be restricted to pure
  function safeSub(uint a,uint b) internal returns (uint) {
  ^
Spanning multiple lines.
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:60:3: Warning: Function state mutability can be restricted to pure
  function safeAdd(uint a,uint b) internal returns (uint) {
  ^
Spanning multiple lines.
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:5:3: Warning: Function state mutability can be restricted to pure
  function totalSupply() constant returns (uint256 supply) {}
  ^---------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:9:3: Warning: Function state mutability can be restricted to pure
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  ^----------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:15:3: Warning: Function state mutability can be restricted to pure
  function transfer(address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:22:3: Warning: Function state mutability can be restricted to pure
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:28:3: Warning: Function state mutability can be restricted to pure
  function approve(address _spender,uint256 _value) returns (bool success) {}
  ^-------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:33:3: Warning: Function state mutability can be restricted to pure
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
  ^-----------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:360:20: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].longBalance[tokenUserSender[2]],100),orderRecord[tokenUserSender[1]][orderHash].balance);
                   ^-------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:360:12: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].longBalance[tokenUserSender[2]],100),orderRecord[tokenUserSender[1]][orderHash].balance);
           ^-------------------------------------------------------------------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:364:78: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].coupon,safeSub(100,couponProportion)),100);
                                                                             ^---------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:364:20: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].coupon,safeSub(100,couponProportion)),100);
                   ^--------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:364:12: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].coupon,safeSub(100,couponProportion)),100);
           ^---------------------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:368:104: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].shortBalance[tokenUserSender[0]],safeSub(100,couponProportion)),100);
                                                                                                       ^---------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:368:20: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].shortBalance[tokenUserSender[0]],safeSub(100,couponProportion)),100);
                   ^----------------------------------------------------------------------------------------------------------------^
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol:368:12: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    return safeDiv(safeMul(orderRecord[tokenUserSender[1]][orderHash].shortBalance[tokenUserSender[0]],safeSub(100,couponProportion)),100);
           ^-----------------------------------------------------------------------------------------------------------------------------^


Reentrancy in ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260):
	External calls:
	- Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#255)
	External calls sending eth:
	- admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance)) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#254)
	State variables written after the call(s):
	- orderRecord[tokenUser[1]][orderHash].balance = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#256)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
	- orderRecord[tokenUser[1]][orderHash].coupon = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#257)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
	- orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#258)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
Reentrancy in ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235):
	External calls:
	- Token(tokenUser[0]).transfer(msg.sender,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#221)
	External calls sending eth:
	- msg.sender.transfer(couponAmount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#220)
	State variables written after the call(s):
	- orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#222)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
	- orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#223)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
	- orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]] = safeSub(orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]],amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#224)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
	- orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#225)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130) ignores return value by Token(tokenUser[0]).transferFrom(msg.sender,this,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#126)
ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235) ignores return value by Token(tokenUser[0]).transfer(msg.sender,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#221)
ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260) ignores return value by Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#255)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130):
	External calls:
	- Token(tokenUser[0]).transferFrom(msg.sender,this,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#126)
	State variables written after the call(s):
	- orderRecord[msg.sender][orderHash].shortBalance[tokenUser[0]] = safeAdd(orderRecord[msg.sender][orderHash].shortBalance[tokenUser[0]],amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#127)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
	- orderRecord[msg.sender][orderHash].tokenDeposit = true (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#128)
	ShortOrder.orderRecord (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#80) can be used in cross function reentrancies:
	- ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195)
	- ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260)
	- ShortOrder.depositCoupon(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#132-152)
	- ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235)
	- ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283)
	- ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308)
	- ShortOrder.placeLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#154-176)
	- ShortOrder.returnBalance(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310-312)
	- ShortOrder.returnCoupon(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322-324)
	- ShortOrder.returnCouponProportion(address[3],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#359-361)
	- ShortOrder.returnLongCouponAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#363-365)
	- ShortOrder.returnLongTokenAmount(address[3],bytes32,uint256) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#367-369)
	- ShortOrder.returnTokenBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#314-316)
	- ShortOrder.returnTokenDepositState(address,bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326-328)
	- ShortOrder.returnUserBalance(address[2],bytes32) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#318-320)
	- ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

ShortOrder.changeAdmin(address) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#101-103) should emit an event for: 
	- admin = _admin (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#102) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

ShortOrder.changeAdmin(address)._admin (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#101) lacks a zero-check on :
		- admin = _admin (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#102)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260):
	External calls:
	- Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#255)
	External calls sending eth:
	- admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance)) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#254)
	Event emitted after the call(s):
	- DonationClaimed(tokenUser,minMaxDMWCPNonce,orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#259)
Reentrancy in ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235):
	External calls:
	- Token(tokenUser[0]).transfer(msg.sender,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#221)
	External calls sending eth:
	- msg.sender.transfer(couponAmount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#220)
	Event emitted after the call(s):
	- TokenLongExercised(tokenUser,minMaxDMWCPNonce,couponAmount,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#226)
Reentrancy in ShortOrder.tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#105-130):
	External calls:
	- Token(tokenUser[0]).transferFrom(msg.sender,this,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#126)
	Event emitted after the call(s):
	- TokenFulfillment(tokenUser,minMaxDMWCPNonce,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#129)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Version constraint ^0.4.18 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- ^0.4.18 (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#1)
solc-0.4.18 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter ShortOrder.changeAdmin(address)._admin (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#101) is not in mixedCase
Parameter ShortOrder.returnBalance(address,bytes32)._creator (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#310) is not in mixedCase
Parameter ShortOrder.returnCoupon(address,bytes32)._creator (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#322) is not in mixedCase
Parameter ShortOrder.returnTokenDepositState(address,bytes32)._creator (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#326) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in ShortOrder.buyLong(address[2],uint256[5],uint8,bytes32[3]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#178-195):
	External calls:
	- sellerShort[0].transfer(amountNonceExpiryDM[0]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#191)
	State variables written after the call(s):
	- orderRecord[sellerShort[1]][hashRS[0]].longBalance[msg.sender] = orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]] (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#192)
	- orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#193)
	Event emitted after the call(s):
	- LongBought(sellerShort,amountNonceExpiryDM,amountNonceExpiryDM[0]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#194)
Reentrancy in ShortOrder.claimDonations(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#237-260):
	External calls:
	- admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance)) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#254)
	State variables written after the call(s):
	- orderRecord[tokenUser[1]][orderHash].balance = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#256)
	- orderRecord[tokenUser[1]][orderHash].coupon = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#257)
	- orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#258)
	Event emitted after the call(s):
	- DonationClaimed(tokenUser,minMaxDMWCPNonce,orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#259)
Reentrancy in ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235):
	External calls:
	- msg.sender.transfer(couponAmount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#220)
	State variables written after the call(s):
	- orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#222)
	- orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#223)
	- orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]] = safeSub(orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]],amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#224)
	- orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#225)
	Event emitted after the call(s):
	- TokenLongExercised(tokenUser,minMaxDMWCPNonce,couponAmount,amount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#226)
Reentrancy in ShortOrder.exerciseLong(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#197-235):
	External calls:
	- msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender])) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#229)
	State variables written after the call(s):
	- orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#230)
	- orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#231)
	- orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#232)
	Event emitted after the call(s):
	- EthLongExercised(tokenUser,minMaxDMWCPNonce,couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#233)
Reentrancy in ShortOrder.nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#262-283):
	External calls:
	- msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#280)
	State variables written after the call(s):
	- orderRecord[msg.sender][orderHash].coupon = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#281)
	Event emitted after the call(s):
	- NonActivationWithdrawal(tokenUser,minMaxDMWCPNonce,orderRecord[msg.sender][orderHash].coupon) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#282)
Reentrancy in ShortOrder.nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#285-308):
	External calls:
	- msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#304)
	State variables written after the call(s):
	- orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#305)
	- orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint256(0) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#306)
	Event emitted after the call(s):
	- ActivationWithdrawal(tokenUser,minMaxDMWCPNonce,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]) (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#307)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Token.decimals (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#38) is never used in Token (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#3-40)
Token.name (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#39) is never used in Token (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#3-40)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Token.decimals (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#38) should be constant 
Token.name (0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol#39) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./0xac355d24591c01ad44f8da36ec7629d275a2c6e1.sol analyzed (3 contracts with 94 detectors), 27 result(s) found

real	0m7.467s
user	0m7.082s
sys	0m0.384s
