{"error": null, "issues": [{"address": 6, "code": "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}", "contract": "SafeMath", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "fallback", "lineno": 6, "max_gas_used": 114, "min_gas_used": 19, "severity": "Medium", "sourceMap": "77:688:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x20", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a723058206d0e5ae5f9746495dca56d6c8d9b26b8b1d1fe86d23cc011eeffe8f072168bc30029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}]}}, {"address": 10, "code": "library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}", "contract": "SafeMath", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "constructor", "lineno": 6, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "77:688:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x4", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040523415600b57fe5b5b60338060196000396000f30060606040525bfe00a165627a7a723058206d0e5ae5f9746495dca56d6c8d9b26b8b1d1fe86d23cc011eeffe8f072168bc30029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 11, "code": "contract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     require(msg.data.length >= size + 4);\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}", "contract": "BasicToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "constructor", "lineno": 61, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "1659:987:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6103658061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005157806370a0823114610077578063a9059cbb146100c1575bfe5b341561005957fe5b610061610100565b6040518082815260200191505060405180910390f35b341561007f57fe5b6100ab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610106565b6040518082815260200191505060405180910390f35b34156100c957fe5b6100fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610150565b005b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156101695760006000fd5b6101bb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102ff90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061025082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461031990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b600082821115151561030d57fe5b81830390505b92915050565b60006000828401905083811015151561032e57fe5b8091505b50929150505600a165627a7a723058205678586f6b72b387d8ac94fc6902bab81771f3d77d03fba314dc7ba3f19823800029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 11, "code": "function Ownable() {\r\n    owner = msg.sender;\r\n  }", "contract": "Ownable", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "constructor", "lineno": 187, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "5894:50", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x10", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6101fa8061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610046578063f2fde38b14610098575bfe5b341561004e57fe5b6100566100ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100a057fe5b6100cc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100f4565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101515760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156101c95780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b505600a165627a7a72305820fb643aeb6c93f1e0e702e6261da1fdb50416aa792bd2d5d3efe92039abb40a030029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 11, "code": "contract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}", "contract": "StandardToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "constructor", "lineno": 103, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "2924:2097:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x10", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6109618061001c6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461007857806318160ddd146100b757806323b872dd146100dd57806370a082311461013b578063a9059cbb14610185578063dd62ed3e146101c4575bfe5b341561008057fe5b6100b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061022d565b005b34156100bf57fe5b6100c76103af565b6040518082815260200191505060405180910390f35b34156100e557fe5b610139600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103b5565b005b341561014357fe5b61016f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061067a565b6040518082815260200191505060405180910390f35b341561018d57fe5b6101c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106c4565b005b34156101cc57fe5b610217600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610873565b6040518082815260200191505060405180910390f35b60008114806102b857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156102c45760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156103d05760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506104a183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061053683600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061058c838361091b90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156106dd5760006000fd5b61072f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60006000828401905083811015151561091057fe5b8091505b5092915050565b600082821115151561092957fe5b81830390505b929150505600a165627a7a723058200fd03e91275db500aed258d2a1a31bfd9309488ed17946748c63467e23d4e8dc0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 77, "code": "address public owner", "contract": "Ownable", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "owner()", "lineno": 185, "max_gas_used": 177, "min_gas_used": 82, "severity": "Medium", "sourceMap": "5867:20", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x10", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6101fa8061005f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b14610046578063f2fde38b14610098575bfe5b341561004e57fe5b6100566100ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100a057fe5b6100cc600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100f4565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101515760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156101c95780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b505600a165627a7a72305820fb643aeb6c93f1e0e702e6261da1fdb50416aa792bd2d5d3efe92039abb40a030029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x8da5cb5b", "input": "0x8da5cb5b", "name": "owner()", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": null, "value": "0x1"}]}}, {"address": 88, "code": "uint256 public totalSupply", "contract": "BasicToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "totalSupply()", "lineno": 39, "max_gas_used": 177, "min_gas_used": 82, "severity": "Medium", "sourceMap": "926:26", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6103658061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005157806370a0823114610077578063a9059cbb146100c1575bfe5b341561005957fe5b610061610100565b6040518082815260200191505060405180910390f35b341561007f57fe5b6100ab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610106565b6040518082815260200191505060405180910390f35b34156100c957fe5b6100fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610150565b005b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156101695760006000fd5b6101bb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102ff90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061025082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461031990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b600082821115151561030d57fe5b81830390505b92915050565b60006000828401905083811015151561032e57fe5b8091505b50929150505600a165627a7a723058205678586f6b72b387d8ac94fc6902bab81771f3d77d03fba314dc7ba3f19823800029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x18160ddd", "input": "0x18160ddd", "name": "totalSupply()", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": null, "value": "0x1"}]}}, {"address": 110, "code": "function halt() external onlyOwner {\r\n    halted = true;\r\n  }", "contract": "Haltable", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "halt()", "lineno": 227, "max_gas_used": 177, "min_gas_used": 82, "severity": "Medium", "sourceMap": "6665:61", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x4083020256340802", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff0219169083151502179055505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b610391806100726000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635ed7ca5b146100675780638da5cb5b14610079578063b9b8af0b146100cb578063cb3e64fd146100f5578063f2fde38b14610107575bfe5b341561006f57fe5b61007761013d565b005b341561008157fe5b6100896101b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100d357fe5b6100db6101df565b604051808215151515815260200191505060405180910390f35b34156100fd57fe5b6101056101f2565b005b341561010f57fe5b61013b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061028b565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561019a5760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561024f5760006000fd5b600060149054906101000a900460ff16151561026b5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102e85760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156103605780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b505600a165627a7a723058207323aa8ef5679b8857297abf1d10595f33c14bbb1728d7dc32ad79dfd3bcdb5c0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x5ed7ca5b", "input": "0x5ed7ca5b", "name": "halt()", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": null, "value": "0x1"}]}}, {"address": 119, "code": "contract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}", "contract": "StandardToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "fallback", "lineno": 103, "max_gas_used": 132, "min_gas_used": 37, "severity": "Medium", "sourceMap": "2924:2097:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x1", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6109618061001c6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461007857806318160ddd146100b757806323b872dd146100dd57806370a082311461013b578063a9059cbb14610185578063dd62ed3e146101c4575bfe5b341561008057fe5b6100b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061022d565b005b34156100bf57fe5b6100c76103af565b6040518082815260200191505060405180910390f35b34156100e557fe5b610139600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103b5565b005b341561014357fe5b61016f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061067a565b6040518082815260200191505060405180910390f35b341561018d57fe5b6101c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106c4565b005b34156101cc57fe5b610217600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610873565b6040518082815260200191505060405180910390f35b60008114806102b857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156102c45760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156103d05760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506104a183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061053683600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061058c838361091b90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156106dd5760006000fd5b61072f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60006000828401905083811015151561091057fe5b8091505b5092915050565b600082821115151561092957fe5b81830390505b929150505600a165627a7a723058200fd03e91275db500aed258d2a1a31bfd9309488ed17946748c63467e23d4e8dc0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}]}}, {"address": 145, "code": "contract DesTokenSale is Haltable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"3DES Token Sale Contract\";\r\n\r\n    DesToken public token;\r\n    address public beneficiary;\r\n\r\n    uint public tokensSoldTotal = 0; // in wei\r\n    uint public weiRaisedTotal = 0; // in wei\r\n    uint public investorCount = 0;\r\n    uint public tokensSelling = 0; // tokens selling in the current phase\r\n    uint public tokenPrice = 0; // in wei\r\n    uint public purchaseLimit = 0; // in tokens wei amount\r\n\r\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n\r\n    function DesTokenSale(\r\n      address _token,\r\n      address _beneficiary\r\n      ) {\r\n        token = DesToken(_token);\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function startPhase(\r\n      uint256 _tokens,\r\n      uint256 _price,\r\n      uint256 _limit\r\n      ) onlyOwner {\r\n        require(tokensSelling == 0);\r\n        require(_tokens <= token.balanceOf(this));\r\n        tokensSelling = _tokens * 1 ether;\r\n        tokenPrice = _price;\r\n        purchaseLimit = _limit * 1 ether;\r\n    }\r\n\r\n    // If DES tokens will not be sold in a phase it will be ours.\r\n    // We belive in success of our project.\r\n    function finishPhase() onlyOwner {\r\n        require(tokensSelling != 0);\r\n        token.transfer(beneficiary, tokensSelling);\r\n        tokensSelling = 0;\r\n    }\r\n\r\n    function () payable stopInEmergency {\r\n        require(tokensSelling != 0);\r\n        require(msg.value >= 0.01 * 1 ether);\r\n        \r\n        // calculate token amount\r\n        uint tokens = msg.value / tokenPrice * 1 ether;\r\n        \r\n        // throw if you trying to buy over the limit\r\n        require(token.balanceOf(msg.sender).add(tokens) <= purchaseLimit);\r\n        \r\n        // recalculate selling tokens\r\n        // will throw if it is not enough tokens\r\n        tokensSelling = tokensSelling.sub(tokens);\r\n        \r\n        // recalculate counters\r\n        tokensSoldTotal = tokensSoldTotal.add(tokens);\r\n        if (token.balanceOf(msg.sender) == 0) investorCount++;\r\n        weiRaisedTotal = weiRaisedTotal.add(msg.value);\r\n        \r\n        // transfer bought tokens to the contributor \r\n        token.transfer(msg.sender, tokens);\r\n\r\n        // transfer funds to the beneficiary\r\n        beneficiary.transfer(msg.value);\r\n\r\n        NewContribution(msg.sender, tokens, msg.value);\r\n    }\r\n    \r\n}", "contract": "DesTokenSale", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "constructor", "lineno": 238, "max_gas_used": 203226, "min_gas_used": 42142, "severity": "Medium", "sourceMap": ":::o", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 163, "code": "contract DesToken is StandardToken {\r\n\r\n  string public name = \"DES Token\";\r\n  string public symbol = \"DES\";\r\n  uint256 public decimals = 18;\r\n  uint256 public INITIAL_SUPPLY = 35000000 * 1 ether;\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens. \r\n   */\r\n  function DesToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n}", "contract": "DesToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "fallback", "lineno": 161, "max_gas_used": 132, "min_gas_used": 37, "severity": "Medium", "sourceMap": "5270:395:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052604060405190810160405280600981526020017f44455320546f6b656e000000000000000000000000000000000000000000000081525060039080519060200190610050929190610110565b50604060405190810160405280600381526020017f44455300000000000000000000000000000000000000000000000000000000008152506004908051906020019061009d929190610110565b5060126005556a1cf389cd46047d0300000060065534156100ba57fe5b5b600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015157805160ff191683800117855561017f565b8280016001018555821561017f579182015b8281111561017e578251825591602001919060010190610163565b5b50905061018c9190610190565b5090565b6101b291905b808211156101ae576000816000905550600101610196565b5090565b90565b610c53806101c46000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013d57806318160ddd1461017c57806323b872dd146101a25780632ff2e9dc14610200578063313ce5671461022657806370a082311461024c57806395d89b4114610296578063a9059cbb1461032f578063dd62ed3e1461036e575bfe5b34156100ac57fe5b6100b46103d7565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61017a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610475565b005b341561018457fe5b61018c6105f7565b6040518082815260200191505060405180910390f35b34156101aa57fe5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105fd565b005b341561020857fe5b6102106108c2565b6040518082815260200191505060405180910390f35b341561022e57fe5b6102366108c8565b6040518082815260200191505060405180910390f35b341561025457fe5b610280600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ce565b6040518082815260200191505060405180910390f35b341561029e57fe5b6102a6610918565b60405180806020018281038252838181518152602001915080519060200190808383600083146102f5575b8051825260208311156102f5576020820191506020810190506020830392506102d1565b505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033757fe5b61036c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109b6565b005b341561037657fe5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b65565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b505050505081565b600081148061050057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561050c5760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156106185760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506106e983600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061077e83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d48383610c0d90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b60065481565b60055481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b505050505081565b6040600481016000369050101515156109cf5760006000fd5b610a2182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ab682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600060008284019050838110151515610c0257fe5b8091505b5092915050565b6000828211151515610c1b57fe5b81830390505b929150505600a165627a7a72305820f61c6a951e81fe5037fb281117bbdfa02096009c32a0e99fcb442204659a9b0d0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "value": "0x0"}]}}, {"address": 185, "code": "contract DesToken is StandardToken {\r\n\r\n  string public name = \"DES Token\";\r\n  string public symbol = \"DES\";\r\n  uint256 public decimals = 18;\r\n  uint256 public INITIAL_SUPPLY = 35000000 * 1 ether;\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens. \r\n   */\r\n  function DesToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n}", "contract": "DesToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "constructor", "lineno": 161, "max_gas_used": 103867, "min_gas_used": 22454, "severity": "Medium", "sourceMap": ":::o", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052604060405190810160405280600981526020017f44455320546f6b656e000000000000000000000000000000000000000000000081525060039080519060200190610050929190610110565b50604060405190810160405280600381526020017f44455300000000000000000000000000000000000000000000000000000000008152506004908051906020019061009d929190610110565b5060126005556a1cf389cd46047d0300000060065534156100ba57fe5b5b600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015157805160ff191683800117855561017f565b8280016001018555821561017f579182015b8281111561017e578251825591602001919060010190610163565b5b50905061018c9190610190565b5090565b6101b291905b808211156101ae576000816000905550600101610196565b5090565b90565b610c53806101c46000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013d57806318160ddd1461017c57806323b872dd146101a25780632ff2e9dc14610200578063313ce5671461022657806370a082311461024c57806395d89b4114610296578063a9059cbb1461032f578063dd62ed3e1461036e575bfe5b34156100ac57fe5b6100b46103d7565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61017a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610475565b005b341561018457fe5b61018c6105f7565b6040518082815260200191505060405180910390f35b34156101aa57fe5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105fd565b005b341561020857fe5b6102106108c2565b6040518082815260200191505060405180910390f35b341561022e57fe5b6102366108c8565b6040518082815260200191505060405180910390f35b341561025457fe5b610280600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ce565b6040518082815260200191505060405180910390f35b341561029e57fe5b6102a6610918565b60405180806020018281038252838181518152602001915080519060200190808383600083146102f5575b8051825260208311156102f5576020820191506020810190506020830392506102d1565b505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033757fe5b61036c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109b6565b005b341561037657fe5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b65565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b505050505081565b600081148061050057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561050c5760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156106185760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506106e983600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061077e83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d48383610c0d90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b60065481565b60055481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b505050505081565b6040600481016000369050101515156109cf5760006000fd5b610a2182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ab682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600060008284019050838110151515610c0257fe5b8091505b5092915050565b6000828211151515610c1b57fe5b81830390505b929150505600a165627a7a72305820f61c6a951e81fe5037fb281117bbdfa02096009c32a0e99fcb442204659a9b0d0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 780, "code": "balances[msg.sender].sub(_value)", "contract": "BasicToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "transfer(address,uint256)", "lineno": 80, "max_gas_used": 1498, "min_gas_used": 1213, "severity": "Medium", "sourceMap": ":::i", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6103658061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005157806370a0823114610077578063a9059cbb146100c1575bfe5b341561005957fe5b610061610100565b6040518082815260200191505060405180910390f35b341561007f57fe5b6100ab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610106565b6040518082815260200191505060405180910390f35b34156100c957fe5b6100fe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610150565b005b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156101695760006000fd5b6101bb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102ff90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061025082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461031990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b600082821115151561030d57fe5b81830390505b92915050565b60006000828401905083811015151561032e57fe5b8091505b50929150505600a165627a7a723058205678586f6b72b387d8ac94fc6902bab81771f3d77d03fba314dc7ba3f19823800029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa9059cbb01010101010101010101010100000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101", "input": "0xa9059cbb01010101010101010101010100000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101", "name": "transfer(address,uint256)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": null, "value": "0x0"}]}}, {"address": 847, "code": "function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }", "contract": "DesTokenSale", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "fallback", "lineno": 25, "max_gas_used": 131045, "min_gas_used": 20646, "severity": "Medium", "sourceMap": ":::o", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x40000000000000", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x40000000000000", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b01040350440200000356c5e7489c89000000080000a60000000001d100080000203", "input": "0x1f8c07b01040350440200000356c5e7489c89000000080000a60000000001d100080000203", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x00", "input": "0x00", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x2386f26fc10000"}]}}, {"address": 1318, "code": "string public name = \"3DES Token Sale Contract\"", "contract": "DesTokenSale", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "name()", "lineno": 241, "max_gas_used": 195, "min_gas_used": 100, "severity": "Medium", "sourceMap": "6965:47", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x06fdde03", "input": "0x06fdde03", "name": "name()", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": null, "value": "0x1"}]}}, {"address": 2344, "code": "balances[msg.sender].sub(_value)", "contract": "StandardToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "transfer(address,uint256)", "lineno": 80, "max_gas_used": 1560, "min_gas_used": 1275, "severity": "Medium", "sourceMap": ":::i", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6109618061001c6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461007857806318160ddd146100b757806323b872dd146100dd57806370a082311461013b578063a9059cbb14610185578063dd62ed3e146101c4575bfe5b341561008057fe5b6100b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061022d565b005b34156100bf57fe5b6100c76103af565b6040518082815260200191505060405180910390f35b34156100e557fe5b610139600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103b5565b005b341561014357fe5b61016f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061067a565b6040518082815260200191505060405180910390f35b341561018d57fe5b6101c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106c4565b005b34156101cc57fe5b610217600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610873565b6040518082815260200191505060405180910390f35b60008114806102b857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156102c45760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156103d05760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506104a183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061053683600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061058c838361091b90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156106dd5760006000fd5b61072f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60006000828401905083811015151561091057fe5b8091505b5092915050565b600082821115151561092957fe5b81830390505b929150505600a165627a7a723058200fd03e91275db500aed258d2a1a31bfd9309488ed17946748c63467e23d4e8dc0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa9059cbb00000000000000000000000000000000000000000000000000000000000000080110040201024001010080020000000000000000000000000000000000000001", "input": "0xa9059cbb00000000000000000000000000000000000000000000000000000000000000080110040201024001010080020000000000000000000000000000000000000001", "name": "transfer(address,uint256)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": ["0x0000000000000000000000000000000000000008", 480610062631238928486806171105373635553158224032333243196219894311558316033], "value": "0x0"}]}}, {"address": 2344, "code": "_allowance.sub(_value)", "contract": "StandardToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "transferFrom(address,address,uint256)", "lineno": 122, "max_gas_used": 54802, "min_gas_used": 13567, "severity": "Medium", "sourceMap": ":::i", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6109618061001c6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461007857806318160ddd146100b757806323b872dd146100dd57806370a082311461013b578063a9059cbb14610185578063dd62ed3e146101c4575bfe5b341561008057fe5b6100b5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061022d565b005b34156100bf57fe5b6100c76103af565b6040518082815260200191505060405180910390f35b34156100e557fe5b610139600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506103b5565b005b341561014357fe5b61016f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061067a565b6040518082815260200191505060405180910390f35b341561018d57fe5b6101c2600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106c4565b005b34156101cc57fe5b610217600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610873565b6040518082815260200191505060405180910390f35b60008114806102b857506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156102c45760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156103d05760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506104a183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061053683600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061058c838361091b90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6040600481016000369050101515156106dd5760006000fd5b61072f82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107c482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108fb90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b60006000828401905083811015151561091057fe5b8091505b5092915050565b600082821115151561092957fe5b81830390505b929150505600a165627a7a723058200fd03e91275db500aed258d2a1a31bfd9309488ed17946748c63467e23d4e8dc0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x23b872dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffff00000000000000000000000000000000000000000000000000000000000", "input": "0x23b872dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffff00000000000000000000000000000000000000000000000000000000000", "name": "transferFrom(address,address,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": ["0x0000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000", 115791978809374646774550386052594111420862745447897009313272701407525548851200], "value": "0x0"}]}}, {"address": 2664, "code": "function startPhase(\r\n      uint256 _tokens,\r\n      uint256 _price,\r\n      uint256 _limit\r\n      ) onlyOwner {\r\n        require(tokensSelling == 0);\r\n        require(_tokens <= token.balanceOf(this));\r\n        tokensSelling = _tokens * 1 ether;\r\n        tokenPrice = _price;\r\n        purchaseLimit = _limit * 1 ether;\r\n    }", "contract": "DesTokenSale", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 263, "max_gas_used": 4961, "min_gas_used": 3642, "severity": "Medium", "sourceMap": "7662:324", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0", "input": "0x1f8c07b0", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 2671, "code": "token.balanceOf(this)", "contract": "DesTokenSale", "description": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 269, "max_gas_used": 115003, "min_gas_used": 19498, "severity": "Low", "sourceMap": "7839:21", "swc-id": "107", "title": "External Call To User-Supplied Address", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0", "input": "0x1f8c07b0", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 2715, "code": "_tokens * 1 ether", "contract": "DesTokenSale", "description": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. ", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 270, "max_gas_used": 115003, "min_gas_used": 19498, "severity": "High", "sourceMap": ":17", "swc-id": "101", "title": "Integer Arithmetic Bugs", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b020", "input": "0x1f8c07b020", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 2720, "code": "tokensSelling = _tokens * 1 ether", "contract": "DesTokenSale", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 270, "max_gas_used": 115003, "min_gas_used": 19498, "severity": "Medium", "sourceMap": ":33", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0", "input": "0x1f8c07b0", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 2727, "code": "tokenPrice = _price", "contract": "DesTokenSale", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 271, "max_gas_used": 115003, "min_gas_used": 19498, "severity": "Medium", "sourceMap": ":19", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0", "input": "0x1f8c07b0", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 2739, "code": "_limit * 1 ether", "contract": "DesTokenSale", "description": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. ", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 272, "max_gas_used": 115003, "min_gas_used": 19498, "severity": "High", "sourceMap": ":16", "swc-id": "101", "title": "Integer Arithmetic Bugs", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b00420844000000001800010000208040009419282c04d195ea4b244c2632d8081000000000000000000000000000000000000000000000000000000000000000004", "input": "0x1f8c07b00420844000000001800010000208040009419282c04d195ea4b244c2632d8081000000000000000000000000000000000000000000000000000000000000000004", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": [1866703256360336913516508996649632478426629925290229339073559975047625277569, 0, 1809251394333065553493296640760748560207343510400633813116524750123642650624], "value": "0x0"}]}}, {"address": 2744, "code": "purchaseLimit = _limit * 1 ether", "contract": "DesTokenSale", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "startPhase(uint256,uint256,uint256)", "lineno": 272, "max_gas_used": 115003, "min_gas_used": 19498, "severity": "Medium", "sourceMap": ":32", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0", "input": "0x1f8c07b0", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 3073, "code": "balances[_to].add(_value)", "contract": "DesToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "transferFrom(address,address,uint256)", "lineno": 120, "max_gas_used": 2956, "min_gas_used": 2291, "severity": "Medium", "sourceMap": ":::i", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052604060405190810160405280600981526020017f44455320546f6b656e000000000000000000000000000000000000000000000081525060039080519060200190610050929190610110565b50604060405190810160405280600381526020017f44455300000000000000000000000000000000000000000000000000000000008152506004908051906020019061009d929190610110565b5060126005556a1cf389cd46047d0300000060065534156100ba57fe5b5b600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015157805160ff191683800117855561017f565b8280016001018555821561017f579182015b8281111561017e578251825591602001919060010190610163565b5b50905061018c9190610190565b5090565b6101b291905b808211156101ae576000816000905550600101610196565b5090565b90565b610c53806101c46000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013d57806318160ddd1461017c57806323b872dd146101a25780632ff2e9dc14610200578063313ce5671461022657806370a082311461024c57806395d89b4114610296578063a9059cbb1461032f578063dd62ed3e1461036e575bfe5b34156100ac57fe5b6100b46103d7565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61017a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610475565b005b341561018457fe5b61018c6105f7565b6040518082815260200191505060405180910390f35b34156101aa57fe5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105fd565b005b341561020857fe5b6102106108c2565b6040518082815260200191505060405180910390f35b341561022e57fe5b6102366108c8565b6040518082815260200191505060405180910390f35b341561025457fe5b610280600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ce565b6040518082815260200191505060405180910390f35b341561029e57fe5b6102a6610918565b60405180806020018281038252838181518152602001915080519060200190808383600083146102f5575b8051825260208311156102f5576020820191506020810190506020830392506102d1565b505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033757fe5b61036c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109b6565b005b341561037657fe5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b65565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b505050505081565b600081148061050057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561050c5760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156106185760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506106e983600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061077e83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d48383610c0d90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b60065481565b60055481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b505050505081565b6040600481016000369050101515156109cf5760006000fd5b610a2182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ab682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600060008284019050838110151515610c0257fe5b8091505b5092915050565b6000828211151515610c1b57fe5b81830390505b929150505600a165627a7a72305820f61c6a951e81fe5037fb281117bbdfa02096009c32a0e99fcb442204659a9b0d0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffeffffffffffffffffffffffffffffffffffffffffffe31080000000000c000001", "input": "0x23b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffeffffffffffffffffffffffffffffffffffffffffffe31080000000000c000001", "name": "transferFrom(address,address,uint256)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": ["0x0000000000000000000000000000000000000000", "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", 115792089237316195423570985008687907853269984665640529058527862151016410513409], "value": "0x0"}]}}, {"address": 3098, "code": "balances[msg.sender].sub(_value)", "contract": "DesToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "transfer(address,uint256)", "lineno": 80, "max_gas_used": 1648, "min_gas_used": 1363, "severity": "Medium", "sourceMap": ":::i", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052604060405190810160405280600981526020017f44455320546f6b656e000000000000000000000000000000000000000000000081525060039080519060200190610050929190610110565b50604060405190810160405280600381526020017f44455300000000000000000000000000000000000000000000000000000000008152506004908051906020019061009d929190610110565b5060126005556a1cf389cd46047d0300000060065534156100ba57fe5b5b600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015157805160ff191683800117855561017f565b8280016001018555821561017f579182015b8281111561017e578251825591602001919060010190610163565b5b50905061018c9190610190565b5090565b6101b291905b808211156101ae576000816000905550600101610196565b5090565b90565b610c53806101c46000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013d57806318160ddd1461017c57806323b872dd146101a25780632ff2e9dc14610200578063313ce5671461022657806370a082311461024c57806395d89b4114610296578063a9059cbb1461032f578063dd62ed3e1461036e575bfe5b34156100ac57fe5b6100b46103d7565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61017a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610475565b005b341561018457fe5b61018c6105f7565b6040518082815260200191505060405180910390f35b34156101aa57fe5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105fd565b005b341561020857fe5b6102106108c2565b6040518082815260200191505060405180910390f35b341561022e57fe5b6102366108c8565b6040518082815260200191505060405180910390f35b341561025457fe5b610280600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ce565b6040518082815260200191505060405180910390f35b341561029e57fe5b6102a6610918565b60405180806020018281038252838181518152602001915080519060200190808383600083146102f5575b8051825260208311156102f5576020820191506020810190506020830392506102d1565b505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033757fe5b61036c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109b6565b005b341561037657fe5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b65565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b505050505081565b600081148061050057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561050c5760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156106185760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506106e983600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061077e83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d48383610c0d90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b60065481565b60055481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b505050505081565b6040600481016000369050101515156109cf5760006000fd5b610a2182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ab682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600060008284019050838110151515610c0257fe5b8091505b5092915050565b6000828211151515610c1b57fe5b81830390505b929150505600a165627a7a72305820f61c6a951e81fe5037fb281117bbdfa02096009c32a0e99fcb442204659a9b0d0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0xa9059cbb00000000000000000000000000000000000000000000000000000000000000001000100000000800400000010000000000000000000000000000000000000000", "input": "0xa9059cbb00000000000000000000000000000000000000000000000000000000000000001000100000000800400000010000000000000000000000000000000000000000", "name": "transfer(address,uint256)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": ["0x0000000000000000000000000000000000000000", 7237116005273823720067415026367166837223202262652511593016803743996774973440], "value": "0x0"}]}}, {"address": 3098, "code": "_allowance.sub(_value)", "contract": "DesToken", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "transferFrom(address,address,uint256)", "lineno": 122, "max_gas_used": 54824, "min_gas_used": 13589, "severity": "Medium", "sourceMap": ":::i", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052604060405190810160405280600981526020017f44455320546f6b656e000000000000000000000000000000000000000000000081525060039080519060200190610050929190610110565b50604060405190810160405280600381526020017f44455300000000000000000000000000000000000000000000000000000000008152506004908051906020019061009d929190610110565b5060126005556a1cf389cd46047d0300000060065534156100ba57fe5b5b600654600081905550600654600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015157805160ff191683800117855561017f565b8280016001018555821561017f579182015b8281111561017e578251825591602001919060010190610163565b5b50905061018c9190610190565b5090565b6101b291905b808211156101ae576000816000905550600101610196565b5090565b90565b610c53806101c46000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013d57806318160ddd1461017c57806323b872dd146101a25780632ff2e9dc14610200578063313ce5671461022657806370a082311461024c57806395d89b4114610296578063a9059cbb1461032f578063dd62ed3e1461036e575bfe5b34156100ac57fe5b6100b46103d7565b6040518080602001828103825283818151815260200191508051906020019080838360008314610103575b805182526020831115610103576020820191506020810190506020830392506100df565b505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014557fe5b61017a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610475565b005b341561018457fe5b61018c6105f7565b6040518082815260200191505060405180910390f35b34156101aa57fe5b6101fe600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105fd565b005b341561020857fe5b6102106108c2565b6040518082815260200191505060405180910390f35b341561022e57fe5b6102366108c8565b6040518082815260200191505060405180910390f35b341561025457fe5b610280600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ce565b6040518082815260200191505060405180910390f35b341561029e57fe5b6102a6610918565b60405180806020018281038252838181518152602001915080519060200190808383600083146102f5575b8051825260208311156102f5576020820191506020810190506020830392506102d1565b505050905090810190601f1680156103215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033757fe5b61036c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109b6565b005b341561037657fe5b6103c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b65565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b505050505081565b600081148061050057506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561050c5760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60005481565b60006060600481016000369050101515156106185760006000fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506106e983600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061077e83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107d48383610c0d90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b5b5050505050565b60065481565b60055481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ae5780601f10610983576101008083540402835291602001916109ae565b820191906000526020600020905b81548152906001019060200180831161099157829003601f168201915b505050505081565b6040600481016000369050101515156109cf5760006000fd5b610a2182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0d90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ab682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bed90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600060008284019050838110151515610c0257fe5b8091505b5092915050565b6000828211151515610c1b57fe5b81830390505b929150505600a165627a7a72305820f61c6a951e81fe5037fb281117bbdfa02096009c32a0e99fcb442204659a9b0d0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe3ffffffffffffffffffffffffffffffffffffffffff003ff2949910056103029", "input": "0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe3ffffffffffffffffffffffffffffffffffffffffff003ff2949910056103029", "name": "transferFrom(address,address,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": ["0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", 28948022309329048855892746252171976963317496166410121685925276423775843266601], "value": "0x0"}]}}, {"address": 3272, "code": "function finishPhase() onlyOwner {\r\n        require(tokensSelling != 0);\r\n        token.transfer(beneficiary, tokensSelling);\r\n        tokensSelling = 0;\r\n    }", "contract": "DesTokenSale", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "finishPhase()", "lineno": 277, "max_gas_used": 6893, "min_gas_used": 5337, "severity": "Medium", "sourceMap": "8106:160", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0000124", "input": "0x1f8c07b0000124", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x811aecf4", "input": "0x811aecf4", "name": "finishPhase()", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 3279, "code": "token.transfer(beneficiary, tokensSelling)", "contract": "DesTokenSale", "description": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "finishPhase()", "lineno": 279, "max_gas_used": 66653, "min_gas_used": 11097, "severity": "Low", "sourceMap": "8188:42", "swc-id": "107", "title": "External Call To User-Supplied Address", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b000c098", "input": "0x1f8c07b000c098", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x811aecf4", "input": "0x811aecf4", "name": "finishPhase()", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 3297, "code": "tokensSelling = 0", "contract": "DesTokenSale", "description": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.", "filename": "./0xd1265bfe57597840f89971b7e67538bac780f9ad.sol", "function": "finishPhase()", "lineno": 280, "max_gas_used": 66653, "min_gas_used": 11097, "severity": "Medium", "sourceMap": ":17", "swc-id": "107", "title": "State access after external call", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "input": "0x60606040526000600060146101000a81548160ff021916908315150217905550604060405190810160405280601881526020017f3344455320546f6b656e2053616c6520436f6e747261637400000000000000008152506001908051906020019061006b929190610185565b50600060045560006005556000600655600060075560006008556000600955341561009257fe5b604051604080611129833981016040528080519060200190919080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610ef0806102396000396000f300606060405236156100e4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461051f57806318886657146105b85780631f8c07b0146105de57806338af3eed146106105780634dcad927146106625780635ed7ca5b1461068857806377dc6ac71461069a5780637ff9b596146106c0578063811aecf4146106e65780638da5cb5b146106f8578063b3ebc3da1461074a578063b9b8af0b14610770578063cb3e64fd1461079a578063d7e64c00146107ac578063f2fde38b146107d2578063fc0c546a14610808575b61051d5b6000600060149054906101000a900460ff161515156101075760006000fd5b60006007541415151561011a5760006000fd5b662386f26fc1000034101515156101315760006000fd5b670de0b6b3a76400006008543481151561014757fe5b0402905060095461023a82600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561021457fe5b6102c65a03f1151561022257fe5b5050506040518051905061085a90919063ffffffff16565b111515156102485760006000fd5b61025d8160075461087a90919063ffffffff16565b6007819055506102788160045461085a90919063ffffffff16565b6004819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561034257fe5b6102c65a03f1151561035057fe5b505050604051805190501415610373576006600081548092919060010191905055505b6103883460055461085a90919063ffffffff16565b600581905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561044f57fe5b6102c65a03f1151561045d57fe5b505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156104c257fe5b3373ffffffffffffffffffffffffffffffffffffffff167f16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b88234604051808381526020018281526020019250505060405180910390a25b5b50565b005b341561052757fe5b61052f610894565b604051808060200182810382528381815181526020019150805190602001908083836000831461057e575b80518252602083111561057e5760208201915060208101905060208303925061055a565b505050905090810190601f1680156105aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105c057fe5b6105c8610932565b6040518082815260200191505060405180910390f35b34156105e657fe5b61060e6004808035906020019091908035906020019091908035906020019091905050610938565b005b341561061857fe5b610620610ac0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561066a57fe5b610672610ae6565b6040518082815260200191505060405180910390f35b341561069057fe5b610698610aec565b005b34156106a257fe5b6106aa610b68565b6040518082815260200191505060405180910390f35b34156106c857fe5b6106d0610b6e565b6040518082815260200191505060405180910390f35b34156106ee57fe5b6106f6610b74565b005b341561070057fe5b610708610ce6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075257fe5b61075a610d0c565b6040518082815260200191505060405180910390f35b341561077857fe5b610780610d12565b604051808215151515815260200191505060405180910390f35b34156107a257fe5b6107aa610d25565b005b34156107b457fe5b6107bc610dbe565b6040518082815260200191505060405180910390f35b34156107da57fe5b610806600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dc4565b005b341561081057fe5b610818610e9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006000828401905083811015151561086f57fe5b8091505b5092915050565b600082821115151561088857fe5b81830390505b92915050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60095481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109955760006000fd5b60006007541415156109a75760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610a6957fe5b6102c65a03f11515610a7757fe5b505050604051805190508311151515610a905760006000fd5b670de0b6b3a7640000830260078190555081600881905550670de0b6b3a764000081026009819055505b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b495760006000fd5b6001600060146101000a81548160ff0219169083151502179055505b5b565b60075481565b60085481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd15760006000fd5b600060075414151515610be45760006000fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515610cc957fe5b6102c65a03f11515610cd757fe5b50505060006007819055505b5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060149054906101000a900460ff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d825760006000fd5b600060149054906101000a900460ff161515610d9e5760006000fd5b6000600060146101000a81548160ff0219169083151502179055505b5b5b565b60065481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e215760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e995780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058205524b3af7ea165560dbdefd55ab0b18544b26e7c6f4941ad017a5ccb68d1b0b50029efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x1f8c07b0010806", "input": "0x1f8c07b0010806", "name": "startPhase(uint256,uint256,uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x811aecf4", "input": "0x811aecf4", "name": "finishPhase()", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}], "success": true}
