{"error": null, "issues": [{"address": 11, "code": "function HackDao() {\r\n    \r\n    if (owner>0) throw;\r\n    owner = msg.sender;\r\n    //oraclize_setNetwork(networkID_consensys);\r\n    }", "contract": "HackDao", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x5c430fa24f782cf8156ca97208c42127b17b0494.sol", "function": "constructor", "lineno": 340, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "13439:132", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611156100545760006000fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b611822806100a66000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461008357806338bbfa50146100ea5780634c6b25b114610194578063581627bc146101d25780637b1aa45f146101f25780638da5cb5b146101fc578063cddbe7291461024e575bfe5b341561008b57fe5b6100e860048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610282565b005b34156100f257fe5b61019260048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108e2565b005b341561019c57fe5b6101b66004808035600019169060200190919050506108e8565b604051808260ff1660ff16815260200191505060405180910390f35b34156101da57fe5b6101f06004808035906020019091905050610908565b005b6101fa6109c5565b005b341561020457fe5b61020c610a26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102646004808035906020019091905050610a4c565b60405180826000191660001916815260200191505060405180910390f35b60007f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260088152602001807f63616c6c6261636b00000000000000000000000000000000000000000000000081525060200191505060405180910390a16102f4610c18565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032e5760006000fd5b600a61033983610dfa565b11156103455760006000fd5b600260036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff1614806103aa5750600160036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff16145b156103b55760006000fd5b7fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78360405180826000191660001916815260200191505060405180910390a16005600084600019166000191681526020019081526020016000205461041983610dfa565b1115610797577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260038152602001807f77696e000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a17f91b2b30e127e1d3f311038d05d9983080a65a18d12ce799036aef822992e42ad600560008560001916600019168152602001908152602001600020546040518082815260200191505060405180910390a1600160056000856000191660001916815260200190815260200160002054141561050257606d90505b600260056000856000191660001916815260200190815260200160002054141561052b57607a90505b600360056000856000191660001916815260200190815260200160002054141561055457608c90505b600460056000856000191660001916815260200190815260200160002054141561057d5760a390505b60056005600085600019166000191681526020019081526020016000205414156105a65760c490505b60066005600085600019166000191681526020019081526020016000205414156105cf5760f590505b60076005600085600019166000191681526020019081526020016000205414156105f95761014690505b6008600560008560001916600019168152602001908152602001600020541415610623576101ea90505b600960056000856000191660001916815260200190815260200160002054141561064d576103d490505b600260036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060026000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc606483600460008860001916600019168152602001908152602001600020540281151561070057fe5b049081150290604051809050600060405180830381858888f193505050501515610791577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260208152602001807f627567212062657420746f2077696e6e657220776173206e6f742073656e742181525060200191505060405180910390a1610792565b5b610835565b600160036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260048152602001807f6c6f73650000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a15b60026000846000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560036000846000191660001916815260200190815260200160002060006101000a81549060ff021916905560056000846000191660001916815260200190815260200160002060009055600460008460001916600019168152602001908152602001600020600090555b505050565b5b505050565b60036020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109655760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f19350505050505b5b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a225760006000fd5b5b5b565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060006000600034111515610a625760006000fd5b600a841115610a715760006000fd5b6001841015610a805760006000fd5b678ac7230489e80000341115610a965760006000fd5b610b32604060405190810160405280600c81526020017f576f6c6672616d416c7068610000000000000000000000000000000000000000815250606060405190810160405280602681526020017f72616e646f6d20696e7465676572206e756d626572206265747765656e20312081526020017f616e642031300000000000000000000000000000000000000000000000000000815250610e0f565b90503360026000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346004600083600019166000191681526020019081526020016000208190555083600560008360001916600019168152602001908152602001600020819055507fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78160405180826000191660001916815260200191505060405180910390a18092505b5050919050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c6757610c65600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610cf557fe5b6102c65a03f11515610d0357fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610ddb57fe5b6102c65a03f11515610de957fe5b5050506040518051905090505b5b90565b6000610e078260006114d8565b90505b919050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e6057610e5e600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610eee57fe5b6102c65a03f11515610efc57fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314611008575b80518252602083111561100857602082019150602081019050602083039250610fe4565b505050905090810190601f1680156110345780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561104f57fe5b6102c65a03f1151561105d57fe5b50505060405180519050905062030d403a02670de0b6b3a76400000181111561108c5760006001029150611235565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018060200183810383528581815181526020019150805190602001908083836000831461115c575b80518252602083111561115c57602082019150602081019050602083039250611138565b505050905090810190601f1680156111885780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383600083146111d0575b8051825260208311156111d0576020820191506020810190506020830392506111ac565b505050905090810190601f1680156111fc5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151561121957fe5b6125ee5a03f1151561122757fe5b505050506040518051905091505b5b5092915050565b6000600061125e731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6117d6565b11156112c257731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006112e173c03a2615d5efaf5f49f60b7bb6583eaec212fdf16117d6565b11156113455773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113647320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6117d6565b11156113c8577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113e77393bbbe5ce77034e3095f0479919962a903f898ad6117d6565b111561144b577393bbbe5ce77034e3095f0479919962a903f898ad600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600061146a7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6117d6565b11156114ce577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600090505b919050565b60006114e26117e2565b6000600060008693506000925060009150600090505b83518110156117b65760307f010000000000000000000000000000000000000000000000000000000000000002848281518110151561153357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561164b575060397f01000000000000000000000000000000000000000000000000000000000000000284828151811015156115db57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b156116fd57811561166f576000861415611664576117b6565b8580600190039650505b5b600a830292506030848281518110151561168557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900403830192506117a8565b602e7f010000000000000000000000000000000000000000000000000000000000000002848281518110151561172f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156117a757600191505b5b5b80806001019150506114f8565b60008611156117c85785600a0a830292505b8294505b5050505092915050565b6000813b90505b919050565b6020604051908101604052806000815250905600a165627a7a72305820ce9b77b8b3fa308bb66a25eb7ec98d0c15c619ec48fec225699275aa57baaf140029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 11, "code": "contract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if(address(OAR)==0) oraclize_setNetwork(networkID_auto);\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf)>0){ //ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x93bbbe5ce77034e3095f0479919962a903f898ad)>0){ //norsborg testnet\r\n            OAR = OraclizeAddrResolverI(0x93bbbe5ce77034e3095f0479919962a903f898ad);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n    \r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }    \r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    \r\n\r\n}", "contract": "usingOraclize", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x5c430fa24f782cf8156ca97208c42127b17b0494.sol", "function": "constructor", "lineno": 57, "max_gas_used": 131, "min_gas_used": 36, "severity": "Medium", "sourceMap": "2328:10723:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x2", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6101b98061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461004657806338bbfa50146100ad575bfe5b341561004e57fe5b6100ab60048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610157565b005b34156100b557fe5b61015560048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610187565b005b6101828282600060405180591061016b5750595b908082528060200260200182016040525b50610187565b5b5050565b5b5050505600a165627a7a723058209c057be9ec0d0df4b31e79b8f2acc72759d1f02eda3112efc3eeb1af1622b60b0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x1"}]}}, {"address": 77, "code": "function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }", "contract": "usingOraclize", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x5c430fa24f782cf8156ca97208c42127b17b0494.sol", "function": "__callback(bytes32,string)", "lineno": 108, "max_gas_used": 177, "min_gas_used": 82, "severity": "Medium", "sourceMap": "4361:106", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6101b98061001c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461004657806338bbfa50146100ad575bfe5b341561004e57fe5b6100ab60048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610157565b005b34156100b557fe5b61015560048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610187565b005b6101828282600060405180591061016b5750595b908082528060200260200182016040525b50610187565b5b5050565b5b5050505600a165627a7a723058209c057be9ec0d0df4b31e79b8f2acc72759d1f02eda3112efc3eeb1af1622b60b0029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x27dc297e", "input": "0x27dc297e", "name": "__callback(bytes32,string)", "origin": "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "resolved_input": null, "value": "0x1"}]}}, {"address": 130, "code": "contract HackDao is usingOraclize {\r\n  \r\n   struct Game {\r\n\t    address player;\r\n\t    string results;\r\n\t    uint betsvalue;\r\n\t    uint betslevel;\r\n\t}\r\n\t\r\n  mapping (bytes32 => address) bets;\r\n  mapping (bytes32 => uint8) public results; \r\n  mapping (bytes32 => uint) betsvalue;\r\n  mapping (bytes32 => uint) betslevel;\r\n  address public owner;\r\n  \r\n  \r\n    \r\n  function HackDao() {\r\n    \r\n    if (owner>0) throw;\r\n    owner = msg.sender;\r\n    //oraclize_setNetwork(networkID_consensys);\r\n    }\r\n  \r\n  modifier onlyOwner {\r\n        if (msg.sender != owner)\r\n            throw;\r\n        _;\r\n    }\r\n\t\r\n  event LogB(bytes32 h);\r\n  event LogS(string s);\r\n  event LogI(uint s);\r\n    \r\n  function game (uint level) payable returns (bytes32) {\r\n\t   \r\n\t   if (msg.value <= 0) throw;\r\n\t   if (level > 10) throw;\r\n\t   if (level < 1) throw;\r\n\t   \r\n\t   \r\n\t   //temprorary  disabled\r\n\t   /* \r\n\t   if (level == 1 && msg.value < 0.99 ether) throw;\r\n\t   if (level == 2 && msg.value < 0.99 ether*1.09) throw;\r\n\t   if (level == 3 && msg.value < 0.99 ether*1.3298) throw;\r\n\t   if (level == 4 && msg.value < 0.99 ether*1.86172) throw;\r\n\t   if (level == 5 && msg.value < 0.99 ether*3.0346036) throw;\r\n\t   if (level == 6 && msg.value < 0.99 ether*5.947823056) throw;\r\n\t   if (level == 7 && msg.value < 0.99 ether*14.5721664872) throw;\r\n\t   if (level == 8 && msg.value < 0.99 ether*47.505262748272) throw;\r\n\t   if (level == 9 && msg.value < 0.99 ether*232.7757874665328) throw;\r\n\t   */\r\n\t  \r\n\t   \r\n\t   if (msg.value > 10 ether) throw;\r\n\t   \r\n  \t   uint random_number;\r\n  \t   \r\n\t   bytes32 myid = oraclize_query(\"WolframAlpha\", \"random integer number between 1 and 10\");\r\n  \t   \r\n  \t   bets[myid] = msg.sender;\r\n  \t   betsvalue[myid] = msg.value;\r\n  \t   betslevel[myid] = level;\r\n  \t  \r\n  \t   LogB(myid);\r\n  \t   \r\n  \t   return myid;\r\n\t  }\r\n\t \r\n\r\n\t  \r\n\t   \r\n\t  function __callback(bytes32 myid, string result) {\r\n        LogS('callback');\r\n        \r\n        if (msg.sender != oraclize_cbAddress()) throw; //check this is oraclize ?\r\n        if (parseInt(result) > 10) throw;\r\n        \r\n\t\tif (results[myid] == 2 || results[myid] == 1) throw; //this game already run?\r\n\t\t\r\n        LogB(myid);\r\n         \r\n        \r\n        if (parseInt(result) > betslevel[myid]) {\r\n            LogS(\"win\");\r\n            LogI(betslevel[myid]);\r\n            \r\n            uint koef;\r\n            if (betslevel[myid] == 1) koef = 109; //90\r\n            if (betslevel[myid] == 2) koef = 122; //80\r\n            if (betslevel[myid] == 3) koef = 140; //70\r\n            if (betslevel[myid] == 4) koef = 163; //\r\n            if (betslevel[myid] == 5) koef = 196;\r\n            if (betslevel[myid] == 6) koef = 245;\r\n            if (betslevel[myid] == 7) koef = 326;\r\n            if (betslevel[myid] == 8) koef = 490;\r\n            if (betslevel[myid] == 9) koef = 980;\r\n            results[myid]=2;\r\n            if (!bets[myid].send(betsvalue[myid]*koef/100)) {LogS(\"bug! bet to winner was not sent!\");} else {\r\n               \r\n              }\r\n        } else {\r\n            results[myid]=1;\r\n            LogS(\"lose\");\r\n        }\r\n        \r\n        delete bets[myid];\r\n        delete results[myid];\r\n        delete betslevel[myid];\r\n        delete betsvalue[myid];\r\n      }\r\n      \r\n      \r\n      function ownerDeposit() payable onlyOwner  {\r\n        \r\n      }\r\n      \r\n      function ownerWithdrawl(uint amount) onlyOwner  {\r\n        owner.send(amount);\r\n      }\r\n    \r\n}", "contract": "HackDao", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x5c430fa24f782cf8156ca97208c42127b17b0494.sol", "function": "fallback", "lineno": 323, "max_gas_used": 132, "min_gas_used": 37, "severity": "Medium", "sourceMap": "13079:3417:0:-", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x1", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611156100545760006000fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b611822806100a66000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461008357806338bbfa50146100ea5780634c6b25b114610194578063581627bc146101d25780637b1aa45f146101f25780638da5cb5b146101fc578063cddbe7291461024e575bfe5b341561008b57fe5b6100e860048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610282565b005b34156100f257fe5b61019260048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108e2565b005b341561019c57fe5b6101b66004808035600019169060200190919050506108e8565b604051808260ff1660ff16815260200191505060405180910390f35b34156101da57fe5b6101f06004808035906020019091905050610908565b005b6101fa6109c5565b005b341561020457fe5b61020c610a26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102646004808035906020019091905050610a4c565b60405180826000191660001916815260200191505060405180910390f35b60007f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260088152602001807f63616c6c6261636b00000000000000000000000000000000000000000000000081525060200191505060405180910390a16102f4610c18565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032e5760006000fd5b600a61033983610dfa565b11156103455760006000fd5b600260036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff1614806103aa5750600160036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff16145b156103b55760006000fd5b7fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78360405180826000191660001916815260200191505060405180910390a16005600084600019166000191681526020019081526020016000205461041983610dfa565b1115610797577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260038152602001807f77696e000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a17f91b2b30e127e1d3f311038d05d9983080a65a18d12ce799036aef822992e42ad600560008560001916600019168152602001908152602001600020546040518082815260200191505060405180910390a1600160056000856000191660001916815260200190815260200160002054141561050257606d90505b600260056000856000191660001916815260200190815260200160002054141561052b57607a90505b600360056000856000191660001916815260200190815260200160002054141561055457608c90505b600460056000856000191660001916815260200190815260200160002054141561057d5760a390505b60056005600085600019166000191681526020019081526020016000205414156105a65760c490505b60066005600085600019166000191681526020019081526020016000205414156105cf5760f590505b60076005600085600019166000191681526020019081526020016000205414156105f95761014690505b6008600560008560001916600019168152602001908152602001600020541415610623576101ea90505b600960056000856000191660001916815260200190815260200160002054141561064d576103d490505b600260036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060026000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc606483600460008860001916600019168152602001908152602001600020540281151561070057fe5b049081150290604051809050600060405180830381858888f193505050501515610791577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260208152602001807f627567212062657420746f2077696e6e657220776173206e6f742073656e742181525060200191505060405180910390a1610792565b5b610835565b600160036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260048152602001807f6c6f73650000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a15b60026000846000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560036000846000191660001916815260200190815260200160002060006101000a81549060ff021916905560056000846000191660001916815260200190815260200160002060009055600460008460001916600019168152602001908152602001600020600090555b505050565b5b505050565b60036020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109655760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f19350505050505b5b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a225760006000fd5b5b5b565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060006000600034111515610a625760006000fd5b600a841115610a715760006000fd5b6001841015610a805760006000fd5b678ac7230489e80000341115610a965760006000fd5b610b32604060405190810160405280600c81526020017f576f6c6672616d416c7068610000000000000000000000000000000000000000815250606060405190810160405280602681526020017f72616e646f6d20696e7465676572206e756d626572206265747765656e20312081526020017f616e642031300000000000000000000000000000000000000000000000000000815250610e0f565b90503360026000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346004600083600019166000191681526020019081526020016000208190555083600560008360001916600019168152602001908152602001600020819055507fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78160405180826000191660001916815260200191505060405180910390a18092505b5050919050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c6757610c65600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610cf557fe5b6102c65a03f11515610d0357fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610ddb57fe5b6102c65a03f11515610de957fe5b5050506040518051905090505b5b90565b6000610e078260006114d8565b90505b919050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e6057610e5e600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610eee57fe5b6102c65a03f11515610efc57fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314611008575b80518252602083111561100857602082019150602081019050602083039250610fe4565b505050905090810190601f1680156110345780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561104f57fe5b6102c65a03f1151561105d57fe5b50505060405180519050905062030d403a02670de0b6b3a76400000181111561108c5760006001029150611235565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018060200183810383528581815181526020019150805190602001908083836000831461115c575b80518252602083111561115c57602082019150602081019050602083039250611138565b505050905090810190601f1680156111885780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383600083146111d0575b8051825260208311156111d0576020820191506020810190506020830392506111ac565b505050905090810190601f1680156111fc5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151561121957fe5b6125ee5a03f1151561122757fe5b505050506040518051905091505b5b5092915050565b6000600061125e731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6117d6565b11156112c257731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006112e173c03a2615d5efaf5f49f60b7bb6583eaec212fdf16117d6565b11156113455773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113647320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6117d6565b11156113c8577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113e77393bbbe5ce77034e3095f0479919962a903f898ad6117d6565b111561144b577393bbbe5ce77034e3095f0479919962a903f898ad600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600061146a7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6117d6565b11156114ce577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600090505b919050565b60006114e26117e2565b6000600060008693506000925060009150600090505b83518110156117b65760307f010000000000000000000000000000000000000000000000000000000000000002848281518110151561153357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561164b575060397f01000000000000000000000000000000000000000000000000000000000000000284828151811015156115db57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b156116fd57811561166f576000861415611664576117b6565b8580600190039650505b5b600a830292506030848281518110151561168557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900403830192506117a8565b602e7f010000000000000000000000000000000000000000000000000000000000000002848281518110151561172f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156117a757600191505b5b5b80806001019150506114f8565b60008611156117c85785600a0a830292505b8294505b5050505092915050565b6000813b90505b919050565b6020604051908101604052806000815250905600a165627a7a72305820ce9b77b8b3fa308bb66a25eb7ec98d0c15c619ec48fec225699275aa57baaf140029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x", "input": "0x", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}]}}, {"address": 2490, "code": "owner.send(amount)", "contract": "HackDao", "description": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.", "filename": "./0x5c430fa24f782cf8156ca97208c42127b17b0494.sol", "function": "ownerWithdrawl(uint256)", "lineno": 442, "max_gas_used": 37671, "min_gas_used": 2730, "severity": "Medium", "sourceMap": "16459:18", "swc-id": "104", "title": "Unchecked return value from external call.", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611156100545760006000fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b611822806100a66000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461008357806338bbfa50146100ea5780634c6b25b114610194578063581627bc146101d25780637b1aa45f146101f25780638da5cb5b146101fc578063cddbe7291461024e575bfe5b341561008b57fe5b6100e860048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610282565b005b34156100f257fe5b61019260048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108e2565b005b341561019c57fe5b6101b66004808035600019169060200190919050506108e8565b604051808260ff1660ff16815260200191505060405180910390f35b34156101da57fe5b6101f06004808035906020019091905050610908565b005b6101fa6109c5565b005b341561020457fe5b61020c610a26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102646004808035906020019091905050610a4c565b60405180826000191660001916815260200191505060405180910390f35b60007f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260088152602001807f63616c6c6261636b00000000000000000000000000000000000000000000000081525060200191505060405180910390a16102f4610c18565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032e5760006000fd5b600a61033983610dfa565b11156103455760006000fd5b600260036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff1614806103aa5750600160036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff16145b156103b55760006000fd5b7fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78360405180826000191660001916815260200191505060405180910390a16005600084600019166000191681526020019081526020016000205461041983610dfa565b1115610797577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260038152602001807f77696e000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a17f91b2b30e127e1d3f311038d05d9983080a65a18d12ce799036aef822992e42ad600560008560001916600019168152602001908152602001600020546040518082815260200191505060405180910390a1600160056000856000191660001916815260200190815260200160002054141561050257606d90505b600260056000856000191660001916815260200190815260200160002054141561052b57607a90505b600360056000856000191660001916815260200190815260200160002054141561055457608c90505b600460056000856000191660001916815260200190815260200160002054141561057d5760a390505b60056005600085600019166000191681526020019081526020016000205414156105a65760c490505b60066005600085600019166000191681526020019081526020016000205414156105cf5760f590505b60076005600085600019166000191681526020019081526020016000205414156105f95761014690505b6008600560008560001916600019168152602001908152602001600020541415610623576101ea90505b600960056000856000191660001916815260200190815260200160002054141561064d576103d490505b600260036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060026000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc606483600460008860001916600019168152602001908152602001600020540281151561070057fe5b049081150290604051809050600060405180830381858888f193505050501515610791577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260208152602001807f627567212062657420746f2077696e6e657220776173206e6f742073656e742181525060200191505060405180910390a1610792565b5b610835565b600160036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260048152602001807f6c6f73650000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a15b60026000846000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560036000846000191660001916815260200190815260200160002060006101000a81549060ff021916905560056000846000191660001916815260200190815260200160002060009055600460008460001916600019168152602001908152602001600020600090555b505050565b5b505050565b60036020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109655760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f19350505050505b5b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a225760006000fd5b5b5b565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060006000600034111515610a625760006000fd5b600a841115610a715760006000fd5b6001841015610a805760006000fd5b678ac7230489e80000341115610a965760006000fd5b610b32604060405190810160405280600c81526020017f576f6c6672616d416c7068610000000000000000000000000000000000000000815250606060405190810160405280602681526020017f72616e646f6d20696e7465676572206e756d626572206265747765656e20312081526020017f616e642031300000000000000000000000000000000000000000000000000000815250610e0f565b90503360026000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346004600083600019166000191681526020019081526020016000208190555083600560008360001916600019168152602001908152602001600020819055507fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78160405180826000191660001916815260200191505060405180910390a18092505b5050919050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c6757610c65600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610cf557fe5b6102c65a03f11515610d0357fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610ddb57fe5b6102c65a03f11515610de957fe5b5050506040518051905090505b5b90565b6000610e078260006114d8565b90505b919050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e6057610e5e600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610eee57fe5b6102c65a03f11515610efc57fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314611008575b80518252602083111561100857602082019150602081019050602083039250610fe4565b505050905090810190601f1680156110345780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561104f57fe5b6102c65a03f1151561105d57fe5b50505060405180519050905062030d403a02670de0b6b3a76400000181111561108c5760006001029150611235565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018060200183810383528581815181526020019150805190602001908083836000831461115c575b80518252602083111561115c57602082019150602081019050602083039250611138565b505050905090810190601f1680156111885780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383600083146111d0575b8051825260208311156111d0576020820191506020810190506020830392506111ac565b505050905090810190601f1680156111fc5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151561121957fe5b6125ee5a03f1151561122757fe5b505050506040518051905091505b5b5092915050565b6000600061125e731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6117d6565b11156112c257731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006112e173c03a2615d5efaf5f49f60b7bb6583eaec212fdf16117d6565b11156113455773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113647320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6117d6565b11156113c8577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113e77393bbbe5ce77034e3095f0479919962a903f898ad6117d6565b111561144b577393bbbe5ce77034e3095f0479919962a903f898ad600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600061146a7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6117d6565b11156114ce577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600090505b919050565b60006114e26117e2565b6000600060008693506000925060009150600090505b83518110156117b65760307f010000000000000000000000000000000000000000000000000000000000000002848281518110151561153357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561164b575060397f01000000000000000000000000000000000000000000000000000000000000000284828151811015156115db57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b156116fd57811561166f576000861415611664576117b6565b8580600190039650505b5b600a830292506030848281518110151561168557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900403830192506117a8565b602e7f010000000000000000000000000000000000000000000000000000000000000002848281518110151561172f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156117a757600191505b5b5b80806001019150506114f8565b60008611156117c85785600a0a830292505b8294505b5050505092915050565b6000813b90505b919050565b6020604051908101604052806000815250905600a165627a7a72305820ce9b77b8b3fa308bb66a25eb7ec98d0c15c619ec48fec225699275aa57baaf140029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x581627bc", "input": "0x581627bc", "name": "ownerWithdrawl(uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x581627bc", "input": "0x581627bc", "name": "ownerWithdrawl(uint256)", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "resolved_input": null, "value": "0x0"}]}}, {"address": 3316, "code": "function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf)>0){ //ether.camp ide\r\n            OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x93bbbe5ce77034e3095f0479919962a903f898ad)>0){ //norsborg testnet\r\n            OAR = OraclizeAddrResolverI(0x93bbbe5ce77034e3095f0479919962a903f898ad);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa);\r\n            return true;\r\n        }\r\n        return false;\r\n    }", "contract": "HackDao", "description": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).", "filename": "./0x5c430fa24f782cf8156ca97208c42127b17b0494.sol", "function": "__callback(bytes32,string)", "lineno": 84, "max_gas_used": 12196, "min_gas_used": 7658, "severity": "Medium", "sourceMap": ":::o", "swc-id": "110", "title": "Exception State", "tx_sequence": {"initialState": {"accounts": {"0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}, "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {"balance": "0x0", "code": "", "nonce": 0, "storage": "{}"}}}, "steps": [{"address": "", "calldata": "", "input": "0x6060604052341561000c57fe5b5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611156100545760006000fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b611822806100a66000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327dc297e1461008357806338bbfa50146100ea5780634c6b25b114610194578063581627bc146101d25780637b1aa45f146101f25780638da5cb5b146101fc578063cddbe7291461024e575bfe5b341561008b57fe5b6100e860048080356000191690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610282565b005b34156100f257fe5b61019260048080356000191690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108e2565b005b341561019c57fe5b6101b66004808035600019169060200190919050506108e8565b604051808260ff1660ff16815260200191505060405180910390f35b34156101da57fe5b6101f06004808035906020019091905050610908565b005b6101fa6109c5565b005b341561020457fe5b61020c610a26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102646004808035906020019091905050610a4c565b60405180826000191660001916815260200191505060405180910390f35b60007f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260088152602001807f63616c6c6261636b00000000000000000000000000000000000000000000000081525060200191505060405180910390a16102f4610c18565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032e5760006000fd5b600a61033983610dfa565b11156103455760006000fd5b600260036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff1614806103aa5750600160036000856000191660001916815260200190815260200160002060009054906101000a900460ff1660ff16145b156103b55760006000fd5b7fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78360405180826000191660001916815260200191505060405180910390a16005600084600019166000191681526020019081526020016000205461041983610dfa565b1115610797577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260038152602001807f77696e000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a17f91b2b30e127e1d3f311038d05d9983080a65a18d12ce799036aef822992e42ad600560008560001916600019168152602001908152602001600020546040518082815260200191505060405180910390a1600160056000856000191660001916815260200190815260200160002054141561050257606d90505b600260056000856000191660001916815260200190815260200160002054141561052b57607a90505b600360056000856000191660001916815260200190815260200160002054141561055457608c90505b600460056000856000191660001916815260200190815260200160002054141561057d5760a390505b60056005600085600019166000191681526020019081526020016000205414156105a65760c490505b60066005600085600019166000191681526020019081526020016000205414156105cf5760f590505b60076005600085600019166000191681526020019081526020016000205414156105f95761014690505b6008600560008560001916600019168152602001908152602001600020541415610623576101ea90505b600960056000856000191660001916815260200190815260200160002054141561064d576103d490505b600260036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff16021790555060026000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc606483600460008860001916600019168152602001908152602001600020540281151561070057fe5b049081150290604051809050600060405180830381858888f193505050501515610791577f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260208152602001807f627567212062657420746f2077696e6e657220776173206e6f742073656e742181525060200191505060405180910390a1610792565b5b610835565b600160036000856000191660001916815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f70d816668b2732e5fb6f136b2561a576ff46b80a1ced4f5fdae6ede3c87708ab6040518080602001828103825260048152602001807f6c6f73650000000000000000000000000000000000000000000000000000000081525060200191505060405180910390a15b60026000846000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560036000846000191660001916815260200190815260200160002060006101000a81549060ff021916905560056000846000191660001916815260200190815260200160002060009055600460008460001916600019168152602001908152602001600020600090555b505050565b5b505050565b60036020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109655760006000fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051809050600060405180830381858888f19350505050505b5b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a225760006000fd5b5b5b565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060006000600034111515610a625760006000fd5b600a841115610a715760006000fd5b6001841015610a805760006000fd5b678ac7230489e80000341115610a965760006000fd5b610b32604060405190810160405280600c81526020017f576f6c6672616d416c7068610000000000000000000000000000000000000000815250606060405190810160405280602681526020017f72616e646f6d20696e7465676572206e756d626572206265747765656e20312081526020017f616e642031300000000000000000000000000000000000000000000000000000815250610e0f565b90503360026000836000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346004600083600019166000191681526020019081526020016000208190555083600560008360001916600019168152602001908152602001600020819055507fd8cfd15a18acf055da86af88b707b6b949547c68600ee3545bf254a1261bc3c78160405180826000191660001916815260200191505060405180910390a18092505b5050919050565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c6757610c65600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610cf557fe5b6102c65a03f11515610d0357fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c281d19e6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610ddb57fe5b6102c65a03f11515610de957fe5b5050506040518051905090505b5b90565b6000610e078260006114d8565b90505b919050565b600060006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e6057610e5e600061123d565b505b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cc48316000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401809050602060405180830381600087803b1515610eee57fe5b6102c65a03f11515610efc57fe5b50505060405180519050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663524f3889856000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360008314611008575b80518252602083111561100857602082019150602081019050602083039250610fe4565b505050905090810190601f1680156110345780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561104f57fe5b6102c65a03f1151561105d57fe5b50505060405180519050905062030d403a02670de0b6b3a76400000181111561108c5760006001029150611235565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adf59f9982600087876000604051602001526040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018060200183810383528581815181526020019150805190602001908083836000831461115c575b80518252602083111561115c57602082019150602081019050602083039250611138565b505050905090810190601f1680156111885780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383600083146111d0575b8051825260208311156111d0576020820191506020810190506020830392506111ac565b505050905090810190601f1680156111fc5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151561121957fe5b6125ee5a03f1151561122757fe5b505050506040518051905091505b5b5092915050565b6000600061125e731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed6117d6565b11156112c257731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006112e173c03a2615d5efaf5f49f60b7bb6583eaec212fdf16117d6565b11156113455773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113647320e12a1f859b3feae5fb2a0a32c18f5a65555bbf6117d6565b11156113c8577320e12a1f859b3feae5fb2a0a32c18f5a65555bbf600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b60006113e77393bbbe5ce77034e3095f0479919962a903f898ad6117d6565b111561144b577393bbbe5ce77034e3095f0479919962a903f898ad600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600061146a7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa6117d6565b11156114ce577351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190506114d3565b600090505b919050565b60006114e26117e2565b6000600060008693506000925060009150600090505b83518110156117b65760307f010000000000000000000000000000000000000000000000000000000000000002848281518110151561153357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561164b575060397f01000000000000000000000000000000000000000000000000000000000000000284828151811015156115db57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b156116fd57811561166f576000861415611664576117b6565b8580600190039650505b5b600a830292506030848281518110151561168557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900403830192506117a8565b602e7f010000000000000000000000000000000000000000000000000000000000000002848281518110151561172f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156117a757600191505b5b5b80806001019150506114f8565b60008611156117c85785600a0a830292505b8294505b5050505092915050565b6000813b90505b919050565b6020604051908101604052806000815250905600a165627a7a72305820ce9b77b8b3fa308bb66a25eb7ec98d0c15c619ec48fec225699275aa57baaf140029", "name": "unknown", "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe", "value": "0x0"}, {"address": "0x901d12ebe1b195e5aa8748e62bd7734ae19b51f", "calldata": "0x27dc297e", "input": "0x27dc297e", "name": "__callback(bytes32,string)", "origin": "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef", "resolved_input": null, "value": "0x0"}]}}], "success": true}
