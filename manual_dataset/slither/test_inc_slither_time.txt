'solc --version' running
'solc ./test_inc.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/manual_dataset' running
Compilation warnings/errors on ./test_inc.sol:
./test_inc.sol:37:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(a)();
        ^------------------------^


tool_fail.non_buggy_local() (test_inc.sol#6-10) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#9)
tool_fail.non_buggy_single_statement() (test_inc.sol#12-14) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(a < 10 && msg.sender.call.value(a ++)()) (test_inc.sol#13)
tool_fail.non_buggy1() (test_inc.sol#16-18) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#17)
tool_fail.buggy_require() (test_inc.sol#20-24) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#21)
tool_fail.buggy_single_statement_3() (test_inc.sol#26-28) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(b -- < 10 && msg.sender.call.value(a)() && b < 10) (test_inc.sol#27)
tool_fail.buggy_require_2() (test_inc.sol#30-33) sends eth to arbitrary user
	Dangerous calls:
	- (msg.sender.call.value(b ++)()) (test_inc.sol#31)
tool_fail.buggy_require_3() (test_inc.sol#35-39) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (test_inc.sol#37)
tool_fail.buggy_require_4() (test_inc.sol#41-44) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(msg.sender.call.value(a)() && b < 10) (test_inc.sol#43)
tool_fail.non_buggy_require() (test_inc.sol#46-48) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(b -- < 10 && msg.sender.call.value(a)()) (test_inc.sol#47)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in tool_fail.buggy_require() (test_inc.sol#20-24):
	External calls:
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#21)
	State variables written after the call(s):
	- a = a + 1 (test_inc.sol#22)
	tool_fail.a (test_inc.sol#3) can be used in cross function reentrancies:
	- tool_fail.a (test_inc.sol#3)
	- tool_fail.buggy_require() (test_inc.sol#20-24)
	- tool_fail.buggy_require_3() (test_inc.sol#35-39)
	- tool_fail.buggy_require_4() (test_inc.sol#41-44)
	- tool_fail.buggy_single_statement_3() (test_inc.sol#26-28)
	- tool_fail.non_buggy1() (test_inc.sol#16-18)
	- tool_fail.non_buggy_local() (test_inc.sol#6-10)
	- tool_fail.non_buggy_require() (test_inc.sol#46-48)
	- tool_fail.non_buggy_single_statement() (test_inc.sol#12-14)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

tool_fail.buggy_require_2() (test_inc.sol#30-33) ignores return value by (msg.sender.call.value(b ++)()) (test_inc.sol#31)
tool_fail.buggy_require_3() (test_inc.sol#35-39) ignores return value by msg.sender.call.value(a)() (test_inc.sol#37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

Version constraint ^0.4.24 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- ^0.4.24 (test_inc.sol#1)
solc-0.4.24 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in tool_fail.non_buggy_local() (test_inc.sol#6-10):
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#9)
Low level call in tool_fail.non_buggy_single_statement() (test_inc.sol#12-14):
	- require(bool)(a < 10 && msg.sender.call.value(a ++)()) (test_inc.sol#13)
Low level call in tool_fail.non_buggy1() (test_inc.sol#16-18):
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#17)
Low level call in tool_fail.buggy_require() (test_inc.sol#20-24):
	- require(bool)(msg.sender.call.value(a ++)()) (test_inc.sol#21)
Low level call in tool_fail.buggy_single_statement_3() (test_inc.sol#26-28):
	- require(bool)(b -- < 10 && msg.sender.call.value(a)() && b < 10) (test_inc.sol#27)
Low level call in tool_fail.buggy_require_2() (test_inc.sol#30-33):
	- (msg.sender.call.value(b ++)()) (test_inc.sol#31)
Low level call in tool_fail.buggy_require_3() (test_inc.sol#35-39):
	- msg.sender.call.value(a)() (test_inc.sol#37)
Low level call in tool_fail.buggy_require_4() (test_inc.sol#41-44):
	- require(bool)(msg.sender.call.value(a)() && b < 10) (test_inc.sol#43)
Low level call in tool_fail.non_buggy_require() (test_inc.sol#46-48):
	- require(bool)(b -- < 10 && msg.sender.call.value(a)()) (test_inc.sol#47)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Contract tool_fail (test_inc.sol#2-51) is not in CapWords
Function tool_fail.non_buggy_local() (test_inc.sol#6-10) is not in mixedCase
Function tool_fail.non_buggy_single_statement() (test_inc.sol#12-14) is not in mixedCase
Function tool_fail.non_buggy1() (test_inc.sol#16-18) is not in mixedCase
Function tool_fail.buggy_require() (test_inc.sol#20-24) is not in mixedCase
Function tool_fail.buggy_single_statement_3() (test_inc.sol#26-28) is not in mixedCase
Function tool_fail.buggy_require_2() (test_inc.sol#30-33) is not in mixedCase
Function tool_fail.buggy_require_3() (test_inc.sol#35-39) is not in mixedCase
Function tool_fail.buggy_require_4() (test_inc.sol#41-44) is not in mixedCase
Function tool_fail.non_buggy_require() (test_inc.sol#46-48) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
./test_inc.sol analyzed (1 contracts with 94 detectors), 33 result(s) found

real	0m1.200s
user	0m1.084s
sys	0m0.119s
