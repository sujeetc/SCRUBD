'solc --version' running
'solc sample.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/manual_dataset' running
Compilation warnings/errors on sample.sol:
sample.sol:98:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:105:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:115:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:134:9: Warning: Use of the "var" keyword is deprecated.
        var b = Bcc[msg.sender].balance;
        ^---^
sample.sol:137:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:147:9: Warning: Use of the "var" keyword is deprecated.
        var b = Bcc[msg.sender];
        ^---^
sample.sol:149:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:158:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:168:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:178:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
sample.sol:124:9: Warning: This declaration shadows an existing declaration.
        uint x = a;
        ^----^
sample.sol:22:3: The shadowed declaration is here:
  uint public x;
  ^-----------^

sample.sol:134:9: Warning: This declaration shadows an existing declaration.
        var b = Bcc[msg.sender].balance;
        ^---^
sample.sol:10:3: The shadowed declaration is here:
  uint public b;
  ^-----------^

sample.sol:147:9: Warning: This declaration shadows an existing declaration.
        var b = Bcc[msg.sender];
        ^---^
sample.sol:10:3: The shadowed declaration is here:
  uint public b;
  ^-----------^

sample.sol:67:10: Warning: Return value of low-level calls not used.
         msg.sender.call.value(a)();
         ^------------------------^
sample.sol:79:13: Warning: Return value of low-level calls not used.
            msg.sender.call.value(b)();
            ^------------------------^
sample.sol:99:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
sample.sol:106:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
sample.sol:116:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
sample.sol:117:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(Acc[msg.sender].balance)();
        ^----------------------------------------------^
sample.sol:125:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(x)();
        ^------------------------^
sample.sol:138:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
sample.sol:150:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
sample.sol:96:19: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function Test(uint _am) public {
                  ^------^
sample.sol:122:32: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function Collect_local_var(uint _am) public 
                               ^------^
sample.sol:129:27: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function Collect_uoiu(uint _am) public 
                          ^------^


SimpleDAO.slither_fn_2() (sample.sol#50-56) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && a ++ < 10 (sample.sol#54)
SimpleDAO.slither() (sample.sol#58-62) sends eth to arbitrary user
	Dangerous calls:
	- a ++ < 10 && msg.sender.call.value(a)() && a < 10 (sample.sol#60)
SimpleDAO.slither_2() (sample.sol#64-70) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (sample.sol#67)
SimpleDAO.slithera_13() (sample.sol#73-82) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (sample.sol#79)
SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(x)() (sample.sol#125)
SimpleDAO.test_writes_within_node() (sample.sol#189-196) sends eth to arbitrary user
	Dangerous calls:
	- c ++ < 10 && msg.sender.call.value(d ++)() && b ++ < 10 (sample.sol#194)
SimpleDAO.test_writes_within_nodez() (sample.sol#198-207) sends eth to arbitrary user
	Dangerous calls:
	- c ++ < 10 && msg.sender.call.value(d ++)() && b ++ < 10 (sample.sol#203)
SimpleDAO.withdraw_dd() (sample.sol#218-222) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.transfer(a) (sample.sol#220)
SimpleDAO.slither_fP_3() (sample.sol#224-228) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && b < 10 (sample.sol#226)
SimpleDAO.slither_fP_3z() (sample.sol#230-235) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && b < 10 (sample.sol#232)
SimpleDAO.slither_fn_4() (sample.sol#237-241) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#239)
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#239)
SimpleDAO.slither_fn_4z() (sample.sol#244-250) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#246)
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#246)
SimpleDAO.slitherfun1() (sample.sol#252-256) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() || b < 10 (sample.sol#254)
SimpleDAO.slitherfun2() (sample.sol#257-262) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (sample.sol#259)
SimpleDAO.slitherfun3() (sample.sol#264-270) sends eth to arbitrary user
	Dangerous calls:
	- c ++ > 10 && msg.sender.call.value(a)() && b < 10 (sample.sol#268)
SimpleDAO.slither_fn_5() (sample.sol#272-277) sends eth to arbitrary user
	Dangerous calls:
	- b < 10 || msg.sender.call.value(a)() (sample.sol#275)
SimpleDAO.slither_fn_6() (sample.sol#278-282) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() || b < 10 (sample.sol#280)
SimpleDAO.analyze() (sample.sol#283-289) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (sample.sol#287)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in SimpleDAO.CollectReal(uint256) (sample.sol#174-187):
	External calls:
	- msg.sender.call.value(_am)() (sample.sol#182)
	State variables written after the call(s):
	- acc.balance -= _am (sample.sol#184)
	SimpleDAO.Acc (sample.sol#90) can be used in cross function reentrancies:
	- SimpleDAO.Acc (sample.sol#90)
	- SimpleDAO.CollectReal(uint256) (sample.sol#174-187)
	- SimpleDAO.Collect_2(uint256) (sample.sol#155-161)
	- SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108)
	- SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120)
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140)
	- SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152)
	- SimpleDAO.Test(uint256) (sample.sol#96-100)
Reentrancy in SimpleDAO.Collect_2(uint256) (sample.sol#155-161):
	External calls:
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (sample.sol#159)
	State variables written after the call(s):
	- acc.balance -= _am (sample.sol#160)
	SimpleDAO.Acc (sample.sol#90) can be used in cross function reentrancies:
	- SimpleDAO.Acc (sample.sol#90)
	- SimpleDAO.CollectReal(uint256) (sample.sol#174-187)
	- SimpleDAO.Collect_2(uint256) (sample.sol#155-161)
	- SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108)
	- SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120)
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140)
	- SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152)
	- SimpleDAO.Test(uint256) (sample.sol#96-100)
Reentrancy in SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108):
	External calls:
	- msg.sender.call.value(acc.balance)() (sample.sol#106)
	State variables written after the call(s):
	- acc.balance -= _am (sample.sol#107)
	SimpleDAO.Acc (sample.sol#90) can be used in cross function reentrancies:
	- SimpleDAO.Acc (sample.sol#90)
	- SimpleDAO.CollectReal(uint256) (sample.sol#174-187)
	- SimpleDAO.Collect_2(uint256) (sample.sol#155-161)
	- SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108)
	- SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120)
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140)
	- SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152)
	- SimpleDAO.Test(uint256) (sample.sol#96-100)
Reentrancy in SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120):
	External calls:
	- msg.sender.call.value(acc.balance)() (sample.sol#116)
	- msg.sender.call.value(Acc[msg.sender].balance)() (sample.sol#117)
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && now > acc.unlockTime (sample.sol#118)
	State variables written after the call(s):
	- acc.balance -= _am (sample.sol#119)
	SimpleDAO.Acc (sample.sol#90) can be used in cross function reentrancies:
	- SimpleDAO.Acc (sample.sol#90)
	- SimpleDAO.CollectReal(uint256) (sample.sol#174-187)
	- SimpleDAO.Collect_2(uint256) (sample.sol#155-161)
	- SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108)
	- SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120)
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140)
	- SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152)
	- SimpleDAO.Test(uint256) (sample.sol#96-100)
Reentrancy in SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127):
	External calls:
	- msg.sender.call.value(x)() (sample.sol#125)
	State variables written after the call(s):
	- a = a - 10 (sample.sol#126)
	SimpleDAO.a (sample.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127)
	- SimpleDAO.a (sample.sol#9)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
	- SimpleDAO.withdraw_dd() (sample.sol#218-222)
Reentrancy in SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152):
	External calls:
	- msg.sender.call.value(acc.balance)() (sample.sol#150)
	State variables written after the call(s):
	- b.balance = b.balance - _am (sample.sol#151)
	SimpleDAO.Bcc (sample.sol#91) can be used in cross function reentrancies:
	- SimpleDAO.Bcc (sample.sol#91)
	- SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140)
	- SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152)
Reentrancy in SimpleDAO.analyze() (sample.sol#283-289):
	External calls:
	- msg.sender.call.value(a)() (sample.sol#287)
	State variables written after the call(s):
	- b = b - 10 (sample.sol#288)
	SimpleDAO.b (sample.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.b (sample.sol#10)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.slither_fP_3() (sample.sol#224-228):
	External calls:
	- msg.sender.call.value(a)() && b < 10 (sample.sol#226)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#227)
	SimpleDAO.b (sample.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.b (sample.sol#10)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.slither_fP_3z() (sample.sol#230-235):
	External calls:
	- msg.sender.call.value(a)() && b < 10 (sample.sol#232)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#233)
	SimpleDAO.b (sample.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.b (sample.sol#10)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.slither_fn_4z() (sample.sol#244-250):
	External calls:
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#246)
	State variables written after the call(s):
	- z = z + 10 (sample.sol#247)
	SimpleDAO.z (sample.sol#14) can be used in cross function reentrancies:
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.z (sample.sol#14)
Reentrancy in SimpleDAO.slither_fn_5() (sample.sol#272-277):
	External calls:
	- b < 10 || msg.sender.call.value(a)() (sample.sol#275)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#276)
	SimpleDAO.b (sample.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.b (sample.sol#10)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.slither_fn_6() (sample.sol#278-282):
	External calls:
	- msg.sender.call.value(a)() || b < 10 (sample.sol#280)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#281)
	SimpleDAO.b (sample.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.b (sample.sol#10)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.slithera_13() (sample.sol#73-82):
	External calls:
	- msg.sender.call.value(b)() (sample.sol#79)
	State variables written after the call(s):
	- a += 10 (sample.sol#81)
	SimpleDAO.a (sample.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127)
	- SimpleDAO.a (sample.sol#9)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
	- SimpleDAO.withdraw_dd() (sample.sol#218-222)
Reentrancy in SimpleDAO.slitherfun1() (sample.sol#252-256):
	External calls:
	- msg.sender.call.value(a)() || b < 10 (sample.sol#254)
	State variables written after the call(s):
	- b = b - 10 (sample.sol#255)
	SimpleDAO.b (sample.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.b (sample.sol#10)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.slitherfun3() (sample.sol#264-270):
	External calls:
	- c ++ > 10 && msg.sender.call.value(a)() && b < 10 (sample.sol#268)
	State variables written after the call(s):
	- a = a - 10 (sample.sol#269)
	SimpleDAO.a (sample.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127)
	- SimpleDAO.a (sample.sol#9)
	- SimpleDAO.analyze() (sample.sol#283-289)
	- SimpleDAO.slither() (sample.sol#58-62)
	- SimpleDAO.slither_2() (sample.sol#64-70)
	- SimpleDAO.slither_fP_3() (sample.sol#224-228)
	- SimpleDAO.slither_fP_3z() (sample.sol#230-235)
	- SimpleDAO.slither_fn_2() (sample.sol#50-56)
	- SimpleDAO.slither_fn_4() (sample.sol#237-241)
	- SimpleDAO.slither_fn_4z() (sample.sol#244-250)
	- SimpleDAO.slither_fn_5() (sample.sol#272-277)
	- SimpleDAO.slither_fn_6() (sample.sol#278-282)
	- SimpleDAO.slithera_13() (sample.sol#73-82)
	- SimpleDAO.slitherfun1() (sample.sol#252-256)
	- SimpleDAO.slitherfun2() (sample.sol#257-262)
	- SimpleDAO.slitherfun3() (sample.sol#264-270)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
	- SimpleDAO.withdraw_dd() (sample.sol#218-222)
Reentrancy in SimpleDAO.test_writes_within_node() (sample.sol#189-196):
	External calls:
	- c ++ < 10 && msg.sender.call.value(d ++)() && b ++ < 10 (sample.sol#194)
	State variables written after the call(s):
	- d ++ (sample.sol#195)
	SimpleDAO.d (sample.sol#12) can be used in cross function reentrancies:
	- SimpleDAO.d (sample.sol#12)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.test_writes_within_nodez() (sample.sol#198-207):
	External calls:
	- c ++ < 10 && msg.sender.call.value(d ++)() && b ++ < 10 (sample.sol#203)
	State variables written after the call(s):
	- d ++ (sample.sol#204)
	SimpleDAO.d (sample.sol#12) can be used in cross function reentrancies:
	- SimpleDAO.d (sample.sol#12)
	- SimpleDAO.test_writes_within_node() (sample.sol#189-196)
	- SimpleDAO.test_writes_within_nodez() (sample.sol#198-207)
Reentrancy in SimpleDAO.withdraw_balances_re_ent8() (sample.sol#42-48):
	External calls:
	- success = msg.sender.call.value(balances_re_ent8[msg.sender])() (sample.sol#45)
	State variables written after the call(s):
	- balances_re_ent8[msg.sender] = 0 (sample.sol#47)
	SimpleDAO.balances_re_ent8 (sample.sol#94) can be used in cross function reentrancies:
	- SimpleDAO.withdraw_balances_re_ent8() (sample.sol#42-48)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

SimpleDAO.MinSum (sample.sol#93) is never initialized. It is used in:
	- SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120)
	- SimpleDAO.Collect_2(uint256) (sample.sol#155-161)
	- SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172)
	- SimpleDAO.CollectReal(uint256) (sample.sol#174-187)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

Reentrancy in SimpleDAO.no_eth() (sample.sol#209-216):
	External calls:
	- ! (msg.sender.call()) (sample.sol#212)
	State variables written after the call(s):
	- not_called = false (sample.sol#215)
	SimpleDAO.not_called (sample.sol#24) can be used in cross function reentrancies:
	- SimpleDAO.no_eth() (sample.sol#209-216)
	- SimpleDAO.not_called (sample.sol#24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

SimpleDAO.slither_2() (sample.sol#64-70) ignores return value by msg.sender.call.value(a)() (sample.sol#67)
SimpleDAO.slithera_13() (sample.sol#73-82) ignores return value by msg.sender.call.value(b)() (sample.sol#79)
SimpleDAO.Test(uint256) (sample.sol#96-100) ignores return value by msg.sender.call.value(acc.balance)() (sample.sol#99)
SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108) ignores return value by msg.sender.call.value(acc.balance)() (sample.sol#106)
SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120) ignores return value by msg.sender.call.value(acc.balance)() (sample.sol#116)
SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120) ignores return value by msg.sender.call.value(Acc[msg.sender].balance)() (sample.sol#117)
SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127) ignores return value by msg.sender.call.value(x)() (sample.sol#125)
SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140) ignores return value by msg.sender.call.value(acc.balance)() (sample.sol#138)
SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152) ignores return value by msg.sender.call.value(acc.balance)() (sample.sol#150)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

SimpleDAO.Collect_local_var(uint256).x (sample.sol#124) shadows:
	- SimpleDAO.x (sample.sol#22) (state variable)
SimpleDAO.Collect_uoiu(uint256).b (sample.sol#134) shadows:
	- SimpleDAO.b (sample.sol#10) (state variable)
SimpleDAO.Collect_uoiuz(uint256).b (sample.sol#147) shadows:
	- SimpleDAO.b (sample.sol#10) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Reentrancy in SimpleDAO.slither() (sample.sol#58-62):
	External calls:
	- a ++ < 10 && msg.sender.call.value(a)() && a < 10 (sample.sol#60)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#61)
Reentrancy in SimpleDAO.slither_2() (sample.sol#64-70):
	External calls:
	- msg.sender.call.value(a)() (sample.sol#67)
	State variables written after the call(s):
	- b += 10 (sample.sol#69)
Reentrancy in SimpleDAO.slither_fP_3z() (sample.sol#230-235):
	External calls:
	- msg.sender.call.value(a)() && b < 10 (sample.sol#232)
	State variables written after the call(s):
	- c = a (sample.sol#234)
Reentrancy in SimpleDAO.slither_fn_2() (sample.sol#50-56):
	External calls:
	- msg.sender.call.value(a)() && a ++ < 10 (sample.sol#54)
	State variables written after the call(s):
	- b = c (sample.sol#55)
Reentrancy in SimpleDAO.slither_fn_4() (sample.sol#237-241):
	External calls:
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#239)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#240)
Reentrancy in SimpleDAO.slither_fn_4z() (sample.sol#244-250):
	External calls:
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#246)
	State variables written after the call(s):
	- b = b + 10 (sample.sol#248)
	- c = a (sample.sol#249)
Reentrancy in SimpleDAO.slitherfun2() (sample.sol#257-262):
	External calls:
	- msg.sender.call.value(a)() (sample.sol#259)
	State variables written after the call(s):
	- b = b - 10 (sample.sol#261)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120) uses timestamp for comparisons
	Dangerous comparisons:
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && now > acc.unlockTime (sample.sol#118)
SimpleDAO.CollectReal(uint256) (sample.sol#174-187) uses timestamp for comparisons
	Dangerous comparisons:
	- acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime (sample.sol#179)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Version constraint 0.4.24 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- 0.4.24 (sample.sol#6)
solc-0.4.24 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in SimpleDAO.withdraw_balances_re_ent8() (sample.sol#42-48):
	- success = msg.sender.call.value(balances_re_ent8[msg.sender])() (sample.sol#45)
Low level call in SimpleDAO.slither_fn_2() (sample.sol#50-56):
	- msg.sender.call.value(a)() && a ++ < 10 (sample.sol#54)
Low level call in SimpleDAO.slither() (sample.sol#58-62):
	- a ++ < 10 && msg.sender.call.value(a)() && a < 10 (sample.sol#60)
Low level call in SimpleDAO.slither_2() (sample.sol#64-70):
	- msg.sender.call.value(a)() (sample.sol#67)
Low level call in SimpleDAO.slithera_13() (sample.sol#73-82):
	- msg.sender.call.value(b)() (sample.sol#79)
Low level call in SimpleDAO.Test(uint256) (sample.sol#96-100):
	- msg.sender.call.value(acc.balance)() (sample.sol#99)
Low level call in SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108):
	- msg.sender.call.value(acc.balance)() (sample.sol#106)
Low level call in SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120):
	- msg.sender.call.value(acc.balance)() (sample.sol#116)
	- msg.sender.call.value(Acc[msg.sender].balance)() (sample.sol#117)
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && now > acc.unlockTime (sample.sol#118)
Low level call in SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127):
	- msg.sender.call.value(x)() (sample.sol#125)
Low level call in SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140):
	- msg.sender.call.value(acc.balance)() (sample.sol#138)
Low level call in SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152):
	- msg.sender.call.value(acc.balance)() (sample.sol#150)
Low level call in SimpleDAO.Collect_2(uint256) (sample.sol#155-161):
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (sample.sol#159)
Low level call in SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172):
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && acc.balance ++ >= 20 (sample.sol#170)
Low level call in SimpleDAO.CollectReal(uint256) (sample.sol#174-187):
	- msg.sender.call.value(_am)() (sample.sol#182)
Low level call in SimpleDAO.test_writes_within_node() (sample.sol#189-196):
	- c ++ < 10 && msg.sender.call.value(d ++)() && b ++ < 10 (sample.sol#194)
Low level call in SimpleDAO.test_writes_within_nodez() (sample.sol#198-207):
	- c ++ < 10 && msg.sender.call.value(d ++)() && b ++ < 10 (sample.sol#203)
Low level call in SimpleDAO.no_eth() (sample.sol#209-216):
	- ! (msg.sender.call()) (sample.sol#212)
Low level call in SimpleDAO.slither_fP_3() (sample.sol#224-228):
	- msg.sender.call.value(a)() && b < 10 (sample.sol#226)
Low level call in SimpleDAO.slither_fP_3z() (sample.sol#230-235):
	- msg.sender.call.value(a)() && b < 10 (sample.sol#232)
Low level call in SimpleDAO.slither_fn_4() (sample.sol#237-241):
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#239)
Low level call in SimpleDAO.slither_fn_4z() (sample.sol#244-250):
	- msg.sender.call.value(z)() && msg.sender.call.value(a)() (sample.sol#246)
Low level call in SimpleDAO.slitherfun1() (sample.sol#252-256):
	- msg.sender.call.value(a)() || b < 10 (sample.sol#254)
Low level call in SimpleDAO.slitherfun2() (sample.sol#257-262):
	- msg.sender.call.value(a)() (sample.sol#259)
Low level call in SimpleDAO.slitherfun3() (sample.sol#264-270):
	- c ++ > 10 && msg.sender.call.value(a)() && b < 10 (sample.sol#268)
Low level call in SimpleDAO.slither_fn_5() (sample.sol#272-277):
	- b < 10 || msg.sender.call.value(a)() (sample.sol#275)
Low level call in SimpleDAO.slither_fn_6() (sample.sol#278-282):
	- msg.sender.call.value(a)() || b < 10 (sample.sol#280)
Low level call in SimpleDAO.analyze() (sample.sol#283-289):
	- msg.sender.call.value(a)() (sample.sol#287)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function SimpleDAO.withdraw_balances_re_ent8() (sample.sol#42-48) is not in mixedCase
Function SimpleDAO.slither_fn_2() (sample.sol#50-56) is not in mixedCase
Function SimpleDAO.slither_2() (sample.sol#64-70) is not in mixedCase
Function SimpleDAO.slithera_13() (sample.sol#73-82) is not in mixedCase
Function SimpleDAO.Test(uint256) (sample.sol#96-100) is not in mixedCase
Function SimpleDAO.Collect_DD_1(uint256) (sample.sol#102-108) is not in mixedCase
Parameter SimpleDAO.Collect_DD_1(uint256)._am (sample.sol#102) is not in mixedCase
Function SimpleDAO.Collect_DDz(uint256) (sample.sol#112-120) is not in mixedCase
Parameter SimpleDAO.Collect_DDz(uint256)._am (sample.sol#112) is not in mixedCase
Function SimpleDAO.Collect_local_var(uint256) (sample.sol#122-127) is not in mixedCase
Function SimpleDAO.Collect_uoiu(uint256) (sample.sol#129-140) is not in mixedCase
Function SimpleDAO.Collect_uoiuz(uint256) (sample.sol#142-152) is not in mixedCase
Parameter SimpleDAO.Collect_uoiuz(uint256)._am (sample.sol#142) is not in mixedCase
Function SimpleDAO.Collect_2(uint256) (sample.sol#155-161) is not in mixedCase
Parameter SimpleDAO.Collect_2(uint256)._am (sample.sol#155) is not in mixedCase
Function SimpleDAO.Collect_khichdi(uint256) (sample.sol#164-172) is not in mixedCase
Parameter SimpleDAO.Collect_khichdi(uint256)._am (sample.sol#164) is not in mixedCase
Function SimpleDAO.CollectReal(uint256) (sample.sol#174-187) is not in mixedCase
Parameter SimpleDAO.CollectReal(uint256)._am (sample.sol#174) is not in mixedCase
Function SimpleDAO.test_writes_within_node() (sample.sol#189-196) is not in mixedCase
Function SimpleDAO.test_writes_within_nodez() (sample.sol#198-207) is not in mixedCase
Function SimpleDAO.no_eth() (sample.sol#209-216) is not in mixedCase
Function SimpleDAO.withdraw_dd() (sample.sol#218-222) is not in mixedCase
Function SimpleDAO.slither_fP_3() (sample.sol#224-228) is not in mixedCase
Function SimpleDAO.slither_fP_3z() (sample.sol#230-235) is not in mixedCase
Function SimpleDAO.slither_fn_4() (sample.sol#237-241) is not in mixedCase
Function SimpleDAO.slither_fn_4z() (sample.sol#244-250) is not in mixedCase
Function SimpleDAO.slither_fn_5() (sample.sol#272-277) is not in mixedCase
Function SimpleDAO.slither_fn_6() (sample.sol#278-282) is not in mixedCase
Variable SimpleDAO.not_called (sample.sol#24) is not in mixedCase
Variable SimpleDAO.Acc (sample.sol#90) is not in mixedCase
Variable SimpleDAO.Bcc (sample.sol#91) is not in mixedCase
Variable SimpleDAO.MinSum (sample.sol#93) is not in mixedCase
Variable SimpleDAO.balances_re_ent8 (sample.sol#94) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in SimpleDAO.withdraw_dd() (sample.sol#218-222):
	External calls:
	- msg.sender.transfer(a) (sample.sol#220)
	State variables written after the call(s):
	- a = a - 10 (sample.sol#221)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

SimpleDAO.intitalized (sample.sol#25) is never used in SimpleDAO (sample.sol#8-291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

SimpleDAO.MinSum (sample.sol#93) should be constant 
SimpleDAO.e (sample.sol#13) should be constant 
SimpleDAO.f (sample.sol#18) should be constant 
SimpleDAO.intitalized (sample.sol#25) should be constant 
SimpleDAO.k (sample.sol#19) should be constant 
SimpleDAO.m (sample.sol#15) should be constant 
SimpleDAO.n (sample.sol#16) should be constant 
SimpleDAO.w (sample.sol#23) should be constant 
SimpleDAO.x (sample.sol#22) should be constant 
SimpleDAO.y (sample.sol#21) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
sample.sol analyzed (1 contracts with 94 detectors), 134 result(s) found

real	0m5.072s
user	0m3.894s
sys	0m0.739s
