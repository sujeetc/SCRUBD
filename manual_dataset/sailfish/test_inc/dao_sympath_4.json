{
    "file_name": "dao_symex_path_4.json",
    "from_function": "buggy_require",
    "to_function": "non_buggy_single_statement",
    "bug_type": "dao",
    "src_node": "\"BlockID: 99\nCall context: \nNone\nENTRY_POINT None\"",
    "dest_node": [
        "\"BlockID: 111\nCall context: \nNone\nDESTINATION\""
    ],
    "executable_instructions": 46,
    "state_variable": "a",
    "error": "",
    "result": "SAT",
    "execution_details": "# using file \/ethereum-security\/manual_dataset\/sailfish\/test_inc\/dao_symex_path_4.json\n# attack type: range\n# solver type: z3\n# block execution bound: 10\n# verbose: #f\n# debug: #f\n# building structs\n# building global scope\n  > loading global blocks\n    > adding global block: 0xd@__GLOBAL__\n    > adding global block: 0xe@__GLOBAL__\n    > adding global block: 0xf@__GLOBAL__\n    > adding global block: 0x19@__GLOBAL__\n    > adding global block: 0x1a@__GLOBAL__\n    > adding global block: 0x1b@__GLOBAL__\n    > adding global block: 0x25@__GLOBAL__\n    > adding global block: 0x26@__GLOBAL__\n    > adding global block: 0x27@__GLOBAL__\n    > adding global block: 0x31@__GLOBAL__\n    > adding global block: 0x32@__GLOBAL__\n    > adding global block: 0x33@__GLOBAL__\n  > start adding and initializing global variables\n    > declaring global variable: block\n    > initializing global variable: block\n    > declaring global variable: msg\n    > initializing global variable: msg\n\n    > declaring global variable: now\n    > initializing global variable: now\n    > declaring global variable: tx\n    > initializing global variable: tx\n    > declaring global variable: this\n    > initializing global variable: this\n\n    > declaring global variable: msg_sender\n    > initializing global variable: msg_sender\n\n    > declaring global variable: addmod\n    > initializing global variable: addmod\n    > declaring global variable: mulmod\n    > initializing global variable: mulmod\n    > declaring global variable: keccak\n    > initializing global variable: keccak\n    > declaring global variable: sha256\n    > initializing global variable: sha256\n    > declaring global variable: sha3\n    > initializing global variable: sha3\n    > declaring global variable: ripemd160\n    > initializing global variable: ripemd160\n    > declaring global variable: ecrecover\n    > initializing global variable: ecrecover\n    > declaring global variable: blockhash\n    > initializing global variable: blockhash\n    > declaring global variable: a\n    > initializing global variable: a\n    > declaring global variable: b\n    > initializing global variable: b\n    > declaring global variable: tool_fail\n    > initializing global variable: tool_fail\n# building ranges\n  > start adding range variables\n    > adding: a -> (0x2@__RANGE__ 0x3@__RANGE__ 0x4@__RANGE__ 0x5@__RANGE__ 0x6@__RANGE__ 0x7@__RANGE__)\n    > adding: b -> (0x2@__RANGE__ 0x8@__RANGE__ 0x9@__RANGE__ 0xa@__RANGE__ 0xb@__RANGE__ 0xc@__RANGE__)\n  > range entry addresses: (0x8@__RANGE__ 0x2@__RANGE__ 0x6@__RANGE__ 0x3@__RANGE__ 0x5@__RANGE__ 0x7@__RANGE__ 0x4@__RANGE__ 0x9@__RANGE__ 0xa@__RANGE__ 0xc@__RANGE__ 0xb@__RANGE__)\n  > loading range blocks\n    > adding range block: 0x1@__RANGE__\n    > adding range block: 0x2@__RANGE__\n    > adding range block: 0x3@__RANGE__\n    > adding range block: 0x4@__RANGE__\n    > adding range block: 0x5@__RANGE__\n    > adding range block: 0x7@__RANGE__\n    > adding range block: 0x8@__RANGE__\n    > adding range block: 0x9@__RANGE__\n    > adding range block: 0xa@__RANGE__\n    > adding range block: 0xb@__RANGE__\n    > adding range block: 0xc@__RANGE__\n# building normal scopes\n  > root addr: 0x34\n  > dest addrs: (0x3b)\n  > loading normal blocks\n    > adding normal block: 0x34\n    > adding normal block: 0x35\n    > adding normal block: 0x36\n    > adding normal block: 0x37\n    > adding normal block: 0x38\n    > adding normal block: 0x38_r0\n    > adding normal block: 0x39\n    > adding normal block: 0x39_r0\n    > adding normal block: 0x3a\n    > adding normal block: 0x3a_r0\n    > adding normal block: 0x3b\n    > adding normal block: 0x3c\n    > adding normal block: 0xRequireTrap\n# start interpretation of normal blocks...\n\n# asserts size: 3\n# using solver: #<z3>\n# result: #t\n"
}