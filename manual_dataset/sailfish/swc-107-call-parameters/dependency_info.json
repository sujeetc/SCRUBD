{
    "swc-107-call-parameters.sol": [
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 229\nFunction: non_reentrant\nNode: \nIF d == 0\nIRS: \nCONDITION TMP_0\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 231\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_reentrant",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "non_reentrant",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 2\nFunction: non_reentrant\nNode: \nIF d == 0\nIRS: \nCONDITION TMP_0\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 237\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 241\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 237\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 241\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 237\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 241\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 239\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 242\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 243\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 245\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 243\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 243\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 243\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 239\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 241\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 242\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 245\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 82\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = m - 10\nIRS: \nm := TMP_68\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 85\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_71\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_73\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "b"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_2",
                "withdraw_call_2"
            ],
            "from_function": "withdraw_call_2",
            "to_function": "withdraw_call_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 247\nFunction: withdraw_call_2\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + e)())\nIRS: \nTMP_16(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_14 \"",
                        "\"BlockID: 22\nFunction: withdraw_call_2\nNode: \nEXPRESSION e = e + 10\nIRS: \ne := TMP_18\""
                    ],
                    "state_variable": "e"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_2",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 91\nFunction: buggy_multi_dep\nNode: \nIF e > 10\nIRS: \nCONDITION TMP_80\"",
                        "\"BlockID: 22\nFunction: withdraw_call_2\nNode: \nEXPRESSION e = e + 10\nIRS: \ne := TMP_18\""
                    ],
                    "state_variable": "e"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: withdraw_call\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_5\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_2"
            ],
            "from_function": "withdraw_call_2",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 20\nFunction: withdraw_call_2\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + e)())\nIRS: \nTMP_16(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_14 \"",
                        "\"BlockID: 31\nFunction: withdraw_call_3\nNode: \nEXPRESSION e = e + 10\nIRS: \ne := TMP_28\""
                    ],
                    "state_variable": "e"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 251\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 251\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 251\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 252\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 254\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 255\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 255\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 255\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 259\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 261\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 91\nFunction: buggy_multi_dep\nNode: \nIF e > 10\nIRS: \nCONDITION TMP_80\"",
                        "\"BlockID: 31\nFunction: withdraw_call_3\nNode: \nEXPRESSION e = e + 10\nIRS: \ne := TMP_28\""
                    ],
                    "state_variable": "e"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 79\nFunction: buggy_multi_dep\nNode: \nEXPRESSION b = z\nIRS: \nb := z\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 82\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = m - 10\nIRS: \nm := TMP_68\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 85\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_71\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_73\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 174\nFunction: withdraw_while_loop\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_133\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: withdraw_call\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_5\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_2"
            ],
            "from_function": "withdraw_call_2",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 20\nFunction: withdraw_call_2\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + e)())\nIRS: \nTMP_16(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_14 \"",
                        "\"BlockID: 45\nFunction: withdraw_call_3z\nNode: \nEXPRESSION e = e + 10\nIRS: \ne := TMP_41\""
                    ],
                    "state_variable": "e"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 264\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 264\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 264\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 265\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 267\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 269\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 269\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 269\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 273\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 275\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 91\nFunction: buggy_multi_dep\nNode: \nIF e > 10\nIRS: \nCONDITION TMP_80\"",
                        "\"BlockID: 45\nFunction: withdraw_call_3z\nNode: \nEXPRESSION e = e + 10\nIRS: \ne := TMP_41\""
                    ],
                    "state_variable": "e"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 79\nFunction: buggy_multi_dep\nNode: \nEXPRESSION b = z\nIRS: \nb := z\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 82\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = m - 10\nIRS: \nm := TMP_68\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 85\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_71\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_73\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 174\nFunction: withdraw_while_loop\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_133\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_3z",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call_3z",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 278\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 280\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 281\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 282\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_if",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call_if",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 288\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 290\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 292\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 293\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 294\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_ifz",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call_ifz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_multi_dep",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "buggy_multi_dep",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 312\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_71\"",
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\""
                    ],
                    "state_variable": "x"
                },
                {
                    "path": [
                        "\"BlockID: 326\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\""
                    ],
                    "state_variable": "x"
                },
                {
                    "path": [
                        "\"BlockID: 333\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_73\"",
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\""
                    ],
                    "state_variable": "x"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_multi_dep",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "buggy_multi_dep",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\""
                    ],
                    "state_variable": "x"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 2\nFunction: non_reentrant\nNode: \nIF d == 0\nIRS: \nCONDITION TMP_0\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 339\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 341\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 344\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_require_1",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "buggy_require_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 347\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 348\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 349\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 351\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 352\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "test"
            ],
            "from_function": "test",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_1",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "non_buggy_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "test"
            ],
            "from_function": "test",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 356\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 357\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "test",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "test",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "test"
            ],
            "from_function": "test",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 361\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 362\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 363\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 365\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 366\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzz",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "testzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 79\nFunction: buggy_multi_dep\nNode: \nEXPRESSION b = z\nIRS: \nb := z\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 82\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = m - 10\nIRS: \nm := TMP_68\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 85\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_71\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_73\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "test"
            ],
            "from_function": "test",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 373\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 375\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 373\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 375\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 370\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 370\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 371\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 371\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 374\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 374\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 377\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 377\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testz",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "testz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 79\nFunction: buggy_multi_dep\nNode: \nEXPRESSION b = z\nIRS: \nb := z\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 82\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = m - 10\nIRS: \nm := TMP_68\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 85\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_71\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 106\nFunction: buggy_multi_dep\nNode: \nIF x > 10\nIRS: \nCONDITION TMP_73\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 80\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = m\nIRS: \nc := m\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "test"
            ],
            "from_function": "test",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 379\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 390\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 379\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 390\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 379\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 390\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 380\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 381\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 383\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 384\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 387\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 388\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 388\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 386\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 388\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 379\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 379\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 380\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 380\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 381\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 381\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 383\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 383\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 384\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 384\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 387\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 387\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 390\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 390\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "z"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "testzzz",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "testzzz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "test"
            ],
            "from_function": "test",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 392\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 393\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 394\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 396\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 397\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "buggy_wbc_1",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "buggy_wbc_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: withdraw_call\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_5\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 401\nFunction: withdraw_while_loop\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_133\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 402\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_while_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 203\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_2",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_while_loop_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 183\nFunction: withdraw_while_loop_2\nNode: \nEXPRESSION a --\nIRS: \na = a - 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 9\nFunction: withdraw_call\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_5\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 174\nFunction: withdraw_while_loop\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_133\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loop_3",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_while_loop_3",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 188\nFunction: withdraw_while_loop_3\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_146\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: withdraw_call\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_5\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 174\nFunction: withdraw_while_loop\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_133\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 422\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 421\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_loopz",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_while_loopz",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: non_reentrant\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(a)())\nIRS: \nTMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:a \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 12\nFunction: withdraw_call\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount + a)())\nIRS: \nTMP_9(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:TMP_7 \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_call\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_12\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 18\nFunction: withdraw_call\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_13\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 26\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_21\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 30\nFunction: withdraw_call_3\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_27\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 32\nFunction: withdraw_call_3\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_29\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 34\nFunction: withdraw_call_3\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_30\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 39\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = d + 5\nIRS: \nc := TMP_33\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 41\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_38\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 44\nFunction: withdraw_call_3z\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_40\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 46\nFunction: withdraw_call_3z\nNode: \nEXPRESSION z = z + 45\nIRS: \nz := TMP_42\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 48\nFunction: withdraw_call_3z\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_43\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 51\nFunction: withdraw_call_if\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_44\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 53\nFunction: withdraw_call_if\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_46\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 61\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_52\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 63\nFunction: withdraw_call_ifz\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_54\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 65\nFunction: withdraw_call_ifz\nNode: \nIF b < 10\nIRS: \nCONDITION TMP_56\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 73\nFunction: withdraw_call_else\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_62\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 86\nFunction: buggy_multi_dep\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_75\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 88\nFunction: buggy_multi_dep\nNode: \nEXPRESSION z = z + 10\nIRS: \nz := TMP_77\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 89\nFunction: buggy_multi_dep\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_78\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 92\nFunction: buggy_multi_dep\nNode: \nEXPRESSION c = c + 10\nIRS: \nc := TMP_81\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 99\nFunction: buggy_multi_dep\nNode: \nEXPRESSION m = x - 10\nIRS: \nm := TMP_84\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 100\nFunction: buggy_multi_dep\nNode: \nNEW VARIABLE success = msg.sender.call.value(b)()\nIRS: \nTMP_86(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 104\nFunction: buggy_multi_dep\nNode: \nEXPRESSION x = x - 10\nIRS: \nx := TMP_89\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 111\nFunction: buggy_require_1\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_90\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 112\nFunction: buggy_require_1\nNode: \nIF d > 10\nIRS: \nCONDITION TMP_91\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 114\nFunction: buggy_require_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_94(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 117\nFunction: buggy_require_1\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_92\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 120\nFunction: non_buggy_1\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_97\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 124\nFunction: non_buggy_1\nNode: \nEXPRESSION b = d + 10\nIRS: \nb := TMP_100\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 125\nFunction: non_buggy_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_102(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 129\nFunction: test\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 130\nFunction: test\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_106(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 134\nFunction: testzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 135\nFunction: testzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_108\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 136\nFunction: testzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_109\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 138\nFunction: testzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 139\nFunction: testzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_111(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 143\nFunction: testz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 144\nFunction: testz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_114(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 150\nFunction: testz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 152\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 153\nFunction: testzzz\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_118\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 154\nFunction: testzzz\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_119\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 156\nFunction: testzzz\nNode: \nEXPRESSION b = a\nIRS: \nb := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 157\nFunction: testzzz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_121(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 163\nFunction: testzzz\nNode: \nEXPRESSION z = a\nIRS: \nz := a\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 165\nFunction: buggy_wbc_1\nNode: \nEXPRESSION z = a + 10\nIRS: \nz := TMP_125\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 166\nFunction: buggy_wbc_1\nNode: \nIF z > 10\nIRS: \nCONDITION TMP_126\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 167\nFunction: buggy_wbc_1\nNode: \nEXPRESSION b = b + 10\nIRS: \nb := TMP_127\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 169\nFunction: buggy_wbc_1\nNode: \nEXPRESSION x = b + x\nIRS: \nx := TMP_128\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 170\nFunction: buggy_wbc_1\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(x)())\nIRS: \nTMP_130(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:x \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 176\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_135\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 178\nFunction: withdraw_while_loop\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_137(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 180\nFunction: withdraw_while_loop\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_139\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 192\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION b = a + 10\nIRS: \nb := TMP_150\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 193\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_151\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 196\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = d - 10\nIRS: \nc := TMP_154\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 198\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(b)())\nIRS: \nTMP_156(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:b \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 200\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION c = a + 10\nIRS: \nc := TMP_158\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 429\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 429\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 430\nFunction: withdraw_call_4\nNode: \nEXPRESSION c = d + 20\nIRS: \nc := TMP_160\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 431\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 208\nFunction: withdraw_call_5\nNode: \nIF a > 10\nIRS: \nCONDITION TMP_165\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 209\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 216\nFunction: withdraw_send\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_171\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 217\nFunction: withdraw_send\nNode: \nEXPRESSION require(bool)(msg.sender.send(amount + a))\nIRS: \nTMP_173 = SEND dest:msg.sender value:TMP_172\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 219\nFunction: withdraw_send\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_175\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_4",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call_4",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 223\nFunction: withdraw_transfer\nNode: \nIF a >= amount\nIRS: \nCONDITION TMP_176\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 224\nFunction: withdraw_transfer\nNode: \nEXPRESSION msg.sender.transfer(amount + a)\nIRS: \nTransfer dest:msg.sender value:TMP_177\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 226\nFunction: withdraw_transfer\nNode: \nEXPRESSION b = b - 10\nIRS: \nb := TMP_179\"",
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "non_reentrant"
            ],
            "from_function": "non_reentrant",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 3\nFunction: non_reentrant\nNode: \nEXPRESSION d = 1\nIRS: \nd := 1\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 6\nFunction: non_reentrant\nNode: \nEXPRESSION d = 0\nIRS: \nd := 0\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call"
            ],
            "from_function": "withdraw_call",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_call\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 9\nFunction: withdraw_call\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_5\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 10\nFunction: withdraw_call\nNode: \nEXPRESSION d = d + 5\nIRS: \nd := TMP_6\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                },
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_call\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_11\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_3"
            ],
            "from_function": "withdraw_call_3",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 24\nFunction: withdraw_call_3\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_19\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 25\nFunction: withdraw_call_3\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_20\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 27\nFunction: withdraw_call_3\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_24(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 28\nFunction: withdraw_call_3\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_26\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_3z"
            ],
            "from_function": "withdraw_call_3z",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 37\nFunction: withdraw_call_3z\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_31\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 38\nFunction: withdraw_call_3z\nNode: \nIF c > 5\nIRS: \nCONDITION TMP_32\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 40\nFunction: withdraw_call_3z\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(amount)())\nIRS: \nTMP_36(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 42\nFunction: withdraw_call_3z\nNode: \nEXPRESSION d = d - 5\nIRS: \nd := TMP_39\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_if"
            ],
            "from_function": "withdraw_call_if",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 52\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_45\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 58\nFunction: withdraw_call_if\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_51\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: withdraw_call_if\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_49(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 54\nFunction: withdraw_call_if\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_47\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_ifz"
            ],
            "from_function": "withdraw_call_ifz",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 62\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_53\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 64\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_55\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_61\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 67\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_59(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 66\nFunction: withdraw_call_ifz\nNode: \nEXPRESSION d = d - 10\nIRS: \nd := TMP_57\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_else"
            ],
            "from_function": "withdraw_call_else",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 74\nFunction: withdraw_call_else\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_63\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 75\nFunction: withdraw_call_else\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_65(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "buggy_multi_dep"
            ],
            "from_function": "buggy_multi_dep",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 93\nFunction: buggy_multi_dep\nNode: \nEXPRESSION a = a + 10\nIRS: \na := TMP_82\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 81\nFunction: buggy_multi_dep\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_67\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 87\nFunction: buggy_multi_dep\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_76\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "buggy_require_1"
            ],
            "from_function": "buggy_require_1",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 116\nFunction: buggy_require_1\nNode: \nEXPRESSION d = d + 10\nIRS: \nd := TMP_96\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "non_buggy_1"
            ],
            "from_function": "non_buggy_1",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 127\nFunction: non_buggy_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_104\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 121\nFunction: non_buggy_1\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_98\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 122\nFunction: non_buggy_1\nNode: \nEXPRESSION d = b - 10\nIRS: \nd := TMP_99\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "test"
            ],
            "from_function": "test",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 132\nFunction: test\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "testzz"
            ],
            "from_function": "testzz",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 141\nFunction: testzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "testz"
            ],
            "from_function": "testz",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 146\nFunction: testz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 148\nFunction: testz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_117\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 147\nFunction: testz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_116\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "testzzz"
            ],
            "from_function": "testzzz",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 159\nFunction: testzzz\nNode: \nEXPRESSION a = a\nIRS: \na := a\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 161\nFunction: testzzz\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_124\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 160\nFunction: testzzz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_123\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "buggy_wbc_1"
            ],
            "from_function": "buggy_wbc_1",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 172\nFunction: buggy_wbc_1\nNode: \nEXPRESSION a = a - 1\nIRS: \na := TMP_132\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_while_loop"
            ],
            "from_function": "withdraw_while_loop",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 175\nFunction: withdraw_while_loop\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_134\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 174\nFunction: withdraw_while_loop\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_133\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_while_loopz"
            ],
            "from_function": "withdraw_while_loopz",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 195\nFunction: withdraw_while_loopz\nNode: \nEXPRESSION a = a + 20\nIRS: \na := TMP_153\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 194\nFunction: withdraw_while_loopz\nNode: \nIF c > 10\nIRS: \nCONDITION TMP_152\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_4"
            ],
            "from_function": "withdraw_call_4",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 206\nFunction: withdraw_call_4\nNode: \nEXPRESSION a = d + 10\nIRS: \na := TMP_164\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 204\nFunction: withdraw_call_4\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_162(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 202\nFunction: withdraw_call_4\nNode: \nEXPRESSION d = a + 10\nIRS: \nd := TMP_159\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "d"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_call_5"
            ],
            "from_function": "withdraw_call_5",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 436\nFunction: withdraw_call_5\nNode: \nEXPRESSION require(bool)(msg.sender.call.value(c)())\nIRS: \nTMP_167(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:c \"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_send"
            ],
            "from_function": "withdraw_send",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 221\nFunction: withdraw_send\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_call_5",
                "withdraw_transfer"
            ],
            "from_function": "withdraw_transfer",
            "to_function": "withdraw_call_5",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 211\nFunction: withdraw_call_5\nNode: \nIF a <= 10\nIRS: \nCONDITION TMP_169\""
                    ],
                    "state_variable": "a"
                },
                {
                    "path": [
                        "\"BlockID: 227\nFunction: withdraw_transfer\nNode: \nEXPRESSION a -= amount\nIRS: \na = a - amount\"",
                        "\"BlockID: 212\nFunction: withdraw_call_5\nNode: \nEXPRESSION c = d + 10\nIRS: \nc := TMP_170\""
                    ],
                    "state_variable": "a"
                }
            ]
        }
    ]
}