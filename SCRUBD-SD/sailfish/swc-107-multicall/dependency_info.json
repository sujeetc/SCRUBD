{
    "swc-107-multicall.sol": [
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_for_loop",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "withdraw_for_loop",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_for_loop_1\nNode: \nIF_LOOP a > 10\nIRS: \nCONDITION TMP_11\"",
                        "\"BlockID: 11\nFunction: withdraw_for_loop\nNode: \nEXPRESSION a ++\nIRS: \na = a + 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_for_loop_1",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "withdraw_for_loop_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 70\nFunction: withdraw_for_loop_1\nNode: \nIF_LOOP a > 10\nIRS: \nCONDITION TMP_11\"",
                        "\"BlockID: 19\nFunction: withdraw_for_loop_1\nNode: \nEXPRESSION a ++\nIRS: \na = a + 1\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_1",
                "withdraw_multi_call"
            ],
            "from_function": "withdraw_multi_call",
            "to_function": "withdraw_while_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 2\nFunction: withdraw_multi_call\nNode: \nEXPRESSION require(bool)(a1.call.value(c)())\nIRS: \nTMP_1(bool) = LOW_LEVEL_CALL, dest:a1, function:call, arguments:[] value:c \"",
                        "\"BlockID: 22\nFunction: withdraw_while_1\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_20\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: withdraw_multi_call\nNode: \nEXPRESSION require(bool)(a2.call.value(c)())\nIRS: \nTMP_4(bool) = LOW_LEVEL_CALL, dest:a2, function:call, arguments:[] value:c \"",
                        "\"BlockID: 22\nFunction: withdraw_while_1\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_20\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_1",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "withdraw_while_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_for_loop_1\nNode: \nEXPRESSION require(bool)(addr[a].call.value(c)())\nIRS: \nTMP_13(bool) = LOW_LEVEL_CALL, dest:REF_7, function:call, arguments:[] value:c \"",
                        "\"BlockID: 22\nFunction: withdraw_while_1\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_20\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_for_loop_1\nNode: \nEXPRESSION require(bool)(a2.call.value(c)())\nIRS: \nTMP_17(bool) = LOW_LEVEL_CALL, dest:a2, function:call, arguments:[] value:c \"",
                        "\"BlockID: 22\nFunction: withdraw_while_1\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_20\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_2",
                "withdraw_multi_call"
            ],
            "from_function": "withdraw_multi_call",
            "to_function": "withdraw_while_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 2\nFunction: withdraw_multi_call\nNode: \nEXPRESSION require(bool)(a1.call.value(c)())\nIRS: \nTMP_1(bool) = LOW_LEVEL_CALL, dest:a1, function:call, arguments:[] value:c \"",
                        "\"BlockID: 27\nFunction: withdraw_while_2\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_25\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 4\nFunction: withdraw_multi_call\nNode: \nEXPRESSION require(bool)(a2.call.value(c)())\nIRS: \nTMP_4(bool) = LOW_LEVEL_CALL, dest:a2, function:call, arguments:[] value:c \"",
                        "\"BlockID: 27\nFunction: withdraw_while_2\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_25\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_while_2",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "withdraw_while_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 15\nFunction: withdraw_for_loop_1\nNode: \nEXPRESSION require(bool)(addr[a].call.value(c)())\nIRS: \nTMP_13(bool) = LOW_LEVEL_CALL, dest:REF_7, function:call, arguments:[] value:c \"",
                        "\"BlockID: 27\nFunction: withdraw_while_2\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_25\""
                    ],
                    "state_variable": "c"
                },
                {
                    "path": [
                        "\"BlockID: 16\nFunction: withdraw_for_loop_1\nNode: \nEXPRESSION require(bool)(a2.call.value(c)())\nIRS: \nTMP_17(bool) = LOW_LEVEL_CALL, dest:a2, function:call, arguments:[] value:c \"",
                        "\"BlockID: 27\nFunction: withdraw_while_2\nNode: \nEXPRESSION c = c - 10\nIRS: \nc := TMP_25\""
                    ],
                    "state_variable": "c"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_while_1",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "non_buggy_while_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_for_loop_1\nNode: \nIF_LOOP a > 10\nIRS: \nCONDITION TMP_11\"",
                        "\"BlockID: 33\nFunction: non_buggy_while_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_31\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "non_buggy_do_while_1",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "non_buggy_do_while_1",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_for_loop_1\nNode: \nIF_LOOP a > 10\nIRS: \nCONDITION TMP_11\"",
                        "\"BlockID: 37\nFunction: non_buggy_do_while_1\nNode: \nEXPRESSION a = a - 10\nIRS: \na := TMP_36\""
                    ],
                    "state_variable": "a"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "withdraw_do_while_2",
                "withdraw_for_loop_1"
            ],
            "from_function": "withdraw_for_loop_1",
            "to_function": "withdraw_do_while_2",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 14\nFunction: withdraw_for_loop_1\nNode: \nIF_LOOP a > 10\nIRS: \nCONDITION TMP_11\"",
                        "\"BlockID: 42\nFunction: withdraw_do_while_2\nNode: \nEXPRESSION a = b - 10\nIRS: \na := TMP_41\""
                    ],
                    "state_variable": "a"
                }
            ]
        }
    ]
}