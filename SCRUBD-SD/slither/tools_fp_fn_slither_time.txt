'solc --version' running
'solc ./tools_fp_fn.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/manual_dataset' running
Compilation warnings/errors on ./tools_fp_fn.sol:
./tools_fp_fn.sol:14:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(c)("");
        ^--------------------------^
./tools_fp_fn.sol:41:9: Warning: Return value of low-level calls not used.
        a1.call.value(address(this).balance/2)("");
        ^----------------------------------------^
./tools_fp_fn.sol:42:9: Warning: Return value of low-level calls not used.
        a2.call.value(address(this).balance/2)("");
        ^----------------------------------------^
./tools_fp_fn.sol:46:9: Warning: Return value of low-level calls not used.
        a2.call.value(address(this).balance/2)("");
        ^----------------------------------------^
./tools_fp_fn.sol:57:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(b)("");
        ^--------------------------^
./tools_fp_fn.sol:13:9: Warning: Unused local variable.
        uint x = credit[msg.sender];
        ^----^
./tools_fp_fn.sol:45:36: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function non_buggy_single_call(address a1, address a2) public {
                                   ^--------^


SimpleDAO.buggy_multi_call(address,address) (tools_fp_fn.sol#39-43) sends eth to arbitrary user
	Dangerous calls:
	- a1.call.value(address(this).balance / 2)() (tools_fp_fn.sol#41)
	- a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#42)
SimpleDAO.non_buggy_single_call(address,address) (tools_fp_fn.sol#45-47) sends eth to arbitrary user
	Dangerous calls:
	- a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#46)
SimpleDAO.buggy_single_statement() (tools_fp_fn.sol#49-52) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && a -- < 10 (tools_fp_fn.sol#50)
SimpleDAO.buggy_indirect_control_dep() (tools_fp_fn.sol#54-59) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (tools_fp_fn.sol#57)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in SimpleDAO.buggy_indirect_control_dep() (tools_fp_fn.sol#54-59):
	External calls:
	- msg.sender.call.value(b)() (tools_fp_fn.sol#57)
	State variables written after the call(s):
	- a = a - 10 (tools_fp_fn.sol#58)
	SimpleDAO.a (tools_fp_fn.sol#6) can be used in cross function reentrancies:
	- SimpleDAO.a (tools_fp_fn.sol#6)
	- SimpleDAO.buggy_indirect_control_dep() (tools_fp_fn.sol#54-59)
	- SimpleDAO.buggy_single_statement() (tools_fp_fn.sol#49-52)
	- SimpleDAO.non_buggy_call() (tools_fp_fn.sol#31-37)
	- SimpleDAO.non_buggy_send() (tools_fp_fn.sol#23-29)
Reentrancy in SimpleDAO.buggy_withdrawBalance() (tools_fp_fn.sol#61-68):
	External calls:
	- ! (msg.sender.call.value(userBalance[msg.sender])()) (tools_fp_fn.sol#64)
	State variables written after the call(s):
	- userBalance[msg.sender] = 0 (tools_fp_fn.sol#67)
	SimpleDAO.userBalance (tools_fp_fn.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.buggy_withdrawBalance() (tools_fp_fn.sol#61-68)
	- SimpleDAO.non_buggy_call() (tools_fp_fn.sol#31-37)
	- SimpleDAO.non_buggy_send() (tools_fp_fn.sol#23-29)
Reentrancy in SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16):
	External calls:
	- msg.sender.call.value(c)() (tools_fp_fn.sol#14)
	State variables written after the call(s):
	- credit[msg.sender] -= amount (tools_fp_fn.sol#15)
	SimpleDAO.credit (tools_fp_fn.sol#5) can be used in cross function reentrancies:
	- SimpleDAO.credit (tools_fp_fn.sol#5)
	- SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16)
	- SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22)
Reentrancy in SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22):
	External calls:
	- require(bool)(msg.sender.call.value(c)() && credit[msg.sender] < 10) (tools_fp_fn.sol#20)
	State variables written after the call(s):
	- credit[msg.sender] -= amount (tools_fp_fn.sol#21)
	SimpleDAO.credit (tools_fp_fn.sol#5) can be used in cross function reentrancies:
	- SimpleDAO.credit (tools_fp_fn.sol#5)
	- SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16)
	- SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22)
Reentrancy in SimpleDAO.non_buggy_call() (tools_fp_fn.sol#31-37):
	External calls:
	- msg.sender.call.value(a)() && userBalance[msg.sender] > 0 (tools_fp_fn.sol#34)
	State variables written after the call(s):
	- userBalance[msg.sender] = 0 (tools_fp_fn.sol#35)
	SimpleDAO.userBalance (tools_fp_fn.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.buggy_withdrawBalance() (tools_fp_fn.sol#61-68)
	- SimpleDAO.non_buggy_call() (tools_fp_fn.sol#31-37)
	- SimpleDAO.non_buggy_send() (tools_fp_fn.sol#23-29)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

SimpleDAO.c (tools_fp_fn.sol#8) is never initialized. It is used in:
	- SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16)
	- SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22)
	- SimpleDAO.buggy_single_statement() (tools_fp_fn.sol#49-52)
SimpleDAO.amount (tools_fp_fn.sol#9) is never initialized. It is used in:
	- SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16)
	- SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16) ignores return value by msg.sender.call.value(c)() (tools_fp_fn.sol#14)
SimpleDAO.buggy_multi_call(address,address) (tools_fp_fn.sol#39-43) ignores return value by a1.call.value(address(this).balance / 2)() (tools_fp_fn.sol#41)
SimpleDAO.buggy_multi_call(address,address) (tools_fp_fn.sol#39-43) ignores return value by a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#42)
SimpleDAO.non_buggy_single_call(address,address) (tools_fp_fn.sol#45-47) ignores return value by a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#46)
SimpleDAO.buggy_indirect_control_dep() (tools_fp_fn.sol#54-59) ignores return value by msg.sender.call.value(b)() (tools_fp_fn.sol#57)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

SimpleDAO.non_buggy_single_call(address,address).a2 (tools_fp_fn.sol#45) lacks a zero-check on :
		- a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#46)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in SimpleDAO.buggy_single_statement() (tools_fp_fn.sol#49-52):
	External calls:
	- msg.sender.call.value(a)() && a -- < 10 (tools_fp_fn.sol#50)
	State variables written after the call(s):
	- b = c (tools_fp_fn.sol#51)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Version constraint 0.4.19 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData
	- NestedArrayFunctionCallDecoder.
It is used by:
	- 0.4.19 (tools_fp_fn.sol#2)
solc-0.4.19 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16):
	- msg.sender.call.value(c)() (tools_fp_fn.sol#14)
Low level call in SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22):
	- require(bool)(msg.sender.call.value(c)() && credit[msg.sender] < 10) (tools_fp_fn.sol#20)
Low level call in SimpleDAO.non_buggy_call() (tools_fp_fn.sol#31-37):
	- msg.sender.call.value(a)() && userBalance[msg.sender] > 0 (tools_fp_fn.sol#34)
Low level call in SimpleDAO.buggy_multi_call(address,address) (tools_fp_fn.sol#39-43):
	- a1.call.value(address(this).balance / 2)() (tools_fp_fn.sol#41)
	- a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#42)
Low level call in SimpleDAO.non_buggy_single_call(address,address) (tools_fp_fn.sol#45-47):
	- a2.call.value(address(this).balance / 2)() (tools_fp_fn.sol#46)
Low level call in SimpleDAO.buggy_single_statement() (tools_fp_fn.sol#49-52):
	- msg.sender.call.value(a)() && a -- < 10 (tools_fp_fn.sol#50)
Low level call in SimpleDAO.buggy_indirect_control_dep() (tools_fp_fn.sol#54-59):
	- msg.sender.call.value(b)() (tools_fp_fn.sol#57)
Low level call in SimpleDAO.buggy_withdrawBalance() (tools_fp_fn.sol#61-68):
	- ! (msg.sender.call.value(userBalance[msg.sender])()) (tools_fp_fn.sol#64)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function SimpleDAO.non_buggy_1() (tools_fp_fn.sol#12-16) is not in mixedCase
Function SimpleDAO.non_buggy_2() (tools_fp_fn.sol#17-22) is not in mixedCase
Function SimpleDAO.non_buggy_send() (tools_fp_fn.sol#23-29) is not in mixedCase
Function SimpleDAO.non_buggy_call() (tools_fp_fn.sol#31-37) is not in mixedCase
Function SimpleDAO.buggy_multi_call(address,address) (tools_fp_fn.sol#39-43) is not in mixedCase
Function SimpleDAO.non_buggy_single_call(address,address) (tools_fp_fn.sol#45-47) is not in mixedCase
Function SimpleDAO.buggy_single_statement() (tools_fp_fn.sol#49-52) is not in mixedCase
Function SimpleDAO.buggy_indirect_control_dep() (tools_fp_fn.sol#54-59) is not in mixedCase
Function SimpleDAO.buggy_withdrawBalance() (tools_fp_fn.sol#61-68) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in SimpleDAO.non_buggy_send() (tools_fp_fn.sol#23-29):
	External calls:
	- msg.sender.send(a) && userBalance[msg.sender] > 0 (tools_fp_fn.sol#26)
	State variables written after the call(s):
	- userBalance[msg.sender] = 0 (tools_fp_fn.sol#27)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

SimpleDAO.amount (tools_fp_fn.sol#9) should be constant 
SimpleDAO.c (tools_fp_fn.sol#8) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
./tools_fp_fn.sol analyzed (1 contracts with 94 detectors), 40 result(s) found

real	0m1.495s
user	0m1.365s
sys	0m0.134s
