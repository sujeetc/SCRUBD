'solc --version' running
'solc ./etherscan_solc.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/manual_dataset' running

Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507) performs a multiplication on the result of a division:
	- casino_edge = (winAmount / 100) * 4 (etherscan_solc.sol#1481)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reentrancy in usingOraclize.oraclizeAPI() (etherscan_solc.sol#258-266):
	External calls:
	- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
	- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	State variables written after the call(s):
	- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Dice.__callback(bytes32,string).winAmount (etherscan_solc.sol#1412) is a local variable never initialized
Dice.rollDice(uint256[]).oraclizeQueryId (etherscan_solc.sol#1352) is a local variable never initialized
usingOraclize.ba2cbor(bytes[]).buf (etherscan_solc.sol#1027) is a local variable never initialized
usingOraclize.stra2cbor(string[]).buf (etherscan_solc.sol#1015) is a local variable never initialized
Dice.__callback(bytes32,string).playerWins (etherscan_solc.sol#1410) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

CBOR.encodeType(Buffer.buffer,uint8,uint256) (etherscan_solc.sol#169-185) ignores return value by _buf.appendInt(_value,1) (etherscan_solc.sol#174)
CBOR.encodeType(Buffer.buffer,uint8,uint256) (etherscan_solc.sol#169-185) ignores return value by _buf.appendInt(_value,2) (etherscan_solc.sol#177)
CBOR.encodeType(Buffer.buffer,uint8,uint256) (etherscan_solc.sol#169-185) ignores return value by _buf.appendInt(_value,4) (etherscan_solc.sol#180)
CBOR.encodeType(Buffer.buffer,uint8,uint256) (etherscan_solc.sol#169-185) ignores return value by _buf.appendInt(_value,8) (etherscan_solc.sol#183)
CBOR.encodeBytes(Buffer.buffer,bytes) (etherscan_solc.sol#203-206) ignores return value by _buf.append(_value) (etherscan_solc.sol#205)
CBOR.encodeString(Buffer.buffer,string) (etherscan_solc.sol#208-211) ignores return value by _buf.append(bytes(_value)) (etherscan_solc.sol#210)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Reentrancy in Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507):
	External calls:
	- oraclize_cb = oraclize_cbAddress() (etherscan_solc.sol#1416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	State variables written after the call(s):
	- oraclizeStructs[myid].winningNumber = winningNumber (etherscan_solc.sol#1434)
Reentrancy in Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507):
	External calls:
	- oraclize_cb = oraclize_cbAddress() (etherscan_solc.sol#1416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- address(player).transfer(winAmount) (etherscan_solc.sol#1487)
	State variables written after the call(s):
	- oraclizeStructs[myid].winAmount = winAmount (etherscan_solc.sol#1489)
	- oraclizeStructs[myid].status = true (etherscan_solc.sol#1505)
Reentrancy in usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (etherscan_solc.sol#1037-1078):
	External calls:
	- sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash() (etherscan_solc.sol#1044)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	- queryId = oraclize_query(random,args,_customGasLimit) (etherscan_solc.sol#1063)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#630)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	External calls sending eth:
	- queryId = oraclize_query(random,args,_customGasLimit) (etherscan_solc.sol#1063)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	State variables written after the call(s):
	- queryId = oraclize_query(random,args,_customGasLimit) (etherscan_solc.sol#1063)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
	- oraclize_randomDS_setCommitment(queryId,keccak256(bytes)(abi.encodePacked(delay_bytes8_left,args[1],sha256(bytes)(args[0]),args[2]))) (etherscan_solc.sol#1076)
		- oraclize_randomDS_args[_queryId] = _commitment (etherscan_solc.sol#1081)
Reentrancy in usingOraclize.oraclize_query(string,string[1]) (etherscan_solc.sol#442-446):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#445)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#407)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	- oraclizeAPI() (etherscan_solc.sol#442)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#445)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#445)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1]) (etherscan_solc.sol#448-452):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#451)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	- oraclizeAPI() (etherscan_solc.sol#448)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#451)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#451)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[1],uint256) (etherscan_solc.sol#454-458):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#457)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#425)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	- oraclizeAPI() (etherscan_solc.sol#454)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#457)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#457)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[1],uint256) (etherscan_solc.sol#460-464):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#463)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#434)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	- oraclizeAPI() (etherscan_solc.sol#460)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#463)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#463)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[2]) (etherscan_solc.sol#466-471):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#470)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#407)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	- oraclizeAPI() (etherscan_solc.sol#466)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#470)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#470)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2]) (etherscan_solc.sol#473-478):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#477)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	- oraclizeAPI() (etherscan_solc.sol#473)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#477)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#477)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[2],uint256) (etherscan_solc.sol#480-485):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#484)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#425)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	- oraclizeAPI() (etherscan_solc.sol#480)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#484)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#484)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[2],uint256) (etherscan_solc.sol#487-492):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#491)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#434)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	- oraclizeAPI() (etherscan_solc.sol#487)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#491)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#491)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[3]) (etherscan_solc.sol#494-500):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#499)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#407)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	- oraclizeAPI() (etherscan_solc.sol#494)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#499)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#499)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3]) (etherscan_solc.sol#502-508):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#507)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	- oraclizeAPI() (etherscan_solc.sol#502)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#507)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#507)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[3],uint256) (etherscan_solc.sol#510-516):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#515)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#425)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	- oraclizeAPI() (etherscan_solc.sol#510)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#515)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#515)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[3],uint256) (etherscan_solc.sol#518-524):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#523)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#434)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	- oraclizeAPI() (etherscan_solc.sol#518)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#523)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#523)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[4]) (etherscan_solc.sol#526-533):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#532)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#407)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	- oraclizeAPI() (etherscan_solc.sol#526)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#532)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#532)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4]) (etherscan_solc.sol#535-542):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#541)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	- oraclizeAPI() (etherscan_solc.sol#535)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#541)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#541)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[4],uint256) (etherscan_solc.sol#544-551):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#550)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#425)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	- oraclizeAPI() (etherscan_solc.sol#544)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#550)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#550)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[4],uint256) (etherscan_solc.sol#553-560):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#559)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#434)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	- oraclizeAPI() (etherscan_solc.sol#553)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#559)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#559)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[5]) (etherscan_solc.sol#562-570):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#569)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#407)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	- oraclizeAPI() (etherscan_solc.sol#562)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#569)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#412)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#569)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5]) (etherscan_solc.sol#572-580):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#579)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	- oraclizeAPI() (etherscan_solc.sol#572)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#579)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#421)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#579)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,string[5],uint256) (etherscan_solc.sol#582-590):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#589)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#425)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	- oraclizeAPI() (etherscan_solc.sol#582)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#589)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#430)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#589)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,string[5],uint256) (etherscan_solc.sol#592-600):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#599)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#434)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	- oraclizeAPI() (etherscan_solc.sol#592)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#599)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#439)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#599)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1]) (etherscan_solc.sol#638-642):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#641)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#603)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	- oraclizeAPI() (etherscan_solc.sol#638)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#641)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#641)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1]) (etherscan_solc.sol#644-648):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#647)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#612)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	- oraclizeAPI() (etherscan_solc.sol#644)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#647)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#647)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (etherscan_solc.sol#650-654):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#653)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#621)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	- oraclizeAPI() (etherscan_solc.sol#650)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#653)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#653)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[1],uint256) (etherscan_solc.sol#656-660):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#659)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#630)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	- oraclizeAPI() (etherscan_solc.sol#656)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#659)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#659)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2]) (etherscan_solc.sol#662-667):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#666)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#603)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	- oraclizeAPI() (etherscan_solc.sol#662)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#666)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#666)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2]) (etherscan_solc.sol#669-674):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#673)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#612)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	- oraclizeAPI() (etherscan_solc.sol#669)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#673)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#673)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (etherscan_solc.sol#676-681):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#680)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#621)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	- oraclizeAPI() (etherscan_solc.sol#676)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#680)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#680)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[2],uint256) (etherscan_solc.sol#683-688):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#687)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#630)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	- oraclizeAPI() (etherscan_solc.sol#683)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#687)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#687)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3]) (etherscan_solc.sol#690-696):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#695)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#603)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	- oraclizeAPI() (etherscan_solc.sol#690)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#695)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#695)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3]) (etherscan_solc.sol#698-704):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#703)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#612)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	- oraclizeAPI() (etherscan_solc.sol#698)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#703)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#703)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (etherscan_solc.sol#706-712):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#711)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#621)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	- oraclizeAPI() (etherscan_solc.sol#706)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#711)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#711)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[3],uint256) (etherscan_solc.sol#714-720):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#719)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#630)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	- oraclizeAPI() (etherscan_solc.sol#714)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#719)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#719)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4]) (etherscan_solc.sol#722-729):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#728)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#603)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	- oraclizeAPI() (etherscan_solc.sol#722)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#728)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#728)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4]) (etherscan_solc.sol#731-738):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#737)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#612)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	- oraclizeAPI() (etherscan_solc.sol#731)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#737)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#737)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (etherscan_solc.sol#740-747):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#746)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#621)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	- oraclizeAPI() (etherscan_solc.sol#740)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#746)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#746)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[4],uint256) (etherscan_solc.sol#749-756):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#755)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#630)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	- oraclizeAPI() (etherscan_solc.sol#749)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#755)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#755)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5]) (etherscan_solc.sol#758-766):
	External calls:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#765)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#603)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	- oraclizeAPI() (etherscan_solc.sol#758)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#765)
		- oraclize.queryN.value(price)(0,_datasource,args) (etherscan_solc.sol#608)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs) (etherscan_solc.sol#765)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5]) (etherscan_solc.sol#768-776):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#775)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#612)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	- oraclizeAPI() (etherscan_solc.sol#768)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#775)
		- oraclize.queryN.value(price)(_timestamp,_datasource,args) (etherscan_solc.sol#617)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs) (etherscan_solc.sol#775)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (etherscan_solc.sol#778-786):
	External calls:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#785)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#621)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	- oraclizeAPI() (etherscan_solc.sol#778)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#785)
		- oraclize.queryN_withGasLimit.value(price)(_timestamp,_datasource,args,_gasLimit) (etherscan_solc.sol#626)
	State variables written after the call(s):
	- oraclize_query(_timestamp,_datasource,dynargs,_gasLimit) (etherscan_solc.sol#785)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in usingOraclize.oraclize_query(string,bytes[5],uint256) (etherscan_solc.sol#788-796):
	External calls:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#795)
		- price = oraclize.getPrice(_datasource,_gasLimit) (etherscan_solc.sol#630)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	- oraclizeAPI() (etherscan_solc.sol#788)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#795)
		- oraclize.queryN_withGasLimit.value(price)(0,_datasource,args,_gasLimit) (etherscan_solc.sol#635)
	State variables written after the call(s):
	- oraclize_query(_datasource,dynargs,_gasLimit) (etherscan_solc.sol#795)
		- oraclize_network_name = _network_name (etherscan_solc.sol#282)
Reentrancy in Dice.rollDice(uint256[]) (etherscan_solc.sol#1346-1400):
	External calls:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#343)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
	State variables written after the call(s):
	- oraclizeStructs[oraclizeQueryId].status = false (etherscan_solc.sol#1374)
	- oraclizeStructs[oraclizeQueryId].queryId = oraclizeQueryId (etherscan_solc.sol#1375)
	- oraclizeStructs[oraclizeQueryId].player = player (etherscan_solc.sol#1376)
	- oraclizeStructs[oraclizeQueryId].betNumbers = betNumbers (etherscan_solc.sol#1377)
	- oraclizeStructs[oraclizeQueryId].betAmount = betAmount (etherscan_solc.sol#1378)
	- oraclizedIndices.push(oraclizeQueryId) - 1 (etherscan_solc.sol#1382)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507):
	External calls:
	- oraclize_cb = oraclize_cbAddress() (etherscan_solc.sol#1416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	Event emitted after the call(s):
	- NumberGeneratorResponse(address(this),msg.sender,myid,result) (etherscan_solc.sol#1424)
	- PlayerWins(address(this),player,winningNumber,winAmount) (etherscan_solc.sol#1475)
	- WinningNumber(address(this),myid,betNumbers,winningNumber) (etherscan_solc.sol#1431)
Reentrancy in Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507):
	External calls:
	- oraclize_cb = oraclize_cbAddress() (etherscan_solc.sol#1416)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- address(player).transfer(winAmount) (etherscan_solc.sol#1487)
	Event emitted after the call(s):
	- DidNotWin(address(this),winningNumber,betNumbers) (etherscan_solc.sol#1499)
	- GameFinalized(address(this)) (etherscan_solc.sol#1501)
	- PlayerCashout(address(this),player,winningNumber,winAmount) (etherscan_solc.sol#1491)
Reentrancy in Dice.rollDice(uint256[]) (etherscan_solc.sol#1346-1400):
	External calls:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#343)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
	Event emitted after the call(s):
	- NumberGeneratorQuery(address(this),player,oraclizeQueryId) (etherscan_solc.sol#1384)
Reentrancy in Dice.rollDice(uint256[]) (etherscan_solc.sol#1346-1400):
	External calls:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- price = oraclize.getPrice(_datasource) (etherscan_solc.sol#343)
		- address(oraclize) != OAR.getAddress() (etherscan_solc.sol#262)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
		- oraclize = OraclizeI(OAR.getAddress()) (etherscan_solc.sol#263)
	External calls sending eth:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
	- msg.sender.transfer(msg.value) (etherscan_solc.sol#1391)
	Event emitted after the call(s):
	- AwaitingRandomOrgCallback(address(this),oraclizeQueryId) (etherscan_solc.sol#1396)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Buffer.init(Buffer.buffer,uint256) (etherscan_solc.sol#48-60) uses assembly
	- INLINE ASM (etherscan_solc.sol#54-60)
Buffer.append(Buffer.buffer,bytes) (etherscan_solc.sol#82-110) uses assembly
	- INLINE ASM (etherscan_solc.sol#89-96)
	- INLINE ASM (etherscan_solc.sol#97-100)
	- INLINE ASM (etherscan_solc.sol#104-109)
Buffer.append(Buffer.buffer,uint8) (etherscan_solc.sol#120-131) uses assembly
	- INLINE ASM (etherscan_solc.sol#124-131)
Buffer.appendInt(Buffer.buffer,uint256,uint256) (etherscan_solc.sol#141-154) uses assembly
	- INLINE ASM (etherscan_solc.sol#146-153)
usingOraclize.getCodeSize(address) (etherscan_solc.sol#807-811) uses assembly
	- INLINE ASM (etherscan_solc.sol#808-811)
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (etherscan_solc.sol#1037-1078) uses assembly
	- INLINE ASM (etherscan_solc.sol#1045-1056)
	- INLINE ASM (etherscan_solc.sol#1057-1060)
	- INLINE ASM (etherscan_solc.sol#1065-1076)
usingOraclize.verifySig(bytes32,bytes,bytes) (etherscan_solc.sol#1084-1106) uses assembly
	- INLINE ASM (etherscan_solc.sol#1095-1099)
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (etherscan_solc.sol#1198-1212) uses assembly
	- INLINE ASM (etherscan_solc.sol#1204-1208)
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (etherscan_solc.sol#1217-1238) uses assembly
	- INLINE ASM (etherscan_solc.sol#1228-1237)
usingOraclize.ecrecovery(bytes32,bytes) (etherscan_solc.sol#1242-1283) uses assembly
	- INLINE ASM (etherscan_solc.sol#1254-1276)
usingOraclize.safeMemoryCleaner() (etherscan_solc.sol#1285-1290) uses assembly
	- INLINE ASM (etherscan_solc.sol#1286-1290)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507) compares to a boolean constant:
	-playerWins == false (etherscan_solc.sol#1497)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507) has a high cyclomatic complexity (12).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

usingOraclize.ba2cbor(bytes[]) (etherscan_solc.sol#1025-1035) is never used and should be removed
usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256) (etherscan_solc.sol#1198-1212) is never used and should be removed
usingOraclize.ecrecovery(bytes32,bytes) (etherscan_solc.sol#1242-1283) is never used and should be removed
usingOraclize.indexOf(string,string) (etherscan_solc.sol#872-894) is never used and should be removed
usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256) (etherscan_solc.sol#1147-1156) is never used and should be removed
usingOraclize.oraclize_getNetworkName() (etherscan_solc.sol#285-287) is never used and should be removed
usingOraclize.oraclize_getPrice(string) (etherscan_solc.sol#334-336) is never used and should be removed
usingOraclize.oraclize_getPrice(string,uint256) (etherscan_solc.sol#338-340) is never used and should be removed
usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (etherscan_solc.sol#1037-1078) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1]) (etherscan_solc.sol#638-642) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[1],uint256) (etherscan_solc.sol#656-660) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2]) (etherscan_solc.sol#662-667) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[2],uint256) (etherscan_solc.sol#683-688) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3]) (etherscan_solc.sol#690-696) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[3],uint256) (etherscan_solc.sol#714-720) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4]) (etherscan_solc.sol#722-729) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[4],uint256) (etherscan_solc.sol#749-756) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5]) (etherscan_solc.sol#758-766) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[5],uint256) (etherscan_solc.sol#788-796) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[]) (etherscan_solc.sol#602-609) is never used and should be removed
usingOraclize.oraclize_query(string,bytes[],uint256) (etherscan_solc.sol#629-636) is never used and should be removed
usingOraclize.oraclize_query(string,string,string) (etherscan_solc.sol#374-380) is never used and should be removed
usingOraclize.oraclize_query(string,string,string,uint256) (etherscan_solc.sol#398-404) is never used and should be removed
usingOraclize.oraclize_query(string,string,uint256) (etherscan_solc.sol#366-372) is never used and should be removed
usingOraclize.oraclize_query(string,string[1]) (etherscan_solc.sol#442-446) is never used and should be removed
usingOraclize.oraclize_query(string,string[1],uint256) (etherscan_solc.sol#460-464) is never used and should be removed
usingOraclize.oraclize_query(string,string[2]) (etherscan_solc.sol#466-471) is never used and should be removed
usingOraclize.oraclize_query(string,string[2],uint256) (etherscan_solc.sol#487-492) is never used and should be removed
usingOraclize.oraclize_query(string,string[3]) (etherscan_solc.sol#494-500) is never used and should be removed
usingOraclize.oraclize_query(string,string[3],uint256) (etherscan_solc.sol#518-524) is never used and should be removed
usingOraclize.oraclize_query(string,string[4]) (etherscan_solc.sol#526-533) is never used and should be removed
usingOraclize.oraclize_query(string,string[4],uint256) (etherscan_solc.sol#553-560) is never used and should be removed
usingOraclize.oraclize_query(string,string[5]) (etherscan_solc.sol#562-570) is never used and should be removed
usingOraclize.oraclize_query(string,string[5],uint256) (etherscan_solc.sol#592-600) is never used and should be removed
usingOraclize.oraclize_query(string,string[]) (etherscan_solc.sol#406-413) is never used and should be removed
usingOraclize.oraclize_query(string,string[],uint256) (etherscan_solc.sol#433-440) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1]) (etherscan_solc.sol#644-648) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (etherscan_solc.sol#650-654) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2]) (etherscan_solc.sol#669-674) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (etherscan_solc.sol#676-681) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3]) (etherscan_solc.sol#698-704) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (etherscan_solc.sol#706-712) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4]) (etherscan_solc.sol#731-738) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (etherscan_solc.sol#740-747) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5]) (etherscan_solc.sol#768-776) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (etherscan_solc.sol#778-786) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[]) (etherscan_solc.sol#611-618) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (etherscan_solc.sol#620-627) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string) (etherscan_solc.sol#350-356) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string) (etherscan_solc.sol#382-388) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,string,uint256) (etherscan_solc.sol#390-396) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string,uint256) (etherscan_solc.sol#358-364) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1]) (etherscan_solc.sol#448-452) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[1],uint256) (etherscan_solc.sol#454-458) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2]) (etherscan_solc.sol#473-478) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[2],uint256) (etherscan_solc.sol#480-485) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3]) (etherscan_solc.sol#502-508) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[3],uint256) (etherscan_solc.sol#510-516) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4]) (etherscan_solc.sol#535-542) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[4],uint256) (etherscan_solc.sol#544-551) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5]) (etherscan_solc.sol#572-580) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[5],uint256) (etherscan_solc.sol#582-590) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[]) (etherscan_solc.sol#415-422) is never used and should be removed
usingOraclize.oraclize_query(uint256,string,string[],uint256) (etherscan_solc.sol#424-431) is never used and should be removed
usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (etherscan_solc.sol#817-819) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (etherscan_solc.sol#1158-1194) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (etherscan_solc.sol#1135-1145) is never used and should be removed
usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (etherscan_solc.sol#1108-1133) is never used and should be removed
usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (etherscan_solc.sol#1080-1082) is never used and should be removed
usingOraclize.oraclize_setCustomGasPrice(uint256) (etherscan_solc.sol#813-815) is never used and should be removed
usingOraclize.oraclize_setProof(bytes1) (etherscan_solc.sol#798-800) is never used and should be removed
usingOraclize.parseAddr(string) (etherscan_solc.sol#821-847) is never used and should be removed
usingOraclize.safeMemoryCleaner() (etherscan_solc.sol#1285-1290) is never used and should be removed
usingOraclize.safeParseInt(string) (etherscan_solc.sol#936-938) is never used and should be removed
usingOraclize.safeParseInt(string,uint256) (etherscan_solc.sol#940-963) is never used and should be removed
usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (etherscan_solc.sol#1217-1238) is never used and should be removed
usingOraclize.strCompare(string,string) (etherscan_solc.sol#849-870) is never used and should be removed
usingOraclize.strConcat(string,string) (etherscan_solc.sol#896-898) is never used and should be removed
usingOraclize.strConcat(string,string,string) (etherscan_solc.sol#900-902) is never used and should be removed
usingOraclize.strConcat(string,string,string,string) (etherscan_solc.sol#904-906) is never used and should be removed
usingOraclize.strConcat(string,string,string,string,string) (etherscan_solc.sol#908-934) is never used and should be removed
usingOraclize.stra2cbor(string[]) (etherscan_solc.sol#1013-1023) is never used and should be removed
usingOraclize.uint2str(uint256) (etherscan_solc.sol#994-1011) is never used and should be removed
usingOraclize.verifySig(bytes32,bytes,bytes) (etherscan_solc.sol#1084-1106) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Version constraint ^0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor
	- IncorrectEventSignatureInLibraries
	- ABIEncoderV2PackedStorage.
It is used by:
	- ^0.5.0 (etherscan_solc.sol#1)
solc-0.5.0 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Contract solcChecker (etherscan_solc.sol#11-13) is not in CapWords
Function OraclizeI.randomDS_getSessionPubKeyHash() (etherscan_solc.sol#22) is not in mixedCase
Function OraclizeI.query_withGasLimit(uint256,string,string,uint256) (etherscan_solc.sol#27) is not in mixedCase
Function OraclizeI.queryN_withGasLimit(uint256,string,bytes,uint256) (etherscan_solc.sol#28) is not in mixedCase
Function OraclizeI.query2_withGasLimit(uint256,string,string,string,uint256) (etherscan_solc.sol#29) is not in mixedCase
Struct Buffer.buffer (etherscan_solc.sol#43-46) is not in CapWords
Parameter Buffer.init(Buffer.buffer,uint256)._buf (etherscan_solc.sol#48) is not in mixedCase
Parameter Buffer.init(Buffer.buffer,uint256)._capacity (etherscan_solc.sol#48) is not in mixedCase
Parameter Buffer.resize(Buffer.buffer,uint256)._buf (etherscan_solc.sol#62) is not in mixedCase
Parameter Buffer.resize(Buffer.buffer,uint256)._capacity (etherscan_solc.sol#62) is not in mixedCase
Parameter Buffer.max(uint256,uint256)._a (etherscan_solc.sol#68) is not in mixedCase
Parameter Buffer.max(uint256,uint256)._b (etherscan_solc.sol#68) is not in mixedCase
Parameter Buffer.append(Buffer.buffer,bytes)._buf (etherscan_solc.sol#82) is not in mixedCase
Parameter Buffer.append(Buffer.buffer,bytes)._data (etherscan_solc.sol#82) is not in mixedCase
Parameter Buffer.append(Buffer.buffer,uint8)._buf (etherscan_solc.sol#120) is not in mixedCase
Parameter Buffer.appendInt(Buffer.buffer,uint256,uint256)._buf (etherscan_solc.sol#141) is not in mixedCase
Parameter Buffer.appendInt(Buffer.buffer,uint256,uint256)._len (etherscan_solc.sol#141) is not in mixedCase
Parameter CBOR.encodeType(Buffer.buffer,uint8,uint256)._buf (etherscan_solc.sol#169) is not in mixedCase
Parameter CBOR.encodeType(Buffer.buffer,uint8,uint256)._major (etherscan_solc.sol#169) is not in mixedCase
Parameter CBOR.encodeType(Buffer.buffer,uint8,uint256)._value (etherscan_solc.sol#169) is not in mixedCase
Parameter CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)._buf (etherscan_solc.sol#187) is not in mixedCase
Parameter CBOR.encodeIndefiniteLengthType(Buffer.buffer,uint8)._major (etherscan_solc.sol#187) is not in mixedCase
Parameter CBOR.encodeUInt(Buffer.buffer,uint256)._buf (etherscan_solc.sol#191) is not in mixedCase
Parameter CBOR.encodeUInt(Buffer.buffer,uint256)._value (etherscan_solc.sol#191) is not in mixedCase
Parameter CBOR.encodeInt(Buffer.buffer,int256)._buf (etherscan_solc.sol#195) is not in mixedCase
Parameter CBOR.encodeInt(Buffer.buffer,int256)._value (etherscan_solc.sol#195) is not in mixedCase
Parameter CBOR.encodeBytes(Buffer.buffer,bytes)._buf (etherscan_solc.sol#203) is not in mixedCase
Parameter CBOR.encodeBytes(Buffer.buffer,bytes)._value (etherscan_solc.sol#203) is not in mixedCase
Parameter CBOR.encodeString(Buffer.buffer,string)._buf (etherscan_solc.sol#208) is not in mixedCase
Parameter CBOR.encodeString(Buffer.buffer,string)._value (etherscan_solc.sol#208) is not in mixedCase
Parameter CBOR.startArray(Buffer.buffer)._buf (etherscan_solc.sol#213) is not in mixedCase
Parameter CBOR.startMap(Buffer.buffer)._buf (etherscan_solc.sol#217) is not in mixedCase
Parameter CBOR.endSequence(Buffer.buffer)._buf (etherscan_solc.sol#221) is not in mixedCase
Contract usingOraclize (etherscan_solc.sol#230-1291) is not in CapWords
Function usingOraclize.oraclize_setNetwork(uint8) (etherscan_solc.sol#276-279) is not in mixedCase
Function usingOraclize.oraclize_setNetworkName(string) (etherscan_solc.sol#281-283) is not in mixedCase
Parameter usingOraclize.oraclize_setNetworkName(string)._network_name (etherscan_solc.sol#281) is not in mixedCase
Function usingOraclize.oraclize_getNetworkName() (etherscan_solc.sol#285-287) is not in mixedCase
Function usingOraclize.oraclize_setNetwork() (etherscan_solc.sol#289-323) is not in mixedCase
Function usingOraclize.__callback(bytes32,string) (etherscan_solc.sol#325-327) is not in mixedCase
Parameter usingOraclize.__callback(bytes32,string)._myid (etherscan_solc.sol#325) is not in mixedCase
Parameter usingOraclize.__callback(bytes32,string)._result (etherscan_solc.sol#325) is not in mixedCase
Function usingOraclize.__callback(bytes32,string,bytes) (etherscan_solc.sol#329-332) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string) (etherscan_solc.sol#334-336) is not in mixedCase
Parameter usingOraclize.oraclize_getPrice(string)._datasource (etherscan_solc.sol#334) is not in mixedCase
Function usingOraclize.oraclize_getPrice(string,uint256) (etherscan_solc.sol#338-340) is not in mixedCase
Parameter usingOraclize.oraclize_getPrice(string,uint256)._datasource (etherscan_solc.sol#338) is not in mixedCase
Parameter usingOraclize.oraclize_getPrice(string,uint256)._gasLimit (etherscan_solc.sol#338) is not in mixedCase
Function usingOraclize.oraclize_query(string,string) (etherscan_solc.sol#342-348) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string)._datasource (etherscan_solc.sol#342) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string)._arg (etherscan_solc.sol#342) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string) (etherscan_solc.sol#350-356) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string)._timestamp (etherscan_solc.sol#350) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string)._datasource (etherscan_solc.sol#350) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string)._arg (etherscan_solc.sol#350) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,uint256) (etherscan_solc.sol#358-364) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,uint256)._timestamp (etherscan_solc.sol#358) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,uint256)._datasource (etherscan_solc.sol#358) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,uint256)._arg (etherscan_solc.sol#358) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,uint256)._gasLimit (etherscan_solc.sol#358) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,uint256) (etherscan_solc.sol#366-372) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,uint256)._datasource (etherscan_solc.sol#366) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,uint256)._arg (etherscan_solc.sol#366) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,uint256)._gasLimit (etherscan_solc.sol#366) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string) (etherscan_solc.sol#374-380) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string)._datasource (etherscan_solc.sol#374) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string)._arg1 (etherscan_solc.sol#374) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string)._arg2 (etherscan_solc.sol#374) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string) (etherscan_solc.sol#382-388) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string)._timestamp (etherscan_solc.sol#382) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string)._datasource (etherscan_solc.sol#382) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string)._arg1 (etherscan_solc.sol#382) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string)._arg2 (etherscan_solc.sol#382) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string,string,uint256) (etherscan_solc.sol#390-396) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string,uint256)._timestamp (etherscan_solc.sol#390) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string,uint256)._datasource (etherscan_solc.sol#390) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string,uint256)._arg1 (etherscan_solc.sol#390) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string,uint256)._arg2 (etherscan_solc.sol#390) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string,string,uint256)._gasLimit (etherscan_solc.sol#390) is not in mixedCase
Function usingOraclize.oraclize_query(string,string,string,uint256) (etherscan_solc.sol#398-404) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string,uint256)._datasource (etherscan_solc.sol#398) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string,uint256)._arg1 (etherscan_solc.sol#398) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string,uint256)._arg2 (etherscan_solc.sol#398) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string,string,uint256)._gasLimit (etherscan_solc.sol#398) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[]) (etherscan_solc.sol#406-413) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[])._datasource (etherscan_solc.sol#406) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[])._argN (etherscan_solc.sol#406) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[]) (etherscan_solc.sol#415-422) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[])._timestamp (etherscan_solc.sol#415) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[])._datasource (etherscan_solc.sol#415) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[])._argN (etherscan_solc.sol#415) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[],uint256) (etherscan_solc.sol#424-431) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[],uint256)._timestamp (etherscan_solc.sol#424) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[],uint256)._datasource (etherscan_solc.sol#424) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[],uint256)._argN (etherscan_solc.sol#424) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[],uint256)._gasLimit (etherscan_solc.sol#424) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[],uint256) (etherscan_solc.sol#433-440) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[],uint256)._datasource (etherscan_solc.sol#433) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[],uint256)._argN (etherscan_solc.sol#433) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[],uint256)._gasLimit (etherscan_solc.sol#433) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1]) (etherscan_solc.sol#442-446) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[1])._datasource (etherscan_solc.sol#442) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[1])._args (etherscan_solc.sol#442) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1]) (etherscan_solc.sol#448-452) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1])._timestamp (etherscan_solc.sol#448) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1])._datasource (etherscan_solc.sol#448) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1])._args (etherscan_solc.sol#448) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[1],uint256) (etherscan_solc.sol#454-458) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1],uint256)._timestamp (etherscan_solc.sol#454) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1],uint256)._datasource (etherscan_solc.sol#454) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1],uint256)._args (etherscan_solc.sol#454) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[1],uint256)._gasLimit (etherscan_solc.sol#454) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[1],uint256) (etherscan_solc.sol#460-464) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[1],uint256)._datasource (etherscan_solc.sol#460) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[1],uint256)._args (etherscan_solc.sol#460) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[1],uint256)._gasLimit (etherscan_solc.sol#460) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2]) (etherscan_solc.sol#466-471) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[2])._datasource (etherscan_solc.sol#466) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[2])._args (etherscan_solc.sol#466) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2]) (etherscan_solc.sol#473-478) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2])._timestamp (etherscan_solc.sol#473) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2])._datasource (etherscan_solc.sol#473) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2])._args (etherscan_solc.sol#473) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[2],uint256) (etherscan_solc.sol#480-485) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2],uint256)._timestamp (etherscan_solc.sol#480) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2],uint256)._datasource (etherscan_solc.sol#480) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2],uint256)._args (etherscan_solc.sol#480) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[2],uint256)._gasLimit (etherscan_solc.sol#480) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[2],uint256) (etherscan_solc.sol#487-492) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[2],uint256)._datasource (etherscan_solc.sol#487) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[2],uint256)._args (etherscan_solc.sol#487) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[2],uint256)._gasLimit (etherscan_solc.sol#487) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3]) (etherscan_solc.sol#494-500) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[3])._datasource (etherscan_solc.sol#494) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[3])._args (etherscan_solc.sol#494) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3]) (etherscan_solc.sol#502-508) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3])._timestamp (etherscan_solc.sol#502) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3])._datasource (etherscan_solc.sol#502) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3])._args (etherscan_solc.sol#502) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[3],uint256) (etherscan_solc.sol#510-516) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3],uint256)._timestamp (etherscan_solc.sol#510) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3],uint256)._datasource (etherscan_solc.sol#510) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3],uint256)._args (etherscan_solc.sol#510) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[3],uint256)._gasLimit (etherscan_solc.sol#510) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[3],uint256) (etherscan_solc.sol#518-524) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[3],uint256)._datasource (etherscan_solc.sol#518) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[3],uint256)._args (etherscan_solc.sol#518) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[3],uint256)._gasLimit (etherscan_solc.sol#518) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4]) (etherscan_solc.sol#526-533) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[4])._datasource (etherscan_solc.sol#526) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[4])._args (etherscan_solc.sol#526) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4]) (etherscan_solc.sol#535-542) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4])._timestamp (etherscan_solc.sol#535) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4])._datasource (etherscan_solc.sol#535) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4])._args (etherscan_solc.sol#535) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[4],uint256) (etherscan_solc.sol#544-551) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4],uint256)._timestamp (etherscan_solc.sol#544) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4],uint256)._datasource (etherscan_solc.sol#544) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4],uint256)._args (etherscan_solc.sol#544) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[4],uint256)._gasLimit (etherscan_solc.sol#544) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[4],uint256) (etherscan_solc.sol#553-560) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[4],uint256)._datasource (etherscan_solc.sol#553) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[4],uint256)._args (etherscan_solc.sol#553) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[4],uint256)._gasLimit (etherscan_solc.sol#553) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5]) (etherscan_solc.sol#562-570) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[5])._datasource (etherscan_solc.sol#562) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[5])._args (etherscan_solc.sol#562) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5]) (etherscan_solc.sol#572-580) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5])._timestamp (etherscan_solc.sol#572) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5])._datasource (etherscan_solc.sol#572) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5])._args (etherscan_solc.sol#572) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,string[5],uint256) (etherscan_solc.sol#582-590) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5],uint256)._timestamp (etherscan_solc.sol#582) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5],uint256)._datasource (etherscan_solc.sol#582) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5],uint256)._args (etherscan_solc.sol#582) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,string[5],uint256)._gasLimit (etherscan_solc.sol#582) is not in mixedCase
Function usingOraclize.oraclize_query(string,string[5],uint256) (etherscan_solc.sol#592-600) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[5],uint256)._datasource (etherscan_solc.sol#592) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[5],uint256)._args (etherscan_solc.sol#592) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,string[5],uint256)._gasLimit (etherscan_solc.sol#592) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[]) (etherscan_solc.sol#602-609) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[])._datasource (etherscan_solc.sol#602) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[])._argN (etherscan_solc.sol#602) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[]) (etherscan_solc.sol#611-618) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[])._timestamp (etherscan_solc.sol#611) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[])._datasource (etherscan_solc.sol#611) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[])._argN (etherscan_solc.sol#611) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[],uint256) (etherscan_solc.sol#620-627) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[],uint256)._timestamp (etherscan_solc.sol#620) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[],uint256)._datasource (etherscan_solc.sol#620) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[],uint256)._argN (etherscan_solc.sol#620) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[],uint256)._gasLimit (etherscan_solc.sol#620) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[],uint256) (etherscan_solc.sol#629-636) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[],uint256)._datasource (etherscan_solc.sol#629) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[],uint256)._argN (etherscan_solc.sol#629) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[],uint256)._gasLimit (etherscan_solc.sol#629) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1]) (etherscan_solc.sol#638-642) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[1])._datasource (etherscan_solc.sol#638) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[1])._args (etherscan_solc.sol#638) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1]) (etherscan_solc.sol#644-648) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1])._timestamp (etherscan_solc.sol#644) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1])._datasource (etherscan_solc.sol#644) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1])._args (etherscan_solc.sol#644) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[1],uint256) (etherscan_solc.sol#650-654) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1],uint256)._timestamp (etherscan_solc.sol#650) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1],uint256)._datasource (etherscan_solc.sol#650) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1],uint256)._args (etherscan_solc.sol#650) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[1],uint256)._gasLimit (etherscan_solc.sol#650) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[1],uint256) (etherscan_solc.sol#656-660) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[1],uint256)._datasource (etherscan_solc.sol#656) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[1],uint256)._args (etherscan_solc.sol#656) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[1],uint256)._gasLimit (etherscan_solc.sol#656) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2]) (etherscan_solc.sol#662-667) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[2])._datasource (etherscan_solc.sol#662) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[2])._args (etherscan_solc.sol#662) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2]) (etherscan_solc.sol#669-674) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2])._timestamp (etherscan_solc.sol#669) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2])._datasource (etherscan_solc.sol#669) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2])._args (etherscan_solc.sol#669) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[2],uint256) (etherscan_solc.sol#676-681) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2],uint256)._timestamp (etherscan_solc.sol#676) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2],uint256)._datasource (etherscan_solc.sol#676) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2],uint256)._args (etherscan_solc.sol#676) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[2],uint256)._gasLimit (etherscan_solc.sol#676) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[2],uint256) (etherscan_solc.sol#683-688) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[2],uint256)._datasource (etherscan_solc.sol#683) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[2],uint256)._args (etherscan_solc.sol#683) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[2],uint256)._gasLimit (etherscan_solc.sol#683) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3]) (etherscan_solc.sol#690-696) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[3])._datasource (etherscan_solc.sol#690) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[3])._args (etherscan_solc.sol#690) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3]) (etherscan_solc.sol#698-704) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3])._timestamp (etherscan_solc.sol#698) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3])._datasource (etherscan_solc.sol#698) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3])._args (etherscan_solc.sol#698) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[3],uint256) (etherscan_solc.sol#706-712) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)._timestamp (etherscan_solc.sol#706) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)._datasource (etherscan_solc.sol#706) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)._args (etherscan_solc.sol#706) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)._gasLimit (etherscan_solc.sol#706) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[3],uint256) (etherscan_solc.sol#714-720) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[3],uint256)._datasource (etherscan_solc.sol#714) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[3],uint256)._args (etherscan_solc.sol#714) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[3],uint256)._gasLimit (etherscan_solc.sol#714) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4]) (etherscan_solc.sol#722-729) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[4])._datasource (etherscan_solc.sol#722) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[4])._args (etherscan_solc.sol#722) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4]) (etherscan_solc.sol#731-738) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4])._timestamp (etherscan_solc.sol#731) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4])._datasource (etherscan_solc.sol#731) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4])._args (etherscan_solc.sol#731) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[4],uint256) (etherscan_solc.sol#740-747) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4],uint256)._timestamp (etherscan_solc.sol#740) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4],uint256)._datasource (etherscan_solc.sol#740) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4],uint256)._args (etherscan_solc.sol#740) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[4],uint256)._gasLimit (etherscan_solc.sol#740) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[4],uint256) (etherscan_solc.sol#749-756) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[4],uint256)._datasource (etherscan_solc.sol#749) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[4],uint256)._args (etherscan_solc.sol#749) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[4],uint256)._gasLimit (etherscan_solc.sol#749) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5]) (etherscan_solc.sol#758-766) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[5])._datasource (etherscan_solc.sol#758) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[5])._args (etherscan_solc.sol#758) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5]) (etherscan_solc.sol#768-776) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5])._timestamp (etherscan_solc.sol#768) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5])._datasource (etherscan_solc.sol#768) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5])._args (etherscan_solc.sol#768) is not in mixedCase
Function usingOraclize.oraclize_query(uint256,string,bytes[5],uint256) (etherscan_solc.sol#778-786) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5],uint256)._timestamp (etherscan_solc.sol#778) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5],uint256)._datasource (etherscan_solc.sol#778) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5],uint256)._args (etherscan_solc.sol#778) is not in mixedCase
Parameter usingOraclize.oraclize_query(uint256,string,bytes[5],uint256)._gasLimit (etherscan_solc.sol#778) is not in mixedCase
Function usingOraclize.oraclize_query(string,bytes[5],uint256) (etherscan_solc.sol#788-796) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[5],uint256)._datasource (etherscan_solc.sol#788) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[5],uint256)._args (etherscan_solc.sol#788) is not in mixedCase
Parameter usingOraclize.oraclize_query(string,bytes[5],uint256)._gasLimit (etherscan_solc.sol#788) is not in mixedCase
Function usingOraclize.oraclize_setProof(bytes1) (etherscan_solc.sol#798-800) is not in mixedCase
Parameter usingOraclize.oraclize_setProof(bytes1)._proofP (etherscan_solc.sol#798) is not in mixedCase
Function usingOraclize.oraclize_cbAddress() (etherscan_solc.sol#803-805) is not in mixedCase
Function usingOraclize.oraclize_setCustomGasPrice(uint256) (etherscan_solc.sol#813-815) is not in mixedCase
Parameter usingOraclize.oraclize_setCustomGasPrice(uint256)._gasPrice (etherscan_solc.sol#813) is not in mixedCase
Function usingOraclize.oraclize_randomDS_getSessionPubKeyHash() (etherscan_solc.sol#817-819) is not in mixedCase
Parameter usingOraclize.parseAddr(string)._a (etherscan_solc.sol#821) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._a (etherscan_solc.sol#849) is not in mixedCase
Parameter usingOraclize.strCompare(string,string)._b (etherscan_solc.sol#849) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._haystack (etherscan_solc.sol#872) is not in mixedCase
Parameter usingOraclize.indexOf(string,string)._needle (etherscan_solc.sol#872) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._a (etherscan_solc.sol#896) is not in mixedCase
Parameter usingOraclize.strConcat(string,string)._b (etherscan_solc.sol#896) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._a (etherscan_solc.sol#900) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._b (etherscan_solc.sol#900) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string)._c (etherscan_solc.sol#900) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._a (etherscan_solc.sol#904) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._b (etherscan_solc.sol#904) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._c (etherscan_solc.sol#904) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string)._d (etherscan_solc.sol#904) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._a (etherscan_solc.sol#908) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._b (etherscan_solc.sol#908) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._c (etherscan_solc.sol#908) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._d (etherscan_solc.sol#908) is not in mixedCase
Parameter usingOraclize.strConcat(string,string,string,string,string)._e (etherscan_solc.sol#908) is not in mixedCase
Parameter usingOraclize.safeParseInt(string)._a (etherscan_solc.sol#936) is not in mixedCase
Parameter usingOraclize.safeParseInt(string,uint256)._a (etherscan_solc.sol#940) is not in mixedCase
Parameter usingOraclize.safeParseInt(string,uint256)._b (etherscan_solc.sol#940) is not in mixedCase
Parameter usingOraclize.parseInt(string)._a (etherscan_solc.sol#965) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._a (etherscan_solc.sol#969) is not in mixedCase
Parameter usingOraclize.parseInt(string,uint256)._b (etherscan_solc.sol#969) is not in mixedCase
Parameter usingOraclize.uint2str(uint256)._i (etherscan_solc.sol#994) is not in mixedCase
Parameter usingOraclize.stra2cbor(string[])._arr (etherscan_solc.sol#1013) is not in mixedCase
Parameter usingOraclize.ba2cbor(bytes[])._arr (etherscan_solc.sol#1025) is not in mixedCase
Function usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256) (etherscan_solc.sol#1037-1078) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._delay (etherscan_solc.sol#1037) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._nbytes (etherscan_solc.sol#1037) is not in mixedCase
Parameter usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)._customGasLimit (etherscan_solc.sol#1037) is not in mixedCase
Function usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32) (etherscan_solc.sol#1080-1082) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)._queryId (etherscan_solc.sol#1080) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)._commitment (etherscan_solc.sol#1080) is not in mixedCase
Parameter usingOraclize.verifySig(bytes32,bytes,bytes)._tosignh (etherscan_solc.sol#1084) is not in mixedCase
Parameter usingOraclize.verifySig(bytes32,bytes,bytes)._dersig (etherscan_solc.sol#1084) is not in mixedCase
Parameter usingOraclize.verifySig(bytes32,bytes,bytes)._pubkey (etherscan_solc.sol#1084) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256) (etherscan_solc.sol#1108-1133) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)._proof (etherscan_solc.sol#1108) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)._sig2offset (etherscan_solc.sol#1108) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) (etherscan_solc.sol#1135-1145) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._queryId (etherscan_solc.sol#1135) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._result (etherscan_solc.sol#1135) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)._proof (etherscan_solc.sol#1135) is not in mixedCase
Parameter usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)._content (etherscan_solc.sol#1147) is not in mixedCase
Parameter usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)._prefix (etherscan_solc.sol#1147) is not in mixedCase
Parameter usingOraclize.matchBytes32Prefix(bytes32,bytes,uint256)._nRandomBytes (etherscan_solc.sol#1147) is not in mixedCase
Function usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) (etherscan_solc.sol#1158-1194) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)._proof (etherscan_solc.sol#1158) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)._queryId (etherscan_solc.sol#1158) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)._result (etherscan_solc.sol#1158) is not in mixedCase
Parameter usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)._contextName (etherscan_solc.sol#1158) is not in mixedCase
Parameter usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)._fromOffset (etherscan_solc.sol#1198) is not in mixedCase
Parameter usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)._length (etherscan_solc.sol#1198) is not in mixedCase
Parameter usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)._to (etherscan_solc.sol#1198) is not in mixedCase
Parameter usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)._toOffset (etherscan_solc.sol#1198) is not in mixedCase
Function usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32) (etherscan_solc.sol#1217-1238) is not in mixedCase
Parameter usingOraclize.ecrecovery(bytes32,bytes)._hash (etherscan_solc.sol#1242) is not in mixedCase
Parameter usingOraclize.ecrecovery(bytes32,bytes)._sig (etherscan_solc.sol#1242) is not in mixedCase
Variable usingOraclize.OAR (etherscan_solc.sol#235) is not in mixedCase
Constant usingOraclize.day (etherscan_solc.sol#237) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.week (etherscan_solc.sol#238) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.month (etherscan_solc.sol#239) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_NONE (etherscan_solc.sol#241) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Ledger (etherscan_solc.sol#242) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Native (etherscan_solc.sol#243) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofStorage_IPFS (etherscan_solc.sol#244) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_Android (etherscan_solc.sol#245) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.proofType_TLSNotary (etherscan_solc.sol#246) is not in UPPER_CASE_WITH_UNDERSCORES
Variable usingOraclize.oraclize_network_name (etherscan_solc.sol#248) is not in mixedCase
Constant usingOraclize.networkID_auto (etherscan_solc.sol#249) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_morden (etherscan_solc.sol#250) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_mainnet (etherscan_solc.sol#251) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_testnet (etherscan_solc.sol#252) is not in UPPER_CASE_WITH_UNDERSCORES
Constant usingOraclize.networkID_consensys (etherscan_solc.sol#253) is not in UPPER_CASE_WITH_UNDERSCORES
Variable usingOraclize.oraclize_randomDS_args (etherscan_solc.sol#255) is not in mixedCase
Variable usingOraclize.oraclize_randomDS_sessionKeysHashVerified (etherscan_solc.sol#256) is not in mixedCase
Modifier usingOraclize.oraclize_randomDS_proofVerify(bytes32,string,bytes) (etherscan_solc.sol#268-274) is not in mixedCase
Struct Dice.oraclizeCallback (etherscan_solc.sol#1308-1316) is not in CapWords
Function Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "_networkID (etherscan_solc.sol#278)" inusingOraclize (etherscan_solc.sol#230-1291)
Redundant expression "_myid (etherscan_solc.sol#331)" inusingOraclize (etherscan_solc.sol#230-1291)
Redundant expression "_result (etherscan_solc.sol#331)" inusingOraclize (etherscan_solc.sol#230-1291)
Redundant expression "_proof (etherscan_solc.sol#331)" inusingOraclize (etherscan_solc.sol#230-1291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507):
	External calls:
	- address(player).transfer(winAmount) (etherscan_solc.sol#1487)
	State variables written after the call(s):
	- oraclizeStructs[myid].winAmount = winAmount (etherscan_solc.sol#1489)
	- oraclizeStructs[myid].status = true (etherscan_solc.sol#1505)
	Event emitted after the call(s):
	- DidNotWin(address(this),winningNumber,betNumbers) (etherscan_solc.sol#1499)
	- GameFinalized(address(this)) (etherscan_solc.sol#1501)
	- PlayerCashout(address(this),player,winningNumber,winAmount) (etherscan_solc.sol#1491)
Reentrancy in Dice.rollDice(uint256[]) (etherscan_solc.sol#1346-1400):
	External calls:
	- msg.sender.transfer(msg.value) (etherscan_solc.sol#1391)
	External calls sending eth:
	- oraclizeQueryId = oraclize_query(URL,https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=8&format=plain) (etherscan_solc.sol#1370)
		- oraclize.query.value(price)(0,_datasource,_arg) (etherscan_solc.sol#347)
	- msg.sender.transfer(msg.value) (etherscan_solc.sol#1391)
	Event emitted after the call(s):
	- AwaitingRandomOrgCallback(address(this),oraclizeQueryId) (etherscan_solc.sol#1396)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

usingOraclize.oraclize_query(string,string) (etherscan_solc.sol#342-348) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#344)
usingOraclize.oraclize_query(uint256,string,string) (etherscan_solc.sol#350-356) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#352)
usingOraclize.oraclize_query(string,string,string) (etherscan_solc.sol#374-380) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#376)
usingOraclize.oraclize_query(uint256,string,string,string) (etherscan_solc.sol#382-388) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#384)
usingOraclize.oraclize_query(string,string[]) (etherscan_solc.sol#406-413) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#408)
usingOraclize.oraclize_query(uint256,string,string[]) (etherscan_solc.sol#415-422) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#417)
usingOraclize.oraclize_query(string,bytes[]) (etherscan_solc.sol#602-609) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#604)
usingOraclize.oraclize_query(uint256,string,bytes[]) (etherscan_solc.sol#611-618) uses literals with too many digits:
	- price > 1000000000000000000 + tx.gasprice * 200000 (etherscan_solc.sol#613)
Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507) uses literals with too many digits:
	- oraclize_fee = 4000000000000000 (etherscan_solc.sol#1482)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

usingOraclize.day (etherscan_solc.sol#237) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.week (etherscan_solc.sol#238) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.month (etherscan_solc.sol#239) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.proofType_NONE (etherscan_solc.sol#241) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.proofType_Ledger (etherscan_solc.sol#242) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.proofType_Native (etherscan_solc.sol#243) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.proofStorage_IPFS (etherscan_solc.sol#244) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.proofType_Android (etherscan_solc.sol#245) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.proofType_TLSNotary (etherscan_solc.sol#246) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.networkID_morden (etherscan_solc.sol#250) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.networkID_mainnet (etherscan_solc.sol#251) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.networkID_testnet (etherscan_solc.sol#252) is never used in Dice (etherscan_solc.sol#1300-1558)
usingOraclize.networkID_consensys (etherscan_solc.sol#253) is never used in Dice (etherscan_solc.sol#1300-1558)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

getPrice(string) should be declared external:
	- OraclizeI.getPrice(string) (etherscan_solc.sol#21)
Moreover, the following function parameters should change its data location:
_datasource location should be calldata
getPrice(string,uint256) should be declared external:
	- OraclizeI.getPrice(string,uint256) (etherscan_solc.sol#23)
Moreover, the following function parameters should change its data location:
_datasource location should be calldata
queryN(uint256,string,bytes) should be declared external:
	- OraclizeI.queryN(uint256,string,bytes) (etherscan_solc.sol#24)
Moreover, the following function parameters should change its data location:
_datasource location should be calldata
_argN location should be calldata
query2(uint256,string,string,string) should be declared external:
	- OraclizeI.query2(uint256,string,string,string) (etherscan_solc.sol#26)
Moreover, the following function parameters should change its data location:
_datasource location should be calldata
_arg1 location should be calldata
_arg2 location should be calldata
__callback(bytes32,string) should be declared external:
	- Dice.__callback(bytes32,string) (etherscan_solc.sol#1403-1507)
Moreover, the following function parameters should change its data location:
_result location should be calldata
	- usingOraclize.__callback(bytes32,string) (etherscan_solc.sol#325-327)
rollDice(uint256[]) should be declared external:
	- Dice.rollDice(uint256[]) (etherscan_solc.sol#1346-1400)
Moreover, the following function parameters should change its data location:
betNumbers location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
./etherscan_solc.sol analyzed (7 contracts with 94 detectors), 557 result(s) found

real	0m11.389s
user	0m11.177s
sys	0m0.213s
