'solc --version' running
'solc bug_cases.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/ethereum-security/manual_dataset' running
Compilation warnings/errors on bug_cases.sol:
bug_cases.sol:32:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:42:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:43:9: Warning: Use of the "var" keyword is deprecated.
        var bcc = Bcc[msg.sender];
        ^-----^
bug_cases.sol:115:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:134:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:148:13: Warning: Use of the "var" keyword is deprecated.
            var acc = Acc[msg.sender];
            ^-----^
bug_cases.sol:206:13: Warning: Use of the "var" keyword is deprecated.
            var acc = Acc[msg.sender];
            ^-----^
bug_cases.sol:240:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:248:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:263:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:407:9: Warning: Use of the "var" keyword is deprecated.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:27:17: Warning: Return value of low-level calls not used.
                msg.sender.call.value(a)();
                ^------------------------^
bug_cases.sol:37:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
bug_cases.sol:47:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(acc.balance)();
        ^----------------------------------^
bug_cases.sol:55:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(a)();
        ^------------------------^
bug_cases.sol:67:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(aaaa)();
        ^---------------------------^
bug_cases.sol:82:13: Warning: Return value of low-level calls not used.
            msg.sender.call.value(a)();
            ^------------------------^
bug_cases.sol:93:13: Warning: Return value of low-level calls not used.
            msg.sender.call.value(a)();
            ^------------------------^
bug_cases.sol:107:13: Warning: Return value of low-level calls not used.
            msg.sender.call.value(_am)();
            ^--------------------------^
bug_cases.sol:138:13: Warning: Return value of low-level calls not used.
            msg.sender.call.value(_am)();
            ^--------------------------^
bug_cases.sol:169:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(b)();
        ^------------------------^
bug_cases.sol:184:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(b)();
        ^------------------------^
bug_cases.sol:218:17: Warning: Return value of low-level calls not used.
                msg.sender.call.value(a)();
                ^------------------------^
bug_cases.sol:226:17: Warning: Return value of low-level calls not used.
                msg.sender.call.value(a)();
                ^------------------------^
bug_cases.sol:257:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(balances_re_ent8[msg.sender ])("");
        ^------------------------------------------------------^
bug_cases.sol:279:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(a)();
        ^------------------------^
bug_cases.sol:288:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(alocal + blocal + c)();
        ^------------------------------------------^
bug_cases.sol:301:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(alocal + blocal + c)();
        ^------------------------------------------^
bug_cases.sol:370:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(b)();
        ^------------------------^
bug_cases.sol:377:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(c)();
        ^------------------------^
bug_cases.sol:398:9: Warning: Return value of low-level calls not used.
        msg.sender.call.value(b)();
        ^------------------------^
bug_cases.sol:193:28: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        function test_call(uint _am) public // Non Buggy and Tool also says non Buggy
                           ^------^
bug_cases.sol:263:9: Warning: Unused local variable.
        var acc = Acc[msg.sender];
        ^-----^
bug_cases.sol:283:29: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function check_dd_local(uint _am) public // Buggy and tool says Buggy
                            ^------^
bug_cases.sol:287:9: Warning: Unused local variable.
        uint clocal = 30;
        ^---------^
bug_cases.sol:296:29: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function check_cd_local(uint _am) public // Buggy and tool says Buggy
                            ^------^
bug_cases.sol:335:49: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
 function check_writes_within_call_node_require(uint _am) public {
                                                ^------^
bug_cases.sol:349:44: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function check_writes_within_call_node(uint _am) public
                                           ^------^


SimpleDAO.check_if() (bug_cases.sol#24-29) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#27)
SimpleDAO.require_wbc_1() (bug_cases.sol#51-60) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#55)
SimpleDAO.require_wbc_2() (bug_cases.sol#62-76) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(aaaa)() (bug_cases.sol#67)
SimpleDAO.require_wbc_3() (bug_cases.sol#78-87) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#82)
SimpleDAO.require_wbc_4() (bug_cases.sol#89-99) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#93)
SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(_am)() (bug_cases.sol#107)
SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127) sends eth to arbitrary user
	Dangerous calls:
	- a < 10 && msg.sender.call.value(_am)() (bug_cases.sol#123)
SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160) sends eth to arbitrary user
	Dangerous calls:
	- a < 10 && msg.sender.call.value(_am)() && a ++ < 10 (bug_cases.sol#158)
SimpleDAO.slither_31() (bug_cases.sol#162-172) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (bug_cases.sol#169)
SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#179)
SimpleDAO.slither_dd() (bug_cases.sol#183-186) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (bug_cases.sol#184)
SimpleDAO.slither_dd_if() (bug_cases.sol#188-191) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (bug_cases.sol#189)
SimpleDAO.test_call(uint256) (bug_cases.sol#193-200) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && a ++ < 10 (bug_cases.sol#196)
SimpleDAO.for_case_1() (bug_cases.sol#215-220) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#218)
SimpleDAO.for_case_2() (bug_cases.sol#222-228) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#226)
SimpleDAO.fun_1() (bug_cases.sol#230-235) sends eth to arbitrary user
	Dangerous calls:
	- b < 10 && msg.sender.call.value(a)() && b -- < 10 (bug_cases.sol#231)
SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && a ++ >= 20 (bug_cases.sol#273)
SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#279)
SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#288)
SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#301)
SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340) sends eth to arbitrary user
	Dangerous calls:
	- require(bool)(msg.sender.call.value(b)() && a -- >= 5) (bug_cases.sol#338)
SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() && a ++ >= 20 (bug_cases.sol#345)
SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() && a ++ >= 5 (bug_cases.sol#353)
SimpleDAO.analyze() (bug_cases.sol#358-364) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#362)
SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (bug_cases.sol#370)
SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(c)() (bug_cases.sol#377)
SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#383)
SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(a)() (bug_cases.sol#390)
SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.call.value(b)() (bug_cases.sol#398)
SimpleDAO.non_buggy_1() (bug_cases.sol#418-423) sends eth to arbitrary user
	Dangerous calls:
	- b < 10 && msg.sender.call.value(a)() (bug_cases.sol#419)
SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430) sends eth to arbitrary user
	Dangerous calls:
	- b < 10 && msg.sender.call.value(a)() (bug_cases.sol#426)
SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437) sends eth to arbitrary user
	Dangerous calls:
	- b < 10 && msg.sender.call.value(a)() && c < 10 (bug_cases.sol#433)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416):
	External calls:
	- msg.sender.call.value(_am)() (bug_cases.sol#411)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#413)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243):
	External calls:
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && now > acc.unlockTime (bug_cases.sol#241)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#242)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111):
	External calls:
	- msg.sender.call.value(_am)() (bug_cases.sol#107)
	State variables written after the call(s):
	- a = a + 1 (bug_cases.sol#108)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251):
	External calls:
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance ++ >= 20 (bug_cases.sol#249)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#250)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266):
	External calls:
	- a >= MinSum && msg.sender.call.value(_am)() && a ++ >= 20 (bug_cases.sol#264)
	State variables written after the call(s):
	- a -= _am (bug_cases.sol#265)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142):
	External calls:
	- msg.sender.call.value(_am)() (bug_cases.sol#138)
	State variables written after the call(s):
	- a = a + 1 (bug_cases.sol#139)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142):
	External calls:
	- msg.sender.call.value(_am)() (bug_cases.sol#138)
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#140)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#141)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153):
	External calls:
	- a < 10 && msg.sender.call.value(_am)() (bug_cases.sol#149)
	State variables written after the call(s):
	- a = a + 1 (bug_cases.sol#150)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153):
	External calls:
	- a < 10 && msg.sender.call.value(_am)() (bug_cases.sol#149)
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#151)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#152)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.analyze() (bug_cases.sol#358-364):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#362)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#363)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127):
	External calls:
	- a < 10 && msg.sender.call.value(_am)() (bug_cases.sol#123)
	State variables written after the call(s):
	- a = a + 1 (bug_cases.sol#124)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118):
	External calls:
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#116)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#117)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430):
	External calls:
	- b < 10 && msg.sender.call.value(a)() (bug_cases.sol#426)
	State variables written after the call(s):
	- a = c (bug_cases.sol#428)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#390)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#392)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#383)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#384)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379):
	External calls:
	- msg.sender.call.value(c)() (bug_cases.sol#377)
	State variables written after the call(s):
	- a = a - 10 (bug_cases.sol#378)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372):
	External calls:
	- msg.sender.call.value(b)() (bug_cases.sol#370)
	State variables written after the call(s):
	- a = a + 10 (bug_cases.sol#371)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#279)
	State variables written after the call(s):
	- a -= _am (bug_cases.sol#280)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.check_if() (bug_cases.sol#24-29):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#27)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#28)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.dd_wac_1() (bug_cases.sol#254-259):
	External calls:
	- msg.sender.call.value(balances_re_ent8[msg.sender])() (bug_cases.sol#257)
	State variables written after the call(s):
	- balances_re_ent8[msg.sender] = 0 (bug_cases.sol#258)
	SimpleDAO.balances_re_ent8 (bug_cases.sol#253) can be used in cross function reentrancies:
	- SimpleDAO.dd_wac_1() (bug_cases.sol#254-259)
Reentrancy in SimpleDAO.for_case_1() (bug_cases.sol#215-220):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#218)
	State variables written after the call(s):
	- z < 10 (bug_cases.sol#217)
	SimpleDAO.z (bug_cases.sol#12) can be used in cross function reentrancies:
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.z (bug_cases.sol#12)
	- z ++ (bug_cases.sol#217)
	SimpleDAO.z (bug_cases.sol#12) can be used in cross function reentrancies:
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.z (bug_cases.sol#12)
Reentrancy in SimpleDAO.for_case_2() (bug_cases.sol#222-228):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#226)
	State variables written after the call(s):
	- b = b + 10 (bug_cases.sol#227)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
	- z < 10 (bug_cases.sol#225)
	SimpleDAO.z (bug_cases.sol#12) can be used in cross function reentrancies:
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.z (bug_cases.sol#12)
	- z ++ (bug_cases.sol#225)
	SimpleDAO.z (bug_cases.sol#12) can be used in cross function reentrancies:
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.z (bug_cases.sol#12)
Reentrancy in SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181):
	External calls:
	- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#179)
	State variables written after the call(s):
	- a = a + 10 (bug_cases.sol#180)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39):
	External calls:
	- msg.sender.call.value(acc.balance)() (bug_cases.sol#37)
	State variables written after the call(s):
	- acc.balance ++ (bug_cases.sol#38)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49):
	External calls:
	- msg.sender.call.value(acc.balance)() (bug_cases.sol#47)
	State variables written after the call(s):
	- acc.balance ++ (bug_cases.sol#48)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317):
	External calls:
	- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#315)
	State variables written after the call(s):
	- b = b + 50 (bug_cases.sol#316)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.non_buggy_1() (bug_cases.sol#418-423):
	External calls:
	- b < 10 && msg.sender.call.value(a)() (bug_cases.sol#419)
	State variables written after the call(s):
	- b = c (bug_cases.sol#421)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437):
	External calls:
	- b < 10 && msg.sender.call.value(a)() && c < 10 (bug_cases.sol#433)
	State variables written after the call(s):
	- c = c + 10 (bug_cases.sol#435)
	SimpleDAO.c (bug_cases.sol#11) can be used in cross function reentrancies:
	- SimpleDAO.c (bug_cases.sol#11)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.slither_31() (bug_cases.sol#162-172):
	External calls:
	- msg.sender.call.value(b)() (bug_cases.sol#169)
	State variables written after the call(s):
	- a = a + 50 (bug_cases.sol#170)
	SimpleDAO.a (bug_cases.sol#9) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.a (bug_cases.sol#9)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
Reentrancy in SimpleDAO.slither_dd() (bug_cases.sol#183-186):
	External calls:
	- msg.sender.call.value(b)() (bug_cases.sol#184)
	State variables written after the call(s):
	- b = b + 50 (bug_cases.sol#185)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.slither_dd_if() (bug_cases.sol#188-191):
	External calls:
	- msg.sender.call.value(b)() (bug_cases.sol#189)
	State variables written after the call(s):
	- b = b + 50 (bug_cases.sol#190)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reentrancy in SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211):
	External calls:
	- msg.sender.call.value(a)() && a ++ < 10 (bug_cases.sol#207)
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#209)
	State variables written after the call(s):
	- acc.balance -= _am (bug_cases.sol#210)
	SimpleDAO.Acc (bug_cases.sol#21) can be used in cross function reentrancies:
	- SimpleDAO.Acc (bug_cases.sol#21)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39)
	- SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
Reentrancy in SimpleDAO.update_var2() (bug_cases.sol#325-329):
	External calls:
	- mod_slither_dd() (bug_cases.sol#325)
		- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#315)
	State variables written after the call(s):
	- b = c + 10 (bug_cases.sol#326)
	SimpleDAO.b (bug_cases.sol#10) can be used in cross function reentrancies:
	- SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160)
	- SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275)
	- SimpleDAO.analyze() (bug_cases.sol#358-364)
	- SimpleDAO.b (bug_cases.sol#10)
	- SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430)
	- SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393)
	- SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385)
	- SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311)
	- SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379)
	- SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372)
	- SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292)
	- SimpleDAO.check_if() (bug_cases.sol#24-29)
	- SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347)
	- SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357)
	- SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340)
	- SimpleDAO.constructor() (bug_cases.sol#331-333)
	- SimpleDAO.for_case_1() (bug_cases.sol#215-220)
	- SimpleDAO.for_case_2() (bug_cases.sol#222-228)
	- SimpleDAO.fun_1() (bug_cases.sol#230-235)
	- SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181)
	- SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317)
	- SimpleDAO.non_buggy_1() (bug_cases.sol#418-423)
	- SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437)
	- SimpleDAO.require_wbc_1() (bug_cases.sol#51-60)
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
	- SimpleDAO.require_wbc_3() (bug_cases.sol#78-87)
	- SimpleDAO.require_wbc_4() (bug_cases.sol#89-99)
	- SimpleDAO.slither_31() (bug_cases.sol#162-172)
	- SimpleDAO.slither_dd() (bug_cases.sol#183-186)
	- SimpleDAO.slither_dd_if() (bug_cases.sol#188-191)
	- SimpleDAO.test_call(uint256) (bug_cases.sol#193-200)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400)
	- SimpleDAO.update_var() (bug_cases.sol#319-323)
	- SimpleDAO.update_var2() (bug_cases.sol#325-329)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

SimpleDAO.aaaa (bug_cases.sol#14) is never initialized. It is used in:
	- SimpleDAO.require_wbc_2() (bug_cases.sol#62-76)
SimpleDAO.MinSum (bug_cases.sol#236) is never initialized. It is used in:
	- SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118)
	- SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142)
	- SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153)
	- SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211)
	- SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243)
	- SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251)
	- SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266)
	- SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

SimpleDAO.check_if() (bug_cases.sol#24-29) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#27)
SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39) ignores return value by msg.sender.call.value(acc.balance)() (bug_cases.sol#37)
SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49) ignores return value by msg.sender.call.value(acc.balance)() (bug_cases.sol#47)
SimpleDAO.require_wbc_1() (bug_cases.sol#51-60) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#55)
SimpleDAO.require_wbc_2() (bug_cases.sol#62-76) ignores return value by msg.sender.call.value(aaaa)() (bug_cases.sol#67)
SimpleDAO.require_wbc_3() (bug_cases.sol#78-87) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#82)
SimpleDAO.require_wbc_4() (bug_cases.sol#89-99) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#93)
SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111) ignores return value by msg.sender.call.value(_am)() (bug_cases.sol#107)
SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142) ignores return value by msg.sender.call.value(_am)() (bug_cases.sol#138)
SimpleDAO.slither_31() (bug_cases.sol#162-172) ignores return value by msg.sender.call.value(b)() (bug_cases.sol#169)
SimpleDAO.slither_dd() (bug_cases.sol#183-186) ignores return value by msg.sender.call.value(b)() (bug_cases.sol#184)
SimpleDAO.for_case_1() (bug_cases.sol#215-220) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#218)
SimpleDAO.for_case_2() (bug_cases.sol#222-228) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#226)
SimpleDAO.dd_wac_1() (bug_cases.sol#254-259) ignores return value by msg.sender.call.value(balances_re_ent8[msg.sender])() (bug_cases.sol#257)
SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281) ignores return value by msg.sender.call.value(a)() (bug_cases.sol#279)
SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292) ignores return value by msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#288)
SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311) ignores return value by msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#301)
SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372) ignores return value by msg.sender.call.value(b)() (bug_cases.sol#370)
SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379) ignores return value by msg.sender.call.value(c)() (bug_cases.sol#377)
SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400) ignores return value by msg.sender.call.value(b)() (bug_cases.sol#398)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls

SimpleDAO.for_case_1() (bug_cases.sol#215-220) has external calls inside a loop: msg.sender.call.value(a)() (bug_cases.sol#218)
SimpleDAO.for_case_2() (bug_cases.sol#222-228) has external calls inside a loop: msg.sender.call.value(a)() (bug_cases.sol#226)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160):
	External calls:
	- a < 10 && msg.sender.call.value(_am)() && a ++ < 10 (bug_cases.sol#158)
	State variables written after the call(s):
	- b = b + 1 (bug_cases.sol#159)
Reentrancy in SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#390)
	State variables written after the call(s):
	- c = c - 10 (bug_cases.sol#391)
Reentrancy in SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311):
	External calls:
	- msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#301)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#302)
	- b = alocal + blocal (bug_cases.sol#304)
Reentrancy in SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292):
	External calls:
	- msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#288)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#289)
	- b = alocal + blocal (bug_cases.sol#291)
Reentrancy in SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347):
	External calls:
	- msg.sender.call.value(a)() && a ++ >= 20 (bug_cases.sol#345)
	State variables written after the call(s):
	- b -= _am (bug_cases.sol#346)
Reentrancy in SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357):
	External calls:
	- msg.sender.call.value(b)() && a ++ >= 5 (bug_cases.sol#353)
	State variables written after the call(s):
	- z ++ (bug_cases.sol#355)
Reentrancy in SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340):
	External calls:
	- require(bool)(msg.sender.call.value(b)() && a -- >= 5) (bug_cases.sol#338)
	State variables written after the call(s):
	- z ++ (bug_cases.sol#339)
Reentrancy in SimpleDAO.for_case_1() (bug_cases.sol#215-220):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#218)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#219)
Reentrancy in SimpleDAO.fun_1() (bug_cases.sol#230-235):
	External calls:
	- b < 10 && msg.sender.call.value(a)() && b -- < 10 (bug_cases.sol#231)
	State variables written after the call(s):
	- c = c - 10 (bug_cases.sol#233)
Reentrancy in SimpleDAO.require_wbc_1() (bug_cases.sol#51-60):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#55)
	State variables written after the call(s):
	- c = b + 5 (bug_cases.sol#56)
Reentrancy in SimpleDAO.require_wbc_2() (bug_cases.sol#62-76):
	External calls:
	- msg.sender.call.value(aaaa)() (bug_cases.sol#67)
	State variables written after the call(s):
	- b = b - 10 (bug_cases.sol#69)
	- c = b + 5 (bug_cases.sol#70)
	- temp = temp - 10 (bug_cases.sol#72)
	- x = x - 10 (bug_cases.sol#74)
Reentrancy in SimpleDAO.require_wbc_3() (bug_cases.sol#78-87):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#82)
	State variables written after the call(s):
	- c = c - 10 (bug_cases.sol#84)
Reentrancy in SimpleDAO.require_wbc_4() (bug_cases.sol#89-99):
	External calls:
	- msg.sender.call.value(a)() (bug_cases.sol#93)
	State variables written after the call(s):
	- c = c - 10 (bug_cases.sol#95)
	- c = b - 10 (bug_cases.sol#97)
Reentrancy in SimpleDAO.test_call(uint256) (bug_cases.sol#193-200):
	External calls:
	- msg.sender.call.value(a)() && a ++ < 10 (bug_cases.sol#196)
	State variables written after the call(s):
	- b = b + 1 (bug_cases.sol#197)
Reentrancy in SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211):
	External calls:
	- msg.sender.call.value(a)() && a ++ < 10 (bug_cases.sol#207)
	State variables written after the call(s):
	- b = b + 1 (bug_cases.sol#208)
Reentrancy in SimpleDAO.update_var() (bug_cases.sol#319-323):
	External calls:
	- mod_slither_dd() (bug_cases.sol#319)
		- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#315)
	State variables written after the call(s):
	- c = c - 10 (bug_cases.sol#321)
Reentrancy in SimpleDAO.update_var2() (bug_cases.sol#325-329):
	External calls:
	- mod_slither_dd() (bug_cases.sol#325)
		- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#315)
	State variables written after the call(s):
	- c = c - 10 (bug_cases.sol#327)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243) uses timestamp for comparisons
	Dangerous comparisons:
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && now > acc.unlockTime (bug_cases.sol#241)
SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416) uses timestamp for comparisons
	Dangerous comparisons:
	- acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime (bug_cases.sol#408)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SimpleDAO.for_case_1() (bug_cases.sol#215-220) has costly operations inside a loop:
	- z ++ (bug_cases.sol#217)
SimpleDAO.for_case_2() (bug_cases.sol#222-228) has costly operations inside a loop:
	- z ++ (bug_cases.sol#225)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Version constraint 0.4.24 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- 0.4.24 (bug_cases.sol#6)
solc-0.4.24 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in SimpleDAO.check_if() (bug_cases.sol#24-29):
	- msg.sender.call.value(a)() (bug_cases.sol#27)
Low level call in SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39):
	- msg.sender.call.value(acc.balance)() (bug_cases.sol#37)
Low level call in SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49):
	- msg.sender.call.value(acc.balance)() (bug_cases.sol#47)
Low level call in SimpleDAO.require_wbc_1() (bug_cases.sol#51-60):
	- msg.sender.call.value(a)() (bug_cases.sol#55)
Low level call in SimpleDAO.require_wbc_2() (bug_cases.sol#62-76):
	- msg.sender.call.value(aaaa)() (bug_cases.sol#67)
Low level call in SimpleDAO.require_wbc_3() (bug_cases.sol#78-87):
	- msg.sender.call.value(a)() (bug_cases.sol#82)
Low level call in SimpleDAO.require_wbc_4() (bug_cases.sol#89-99):
	- msg.sender.call.value(a)() (bug_cases.sol#93)
Low level call in SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111):
	- msg.sender.call.value(_am)() (bug_cases.sol#107)
Low level call in SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118):
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#116)
Low level call in SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127):
	- a < 10 && msg.sender.call.value(_am)() (bug_cases.sol#123)
Low level call in SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142):
	- msg.sender.call.value(_am)() (bug_cases.sol#138)
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#140)
Low level call in SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153):
	- a < 10 && msg.sender.call.value(_am)() (bug_cases.sol#149)
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#151)
Low level call in SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160):
	- a < 10 && msg.sender.call.value(_am)() && a ++ < 10 (bug_cases.sol#158)
Low level call in SimpleDAO.slither_31() (bug_cases.sol#162-172):
	- msg.sender.call.value(b)() (bug_cases.sol#169)
Low level call in SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181):
	- require(bool)(msg.sender.call.value(b)()) (bug_cases.sol#179)
Low level call in SimpleDAO.slither_dd() (bug_cases.sol#183-186):
	- msg.sender.call.value(b)() (bug_cases.sol#184)
Low level call in SimpleDAO.slither_dd_if() (bug_cases.sol#188-191):
	- msg.sender.call.value(b)() (bug_cases.sol#189)
Low level call in SimpleDAO.test_call(uint256) (bug_cases.sol#193-200):
	- msg.sender.call.value(a)() && a ++ < 10 (bug_cases.sol#196)
Low level call in SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211):
	- msg.sender.call.value(a)() && a ++ < 10 (bug_cases.sol#207)
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance >= 20 (bug_cases.sol#209)
Low level call in SimpleDAO.for_case_1() (bug_cases.sol#215-220):
	- msg.sender.call.value(a)() (bug_cases.sol#218)
Low level call in SimpleDAO.for_case_2() (bug_cases.sol#222-228):
	- msg.sender.call.value(a)() (bug_cases.sol#226)
Low level call in SimpleDAO.fun_1() (bug_cases.sol#230-235):
	- b < 10 && msg.sender.call.value(a)() && b -- < 10 (bug_cases.sol#231)
Low level call in SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243):
	- acc.balance >= MinSum && msg.sender.call.value(acc.balance)() && now > acc.unlockTime (bug_cases.sol#241)
Low level call in SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251):
	- acc.balance >= MinSum && msg.sender.call.value(_am)() && acc.balance ++ >= 20 (bug_cases.sol#249)
Low level call in SimpleDAO.dd_wac_1() (bug_cases.sol#254-259):
	- msg.sender.call.value(balances_re_ent8[msg.sender])() (bug_cases.sol#257)
Low level call in SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266):
	- a >= MinSum && msg.sender.call.value(_am)() && a ++ >= 20 (bug_cases.sol#264)
Low level call in SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275):
	- msg.sender.call.value(a)() && a ++ >= 20 (bug_cases.sol#273)
Low level call in SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281):
	- msg.sender.call.value(a)() (bug_cases.sol#279)
Low level call in SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292):
	- msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#288)
Low level call in SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311):
	- msg.sender.call.value(alocal + blocal + c)() (bug_cases.sol#301)
Low level call in SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340):
	- require(bool)(msg.sender.call.value(b)() && a -- >= 5) (bug_cases.sol#338)
Low level call in SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347):
	- msg.sender.call.value(a)() && a ++ >= 20 (bug_cases.sol#345)
Low level call in SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357):
	- msg.sender.call.value(b)() && a ++ >= 5 (bug_cases.sol#353)
Low level call in SimpleDAO.analyze() (bug_cases.sol#358-364):
	- msg.sender.call.value(a)() (bug_cases.sol#362)
Low level call in SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372):
	- msg.sender.call.value(b)() (bug_cases.sol#370)
Low level call in SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379):
	- msg.sender.call.value(c)() (bug_cases.sol#377)
Low level call in SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385):
	- msg.sender.call.value(a)() (bug_cases.sol#383)
Low level call in SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393):
	- msg.sender.call.value(a)() (bug_cases.sol#390)
Low level call in SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400):
	- msg.sender.call.value(b)() (bug_cases.sol#398)
Low level call in SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416):
	- msg.sender.call.value(_am)() (bug_cases.sol#411)
Low level call in SimpleDAO.non_buggy_1() (bug_cases.sol#418-423):
	- b < 10 && msg.sender.call.value(a)() (bug_cases.sol#419)
Low level call in SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430):
	- b < 10 && msg.sender.call.value(a)() (bug_cases.sol#426)
Low level call in SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437):
	- b < 10 && msg.sender.call.value(a)() && c < 10 (bug_cases.sol#433)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function SimpleDAO.check_if() (bug_cases.sol#24-29) is not in mixedCase
Function SimpleDAO.indirect_control_dep_ref() (bug_cases.sol#31-39) is not in mixedCase
Function SimpleDAO.indirect_control_dep_ref2() (bug_cases.sol#41-49) is not in mixedCase
Function SimpleDAO.require_wbc_1() (bug_cases.sol#51-60) is not in mixedCase
Function SimpleDAO.require_wbc_2() (bug_cases.sol#62-76) is not in mixedCase
Function SimpleDAO.require_wbc_3() (bug_cases.sol#78-87) is not in mixedCase
Function SimpleDAO.require_wbc_4() (bug_cases.sol#89-99) is not in mixedCase
Function SimpleDAO.Collect_2(uint256) (bug_cases.sol#101-111) is not in mixedCase
Parameter SimpleDAO.Collect_2(uint256)._am (bug_cases.sol#101) is not in mixedCase
Function SimpleDAO.buggy_Collect_2_new(uint256) (bug_cases.sol#113-118) is not in mixedCase
Parameter SimpleDAO.buggy_Collect_2_new(uint256)._am (bug_cases.sol#113) is not in mixedCase
Function SimpleDAO.buggy_Collect_2(uint256) (bug_cases.sol#119-127) is not in mixedCase
Parameter SimpleDAO.buggy_Collect_2(uint256)._am (bug_cases.sol#119) is not in mixedCase
Function SimpleDAO.Collect_222(uint256) (bug_cases.sol#131-142) is not in mixedCase
Parameter SimpleDAO.Collect_222(uint256)._am (bug_cases.sol#131) is not in mixedCase
Function SimpleDAO.Collect_23(uint256) (bug_cases.sol#145-153) is not in mixedCase
Parameter SimpleDAO.Collect_23(uint256)._am (bug_cases.sol#145) is not in mixedCase
Function SimpleDAO.Collect_12(uint256) (bug_cases.sol#155-160) is not in mixedCase
Parameter SimpleDAO.Collect_12(uint256)._am (bug_cases.sol#155) is not in mixedCase
Function SimpleDAO.slither_31() (bug_cases.sol#162-172) is not in mixedCase
Function SimpleDAO.indirect_control_dep_1() (bug_cases.sol#174-181) is not in mixedCase
Function SimpleDAO.slither_dd() (bug_cases.sol#183-186) is not in mixedCase
Function SimpleDAO.slither_dd_if() (bug_cases.sol#188-191) is not in mixedCase
Function SimpleDAO.test_call(uint256) (bug_cases.sol#193-200) is not in mixedCase
Function SimpleDAO.test_call2(uint256) (bug_cases.sol#203-211) is not in mixedCase
Parameter SimpleDAO.test_call2(uint256)._am (bug_cases.sol#203) is not in mixedCase
Function SimpleDAO.for_case_1() (bug_cases.sol#215-220) is not in mixedCase
Function SimpleDAO.for_case_2() (bug_cases.sol#222-228) is not in mixedCase
Function SimpleDAO.fun_1() (bug_cases.sol#230-235) is not in mixedCase
Function SimpleDAO.Collect_1(uint256) (bug_cases.sol#238-243) is not in mixedCase
Parameter SimpleDAO.Collect_1(uint256)._am (bug_cases.sol#238) is not in mixedCase
Function SimpleDAO.Collect_21(uint256) (bug_cases.sol#245-251) is not in mixedCase
Parameter SimpleDAO.Collect_21(uint256)._am (bug_cases.sol#245) is not in mixedCase
Function SimpleDAO.dd_wac_1() (bug_cases.sol#254-259) is not in mixedCase
Function SimpleDAO.Collect_21_updated(uint256) (bug_cases.sol#260-266) is not in mixedCase
Parameter SimpleDAO.Collect_21_updated(uint256)._am (bug_cases.sol#260) is not in mixedCase
Function SimpleDAO.Collect_khichdi(uint256) (bug_cases.sol#268-275) is not in mixedCase
Parameter SimpleDAO.Collect_khichdi(uint256)._am (bug_cases.sol#268) is not in mixedCase
Function SimpleDAO.check_dd(uint256) (bug_cases.sol#277-281) is not in mixedCase
Parameter SimpleDAO.check_dd(uint256)._am (bug_cases.sol#277) is not in mixedCase
Function SimpleDAO.check_dd_local(uint256) (bug_cases.sol#283-292) is not in mixedCase
Function SimpleDAO.check_cd_local(uint256) (bug_cases.sol#296-311) is not in mixedCase
Function SimpleDAO.update_var() (bug_cases.sol#319-323) is not in mixedCase
Function SimpleDAO.update_var2() (bug_cases.sol#325-329) is not in mixedCase
Function SimpleDAO.check_writes_within_call_node_require(uint256) (bug_cases.sol#335-340) is not in mixedCase
Function SimpleDAO.check_writes_af_call_node(uint256) (bug_cases.sol#342-347) is not in mixedCase
Parameter SimpleDAO.check_writes_af_call_node(uint256)._am (bug_cases.sol#342) is not in mixedCase
Function SimpleDAO.check_writes_within_call_node(uint256) (bug_cases.sol#349-357) is not in mixedCase
Function SimpleDAO.check_control_dep_unsafe() (bug_cases.sol#366-372) is not in mixedCase
Function SimpleDAO.check_control_dep_safe() (bug_cases.sol#374-379) is not in mixedCase
Function SimpleDAO.checkWrites_unsafe_1() (bug_cases.sol#381-385) is not in mixedCase
Function SimpleDAO.checkWrites_safe() (bug_cases.sol#387-393) is not in mixedCase
Function SimpleDAO.unsafe_process_require_assert_wbc(uint256) (bug_cases.sol#395-400) is not in mixedCase
Function SimpleDAO.CollectReal(uint256) (bug_cases.sol#403-416) is not in mixedCase
Parameter SimpleDAO.CollectReal(uint256)._am (bug_cases.sol#403) is not in mixedCase
Function SimpleDAO.non_buggy_1() (bug_cases.sol#418-423) is not in mixedCase
Function SimpleDAO.call_within_if_dd() (bug_cases.sol#425-430) is not in mixedCase
Function SimpleDAO.non_buggy_call_within_if_1() (bug_cases.sol#432-437) is not in mixedCase
Variable SimpleDAO.Acc (bug_cases.sol#21) is not in mixedCase
Variable SimpleDAO.Bcc (bug_cases.sol#22) is not in mixedCase
Variable SimpleDAO.MinSum (bug_cases.sol#236) is not in mixedCase
Variable SimpleDAO.balances_re_ent8 (bug_cases.sol#253) is not in mixedCase
Modifier SimpleDAO.mod_slither_dd() (bug_cases.sol#313-317) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

SimpleDAO.MinSum (bug_cases.sol#236) should be constant 
SimpleDAO.aaaa (bug_cases.sol#14) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
bug_cases.sol analyzed (1 contracts with 94 detectors), 220 result(s) found

real	0m7.737s
user	0m6.476s
sys	0m1.030s
